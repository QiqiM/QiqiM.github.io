<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yato</title>
  
  
  <link href="/QiqiM.github.io/atom.xml" rel="self"/>
  
  <link href="https://qiqim.github.io/"/>
  <updated>2020-03-02T12:23:05.841Z</updated>
  <id>https://qiqim.github.io/</id>
  
  <author>
    <name>yato</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://qiqim.github.io/2020/03/02/hello-world/"/>
    <id>https://qiqim.github.io/2020/03/02/hello-world/</id>
    <published>2020-03-02T12:23:05.841Z</published>
    <updated>2020-03-02T12:23:05.841Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="https://qiqim.github.io/2020/02/26/My-New-Post/"/>
    <id>https://qiqim.github.io/2020/02/26/My-New-Post/</id>
    <published>2020-02-26T21:58:01.000Z</published>
    <updated>2020-03-02T12:23:05.841Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TEST-CI"><a href="#TEST-CI" class="headerlink" title="TEST CI"></a>TEST CI</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Sleep &#123;</span><br><span class="line">  constructor(timeout) &#123;</span><br><span class="line">    this.timeout = timeout;</span><br><span class="line">  &#125;</span><br><span class="line">  then(resolve, reject) &#123;</span><br><span class="line">    const startTime = Date.now();</span><br><span class="line">    setTimeout(</span><br><span class="line">      () =&gt; resolve(Date.now() - startTime),</span><br><span class="line">      this.timeout</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">  const sleepTime = await new Sleep(1000);</span><br><span class="line">  console.log(sleepTime);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="yyyyyyyyyyyyyyyyyyy"><a href="#yyyyyyyyyyyyyyyyyyy" class="headerlink" title="yyyyyyyyyyyyyyyyyyy"></a>yyyyyyyyyyyyyyyyyyy</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TEST-CI&quot;&gt;&lt;a href=&quot;#TEST-CI&quot; class=&quot;headerlink&quot; title=&quot;TEST CI&quot;&gt;&lt;/a&gt;TEST CI&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模拟实现js的bind方法</title>
    <link href="https://qiqim.github.io/2020/02/26/%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0js%E7%9A%84bind%E6%96%B9%E6%B3%95/"/>
    <id>https://qiqim.github.io/2020/02/26/模拟实现js的bind方法/</id>
    <published>2020-02-26T21:58:01.000Z</published>
    <updated>2020-03-02T12:23:05.841Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype.bind); <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype.bind());  <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.bind.name);  <span class="comment">// bind</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.bind().name);  <span class="comment">// bound</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200229141250-image.png" alt="20200229141250imagepng"></p><ol><li><h4 id="bind是什么"><a href="#bind是什么" class="headerlink" title="bind是什么"></a>bind是什么</h4></li></ol><ul><li><p>a. <code>bind</code> 是<code>Function</code>原型链中<code>Function.prototype</code>的一个函数，每个函数都可以调用它。</p></li><li><p>b. <code>bind</code>本身是一个函数名为<code>bind</code>的函数，返回值也是函数，函数名是<code>bound</code>。(console出来为</p><p><code>bound</code>加上一个空格)。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"yato"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">original</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    <span class="built_in">console</span>.log([a,b])</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = original.bind(obj, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> boundInvoke = bound(<span class="number">2</span>)                    <span class="comment">// 'yato', Array(2)[1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(boundInvoke)                       <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(original.bind.name)                <span class="comment">// bind</span></span><br><span class="line"><span class="built_in">console</span>.log(original.bind.length)              <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(original.bind().length)            <span class="comment">// 2 返回original函数形参个数</span></span><br><span class="line"><span class="built_in">console</span>.log(bound.name)                        <span class="comment">// 'bound original'</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;).bind().name)        <span class="comment">// 'bound '</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;).bind().length)      <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200301155455-image.png" alt="20200301155455imagepng"></p><h4 id="2-进一步理解bind"><a href="#2-进一步理解bind" class="headerlink" title="2. 进一步理解bind"></a>2. 进一步理解bind</h4><ul><li>a. 调用<code>bind</code>的函数中的<code>this</code>指向<code>bind()</code>函数的第一个参数。</li><li><p>b. 函数<code>bind()</code>时传递的参数被bind接受处理，<code>bind()</code>完毕之后，程序调用返回的函数（<strong>bound</strong>）时，传递的参数也接收处理了，也就是在<code>bind()</code>内部合并处理了。</p></li><li><p>c. 并且<code>bind()</code>后的函数的name为<code>bound+空格+调用bind的函数名</code>。如果调用函数为匿名函数，则名字为<code>bound+空格</code></p></li><li><p>d. <code>bind</code>后的返回值函数，执行后返回值时原函数<code>（original）</code>的返回值（上例中的false）</p></li><li><p>e. <code>bind</code>函数的形参（即函数的<code>length</code>）是<code>1</code>。<code>bind</code>后返回的<code>bound函数形参不定</code>，根据绑定的函数原函数（<code>original</code>）形参个数决定。</p></li></ul><h4 id="3-根据上面的两个例子，模拟实现一个简单版的bindFn"><a href="#3-根据上面的两个例子，模拟实现一个简单版的bindFn" class="headerlink" title="3.根据上面的两个例子，模拟实现一个简单版的bindFn"></a>3.根据上面的两个例子，模拟实现一个简单版的<code>bindFn</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bindFn = <span class="function"><span class="keyword">function</span> <span class="title">bindFake</span>(<span class="params">thisArg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="keyword">this</span> + <span class="string">'must be a function'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储函数本身</span></span><br><span class="line">    <span class="keyword">let</span> self  = <span class="keyword">this</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 去除thisArg的其他参数，转成数组</span></span><br><span class="line">    <span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> bound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// bind 返回的函数，也就是bound，在程序中被调用时传递的参数转成数组</span></span><br><span class="line">        <span class="keyword">let</span> boundArg = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// apply修改this指向，把两个函数的参数合并传给self函数，返回执行结果</span></span><br><span class="line">        <span class="keyword">return</span> self.apply(thisArg, args.concat(boundArg))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'yato'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">original</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    <span class="built_in">console</span>.log([a,b])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = original.bindFn(obj, <span class="number">1</span>)</span><br><span class="line">bound(<span class="number">2</span>);  <span class="comment">// 'yato', [1,2]</span></span><br></pre></td></tr></table></figure><h4 id="4-但是函数是可以使用new来实例化的。"><a href="#4-但是函数是可以使用new来实例化的。" class="headerlink" title="4.但是函数是可以使用new来实例化的。"></a>4.但是函数是可以使用<code>new</code>来实例化的。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span> : <span class="string">'yato'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">original</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this : '</span>, <span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'typeof this : '</span>, <span class="keyword">typeof</span> <span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.name = b</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'name: '</span>, <span class="keyword">this</span>.name)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this: '</span>, <span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log([a,b])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = original.bind(obj, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> newBoundInvoke = <span class="keyword">new</span> bound(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'newBoundInvoke: '</span>, newBoundInvoke)</span><br></pre></td></tr></table></figure><p><strong>分析例子可以得出结论</strong></p><ul><li><p>a. 从例子中可以看出<code>this</code>指向了<code>new bound()</code>生成的对象</p></li><li><p>b.  new bound() 的返回值是以original原函数构造器生成的新对象。original原函数的this指向的就是这个新对象。</p></li><li><p>c.简要剖析下new做了什么</p><ul><li><ol><li>创建一个全新的空对象</li><li>对这个对象指向原型链接（<code>instance.__proto__ = Class.prototype</code> ），其实<code>Class.prototype</code>就是<code>constructor</code></li><li>生成的新对象会绑定到函数调用的this</li><li>通过new创建的每个对象最终被<code>[[prototype]]</code>链接这个函数的<code>prototype</code>上（参考2）</li><li>如果函数没有返回对象类型<code>Object</code>(包含<code>Function</code>, <code>Array</code>, <code>Date</code>, <code>RegExg</code>, <code>Error</code>),那么<code>new表达式</code>中的函数调用会自动返回这个新的对象</li></ol></li></ul></li></ul><h5 id="4-1所有相当于在new调用时，bind的返回值函数bound内部要实现new的操作"><a href="#4-1所有相当于在new调用时，bind的返回值函数bound内部要实现new的操作" class="headerlink" title="4.1所有相当于在new调用时，bind的返回值函数bound内部要实现new的操作"></a>4.1所有相当于在new调用时，bind的返回值函数bound内部要实现new的操作</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二版 实现new调用</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bindFn = <span class="function"><span class="keyword">function</span> <span class="title">bindFake</span>(<span class="params">thisArg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="keyword">this</span> + <span class="string">' must be a function'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储调用bind的函数本身的引用</span></span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去除thisArg参数，其他转成数组</span></span><br><span class="line">    <span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> bound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> boundArgs = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">        <span class="keyword">let</span> finalArgs = args.concat(boundArgs)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// new 调用时，其实this instanceof bound 判断不是很准确。es6</span></span><br><span class="line">        <span class="comment">// new.target就是解决这一问题的</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> bound)&#123;</span><br><span class="line">            <span class="comment">// 这里是实现上文描述的 new 的第 1, 2, 4 步</span></span><br><span class="line">            <span class="comment">// 1.创建一个全新的对象</span></span><br><span class="line">            <span class="comment">// 2.并且执行[[Prototype]]链接</span></span><br><span class="line">            <span class="comment">// 4.通过`new`创建的每个对象将最终被`[[Prototype]]`链接到这个函数的`prototype`对象上。</span></span><br><span class="line">            <span class="comment">// self可能是ES6的箭头函数，没有prototype，所以就没必要再指向做prototype操作。</span></span><br><span class="line">            <span class="keyword">if</span>(self.prototype)&#123;</span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="title">Empty</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">                Empty.prototype = self.prototype</span><br><span class="line">                bound.prototype = <span class="keyword">new</span> Empty()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这里实现的时上文描述的第三步</span></span><br><span class="line">            <span class="comment">// 3.生成的新对象会绑定到函数调用的this</span></span><br><span class="line">            <span class="keyword">let</span> result = self.apply(<span class="keyword">this</span>, finalArgs);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这里是实现上文描述的 new 的第 5 步</span></span><br><span class="line">            <span class="comment">// 5.如果函数没有返回对象类型`Object`(包含`Functoin`, `Array`, `Date`, `RegExg`,               //   `Error`)，</span></span><br><span class="line">            <span class="comment">// 那么`new`表达式中的函数调用会自动返回这个新的对象。</span></span><br><span class="line">            <span class="keyword">let</span> isObject = <span class="keyword">typeof</span> result === <span class="string">'object'</span> &amp;&amp; result !== <span class="literal">null</span></span><br><span class="line">            <span class="keyword">let</span> isFunction = <span class="keyword">typeof</span> result === <span class="string">'function'</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(isObject || isFunction)</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// apply修改this指向，把两个函数的参数合并传给self函数，并执行self函数，返回执行结果</span></span><br><span class="line">            <span class="keyword">return</span> self.apply(thisArg, finalArgs)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span> : <span class="string">'yato'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">original</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this : '</span>, <span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'typeof this : '</span>, <span class="keyword">typeof</span> <span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.name = b</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'name: '</span>, <span class="keyword">this</span>.name)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this: '</span>, <span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log([a,b])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = original.bindFn(obj, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> newBoundInvoke = <span class="keyword">new</span> bound(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'newBoundInvoke: '</span>, newBoundInvoke)</span><br></pre></td></tr></table></figure><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h4><ul><li><ol><li><code>bind</code>是<code>Function</code>原型链中<code>Function.prototype</code>的一个属性，它是一个函数，修改<code>this指向</code>，合并参数传递给原函数，<code>返回值是一个新的函数</code>。</li></ol></li><li><ol start="2"><li><code>bind</code>返回的函数可以通过<code>new</code>调用，这是提供的<code>this参数被忽略</code>，指向了new生成的全新对象。<code>bind()</code>内部模拟实现了<code>new</code>操作符</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="JS" scheme="https://qiqim.github.io/tags/JS/"/>
    
      <category term="深入js系列" scheme="https://qiqim.github.io/tags/%E6%B7%B1%E5%85%A5js%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>C++实现双向链表</title>
    <link href="https://qiqim.github.io/2019/06/25/C++%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>https://qiqim.github.io/2019/06/25/C++实现双向链表/</id>
    <published>2019-06-25T10:43:13.000Z</published>
    <updated>2020-03-02T12:23:05.841Z</updated>
    
    <content type="html"><![CDATA[<p>　　双向链表(双链表)是链表的一种。和单链表一样，双链表也是由节点组成，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。一般我们都构造双向循环链表。<br><a id="more"></a></p><h3 id="C-实现双向链表"><a href="#C-实现双向链表" class="headerlink" title="C++实现双向链表"></a>C++实现双向链表</h3><p>双向链表头文件(LinkList.h)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _LINK_LIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _LINK_LIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">DNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T value;</span><br><span class="line">DNode *prev;</span><br><span class="line">DNode *next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">DNode() &#123;&#125;</span><br><span class="line">DNode(T t, DNode *prev, DNode *next) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;value = t;</span><br><span class="line"><span class="keyword">this</span>-&gt;prev = prev;</span><br><span class="line"><span class="keyword">this</span>-&gt;next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">DoubleLink</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">DoubleLink();</span><br><span class="line">~DoubleLink();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function">T <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">T <span class="title">getLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, T t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertFirst</span><span class="params">(T t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">appendLast</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delFirst</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delLast</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">DNode&lt;T&gt; *pHead;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">DNode&lt;T&gt; *getNode(<span class="keyword">int</span> index);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">DoubleLink</span>&lt;T&gt;:</span>:DoubleLink() : count(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 创建表头。注意：表头没有存储数据</span></span><br><span class="line">pHead = <span class="keyword">new</span> DNode&lt;T&gt;();</span><br><span class="line">pHead-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 析构函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">DoubleLink</span>&lt;T&gt;:</span>:~DoubleLink()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 删除所有结点</span></span><br><span class="line">DNode&lt;T&gt;* pTemp;</span><br><span class="line">DNode&lt;T&gt;* pNode = pHead-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (pNode != pHead) </span><br><span class="line">&#123;</span><br><span class="line">pTemp = pNode;</span><br><span class="line">pNode = pNode-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> pTemp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除表头</span></span><br><span class="line"><span class="keyword">delete</span> pHead;</span><br><span class="line">pHead = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回结点数目</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:isEmpty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回节点数目</span></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:size()</span><br><span class="line">&#123;   </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取index位置的结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">DNode</span>&lt;T&gt;* <span class="title">DoubleLink</span>&lt;T&gt;:</span>:getNode(<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 判断参数有效性</span></span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= count)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" getNode failed! the index is out of round"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  正向查找， 查找优化，减少查找次数</span></span><br><span class="line"><span class="keyword">if</span> (index &lt;= count / <span class="number">2</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">DNode&lt;T&gt;* pIndex = pHead-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (i++ &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">pIndex = pIndex-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pIndex;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 反向查找</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rIndex = count - index - <span class="number">1</span>;</span><br><span class="line">DNode&lt;T&gt;* pRindex = pHead-&gt;prev;</span><br><span class="line"><span class="keyword">while</span> (j++ &lt; rIndex)</span><br><span class="line">&#123;</span><br><span class="line">pRindex = pRindex-&gt;prev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pRindex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第index位置的结点的值</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:get(<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> getNode(index)-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第一个结点的值</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:getLast()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> getNode(count<span class="number">-1</span>)-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取最后一个结点的值</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:getFirst()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> getNode(<span class="number">0</span>)-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结点插入到第index位置之前</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:insert(<span class="keyword">int</span> index, T t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> insertFirst(t);</span><br><span class="line"></span><br><span class="line">DNode&lt;T&gt;* pIndex = getNode(index);</span><br><span class="line">DNode&lt;T&gt;* pNode = <span class="keyword">new</span> DNode&lt;T&gt;(t, pIndex-&gt;prev, pIndex);</span><br><span class="line">pIndex-&gt;prev-&gt;next = pNode;</span><br><span class="line">pIndex-&gt;prev = pNode;</span><br><span class="line">count++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结点插入到第一个结点处</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:insertFirst(T t)</span><br><span class="line">&#123;</span><br><span class="line">DNode&lt;T&gt;* pNode = <span class="keyword">new</span> DNode&lt;T&gt;(t, pHead, pHead-&gt;next);   <span class="comment">// 构造函数时就已经指定结点的前驱和后继结点了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里第一个结点的时候需要判断空指针</span></span><br><span class="line"><span class="keyword">if</span> (pHead-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">pHead-&gt;prev = pNode;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pHead-&gt;next-&gt;prev = pNode;</span><br><span class="line"></span><br><span class="line">pHead-&gt;next = pNode;</span><br><span class="line">count++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结点追加到链表的末尾</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:appendLast(T t)</span><br><span class="line">&#123;</span><br><span class="line">DNode&lt;T&gt;* pNode = <span class="keyword">new</span> DNode&lt;T&gt;(t, pHead-&gt;prev, pHead);</span><br><span class="line">pHead-&gt;prev-&gt;next = pNode;</span><br><span class="line">pHead-&gt;prev = pNode;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除index位置的结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:del(<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line">DNode&lt;T&gt;* pIndex = getNode(index);</span><br><span class="line">pIndex-&gt;next-&gt;prev = pIndex-&gt;prev;</span><br><span class="line">pIndex-&gt;prev-&gt;next = pIndex-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> pIndex;</span><br><span class="line">count--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第一个结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:delFirst()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> del(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除最后一个结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:delLast()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> del(count - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !_LINK_LIST_H</span></span></span><br></pre></td></tr></table></figure></p><h4 id="双向链表测试文件-LinkList-cpp"><a href="#双向链表测试文件-LinkList-cpp" class="headerlink" title="双向链表测试文件(LinkList.cpp)"></a>双向链表测试文件(LinkList.cpp)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LinkList.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表操作int数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">intTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> intArr[<span class="number">4</span>] = &#123; <span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n -------------intTest------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建双向链表</span></span><br><span class="line">DoubleLink&lt;<span class="keyword">int</span>&gt;* pDlinkList = <span class="keyword">new</span> DoubleLink&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">pDlinkList-&gt;insert(<span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">pDlinkList-&gt;appendLast(<span class="number">10</span>);</span><br><span class="line">pDlinkList-&gt;insertFirst(<span class="number">30</span>);</span><br><span class="line">pDlinkList-&gt;insert(<span class="number">1</span>, <span class="number">40</span>);</span><br><span class="line">pDlinkList-&gt;delFirst();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表是否为空</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"isEmpty= "</span> &lt;&lt; pDlinkList-&gt;isEmpty() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表的长度</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"size="</span> &lt;&lt; pDlinkList-&gt;size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印双向链表的全部数据</span></span><br><span class="line"><span class="keyword">int</span> length = pDlinkList-&gt;size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"pDlinkList("</span> &lt;&lt; i &lt;&lt; <span class="string">")="</span> &lt;&lt; pDlinkList-&gt;get(i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stringTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> sArr[<span class="number">4</span>] = &#123; <span class="string">"ten"</span>,<span class="string">"tewnty"</span>,<span class="string">"thirty"</span>,<span class="string">"forty"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n------------stringTest-----------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">DoubleLink&lt;<span class="built_in">string</span>&gt;* pDlinkList = <span class="keyword">new</span> DoubleLink&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">pDlinkList-&gt;insert(<span class="number">0</span>, sArr[<span class="number">1</span>]);</span><br><span class="line">pDlinkList-&gt;appendLast(sArr[<span class="number">0</span>]);</span><br><span class="line">pDlinkList-&gt;insertFirst(sArr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表是否为空</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"isEmpty()="</span> &lt;&lt; pDlinkList-&gt;isEmpty() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表的长度</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"size="</span> &lt;&lt; pDlinkList-&gt;size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印双向链表的全部数据</span></span><br><span class="line"><span class="keyword">int</span> length = pDlinkList-&gt;size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"pDlinkList("</span> &lt;&lt; i &lt;&lt; <span class="string">")="</span> &lt;&lt; pDlinkList-&gt;get(i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> stu stuArr[] = </span><br><span class="line">&#123; </span><br><span class="line">&#123;<span class="number">10</span>,<span class="string">"one"</span>&#125;,</span><br><span class="line">&#123;<span class="number">20</span>,<span class="string">"two"</span>&#125;,</span><br><span class="line">&#123;<span class="number">30</span>,<span class="string">"three"</span>&#125;,</span><br><span class="line">&#123;<span class="number">40</span>,<span class="string">"four"</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARR_STU_SIZE ((sizeof(stuArr)) / (sizeof(stuArr[0])))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objectTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n------------stringTest-----------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">DoubleLink&lt;stu&gt;* pDlinkList = <span class="keyword">new</span> DoubleLink&lt;stu&gt;();</span><br><span class="line"></span><br><span class="line">pDlinkList-&gt;insert(<span class="number">0</span>, stuArr[<span class="number">1</span>]);</span><br><span class="line">pDlinkList-&gt;appendLast(stuArr[<span class="number">0</span>]);</span><br><span class="line">pDlinkList-&gt;insertFirst(stuArr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表是否为空</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"isEmpty()="</span> &lt;&lt; pDlinkList-&gt;isEmpty() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表的长度</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"size="</span> &lt;&lt; pDlinkList-&gt;size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印双向链表的全部数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">p</span>;</span></span><br><span class="line"><span class="keyword">int</span> length = pDlinkList-&gt;size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = pDlinkList-&gt;get(i);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"pDlinkList("</span> &lt;&lt; i &lt;&lt; <span class="string">")=["</span> &lt;&lt; p.id &lt;&lt;<span class="string">" ,"</span> &lt;&lt; p.name&lt;&lt;<span class="string">"]"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">intTest();</span><br><span class="line">stringTest();</span><br><span class="line">objectTest();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　此文实现<a href="https://www.cnblogs.com/skywang12345/p/3561803.html" target="_blank" rel="noopener">参考</a>,侵权必删，大佬的有一些错误，经过测试已经修改。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　双向链表(双链表)是链表的一种。和单链表一样，双链表也是由节点组成，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。一般我们都构造双向循环链表。&lt;br&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://qiqim.github.io/tags/algorithm/"/>
    
      <category term="C++" scheme="https://qiqim.github.io/tags/C/"/>
    
      <category term="LinkList" scheme="https://qiqim.github.io/tags/LinkList/"/>
    
  </entry>
  
  <entry>
    <title>常见排序算法1-冒泡排序</title>
    <link href="https://qiqim.github.io/2019/06/12/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%951--%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>https://qiqim.github.io/2019/06/12/常见排序算法1--冒泡排序/</id>
    <published>2019-06-12T10:37:10.000Z</published>
    <updated>2020-03-02T12:23:05.841Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><p>　　冒泡排序(Bubble Sort，也叫泡沫排序或气泡排序)，是一种简单的排序算法。它重复的走访过要排序的数列，一次比较两个元素，如果他们的顺序错误，将元素位置对调。走访数列的工作是重复进行的，直到再没有需要交换的数据，该数列排序完成。<br><a id="more"></a><br>　　冒泡排序算法的流程如下：</p><ol><li>比较相邻的元素。如果第一个元素大于第二个元素，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数</li><li>针对所有的元素重复以上的步骤，除了最后一个元素（到最后一个元素，已经排好序了）</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>以数组arr = [5,2,6,9,3]为例说明，加粗的数字表示每次循环要比较的两个数字：</p><p>第一次外循环<br>    ( <strong>5</strong> <strong>2</strong> 6 9 3 ) ==&gt; ( <strong>2</strong> <strong>5</strong> 6 9 3 )  |  5 &gt; 2 交换位置<br>    ( 2 <strong>5</strong> <strong>6</strong> 9 3 ) ==&gt; ( 2 <strong>5</strong> <strong>6</strong> 9 3 )  |  5 &lt; 6 位置不变<br>    ( 2 5 <strong>6</strong> <strong>9</strong> 3 ) ==&gt; ( 2 5 <strong>6</strong> <strong>9</strong> 3 )  |  6 &lt; 9 位置不变<br>    ( 2 5 6 <strong>9</strong> <strong>3</strong> ) ==&gt; ( 2 5 6 <strong>3</strong> <strong>9</strong> )  |  9 &gt; 3 交换位置</p><p>第二次外循环<br>    ( <strong>2</strong> <strong>5</strong> 6 3 9 ) ==&gt; ( <strong>2</strong> <strong>5</strong> 6 3 9 )  |  2 &lt; 3 位置不变<br>    ( 2 <strong>5</strong> <strong>6</strong> 3 9 ) ==&gt; ( 2 <strong>5</strong> <strong>6</strong> 3 9 )  |  5 &lt; 6 位置不变<br>    ( 2 5 <strong>6</strong> <strong>3</strong> 9 ) ==&gt; ( 2 5 <strong>3</strong> <strong>6</strong> 9 )  |  6 &gt; 3 交换位置</p><p>第三次外循环<br>    ( <strong>2</strong> <strong>5</strong> 3 6 9 ) ==&gt; ( <strong>2</strong> <strong>5</strong> 3 6 9 )  |  2 &lt; 5 位置不变<br>    ( 2 <strong>5</strong> <strong>3</strong> 6 9 ) ==&gt; ( 2 <strong>3</strong> <strong>5</strong> 6 9 )  |  5 &gt; 3 交换位置</p><p>第四次外循环（观察一下，其实此时已经排完序了，但是程序并不知道，所以仍要进行后续循环，直到剩余的序列为1）<br>   ( <strong>2</strong> <strong>3</strong> 5 6 9 ) ==&gt; ( <strong>2</strong> <strong>3</strong> 5 6 9 )  |  2 &lt; 5 位置不变</p><h3 id="javaScript实现"><a href="#javaScript实现" class="headerlink" title="javaScript实现"></a>javaScript实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> testArr = [<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort1</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i,j,temp,l = arr.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = l- <span class="number">1</span>; i &gt; <span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubbleSort1(testArr);</span><br><span class="line"><span class="built_in">console</span>.log(testArr);   <span class="comment">// [ 2, 3, 5, 6, 9 ]</span></span><br></pre></td></tr></table></figure><p>观察上面冒泡排序的流程，不需要到最后一步，就排序完成了，后面的循环就浪费了，可以设置个flag来使它的效率更高一些：添加一个标记，如果一趟遍历中发生了变换，则标记为true,否则为false.如果一趟没有发生交换，说明排序已经完成。</p><h3 id="冒泡排序优化"><a href="#冒泡排序优化" class="headerlink" title="冒泡排序优化"></a>冒泡排序优化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort2</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i,j,temp,l = arr.length;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="number">0</span>;   <span class="comment">// 初始化flag为0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = l- <span class="number">1</span>; i &gt; <span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">                flag = <span class="number">1</span>;   <span class="comment">// 若发生交换，则标记为1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag === <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;        <span class="comment">// 若没有发生交换，则说明数列已经有序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubbleSort2(testArr);</span><br><span class="line"><span class="built_in">console</span>.log(testArr);   <span class="comment">// [ 2, 3, 5, 6, 9 ]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;算法原理&quot;&gt;&lt;a href=&quot;#算法原理&quot; class=&quot;headerlink&quot; title=&quot;算法原理&quot;&gt;&lt;/a&gt;算法原理&lt;/h3&gt;&lt;p&gt;　　冒泡排序(Bubble Sort，也叫泡沫排序或气泡排序)，是一种简单的排序算法。它重复的走访过要排序的数列，一次比较两个元素，如果他们的顺序错误，将元素位置对调。走访数列的工作是重复进行的，直到再没有需要交换的数据，该数列排序完成。&lt;br&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://qiqim.github.io/tags/algorithm/"/>
    
      <category term="sort" scheme="https://qiqim.github.io/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>屈原《渔父》</title>
    <link href="https://qiqim.github.io/2018/12/19/%E5%B1%88%E5%8E%9F%E3%80%8A%E6%B8%94%E7%88%B6%E3%80%8B/"/>
    <id>https://qiqim.github.io/2018/12/19/屈原《渔父》/</id>
    <published>2018-12-19T18:37:10.000Z</published>
    <updated>2020-03-02T12:23:05.841Z</updated>
    
    <content type="html"><![CDATA[<h4 id="转载自阮一峰老师的个人blog，侵权必删！"><a href="#转载自阮一峰老师的个人blog，侵权必删！" class="headerlink" title="转载自阮一峰老师的个人blog，侵权必删！"></a>转载自阮一峰老师的个人blog，侵权必删！</h4><p><a href="http://www.ruanyifeng.com/road/2006/2006-01-10-qu-yuan.html" target="_blank" rel="noopener">原文链接</a></p><h2 id="译文（大巧若工）"><a href="#译文（大巧若工）" class="headerlink" title="译文（大巧若工）"></a>译文（大巧若工）</h2><p>　　一个理想主义者痛苦地来到江边。在那里，他遇到了一个现实主义者。</p><p>　　现实问：“你为什么如此憔悴？”</p><p>　　理想答：“这个世界容不下我。我坚持的东西，其他人都无所谓；他们热衷的东西，我没有办法强迫自己加入。”</p><p>　　现实笑道：“老兄何必这么迂腐呢，别人怎么样，你也怎么样，不就可以了吗？他们脏，你也跟着一起脏，又何妨？像你这样自我孤立，真是自讨苦吃，不值得啊。”<br><a id="more"></a></p><p>　　理想说：“那我要问你，刚洗完头的人愿不愿意戴脏帽子，刚洗完澡的人愿不愿意穿脏衣服？干净的身体怎么能够甘心沾上灰尘呢？与其同流合污，不如选择孤独。”</p><p>　　现实指着面前的江水说：“你看这滔滔江水，如果水是清的，我就用它来洗衣服，活得干干净净；如果水是脏的，我就用它洗脚。人应该要学会适应。”</p><p>　　至此，两人就不再说话了。</p><h2 id="《渔父》-—屈原"><a href="#《渔父》-—屈原" class="headerlink" title="《渔父》 —屈原"></a>《渔父》 —屈原</h2><p>　　屈原既放，游于江潭，行吟泽畔；颜色憔悴，形容枯槁。</p><p>　　渔父见而问之曰：“子非三闾大夫与？何故至于斯？”</p><p>　　屈原曰：“举世皆浊我独清，众人皆醉我独醒，是以见放。”</p><p>　　渔父曰：“圣人不凝滞于物，而能与世推移。世人皆浊，何不淈其泥而扬其波？众人皆醉，何不铺其糟而歠其醨？何故深思高举，自令放为？”</p><p>　　屈原曰：“吾闻之：新沐者必弹冠，新浴者必振衣，安能以身之察察，受物之汶汶者乎？宁赴湘流，葬身于江鱼之腹中，安能以皓皓之白，而蒙世俗之尘埃乎？”</p><p>　　渔父莞尔而笑，鼓枻而去。歌曰：“沧浪之水清兮，可以濯吾缨；沧浪之水浊兮，可以濯吾足。”遂去，不复与言。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;转载自阮一峰老师的个人blog，侵权必删！&quot;&gt;&lt;a href=&quot;#转载自阮一峰老师的个人blog，侵权必删！&quot; class=&quot;headerlink&quot; title=&quot;转载自阮一峰老师的个人blog，侵权必删！&quot;&gt;&lt;/a&gt;转载自阮一峰老师的个人blog，侵权必删！&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/road/2006/2006-01-10-qu-yuan.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;译文（大巧若工）&quot;&gt;&lt;a href=&quot;#译文（大巧若工）&quot; class=&quot;headerlink&quot; title=&quot;译文（大巧若工）&quot;&gt;&lt;/a&gt;译文（大巧若工）&lt;/h2&gt;&lt;p&gt;　　一个理想主义者痛苦地来到江边。在那里，他遇到了一个现实主义者。&lt;/p&gt;
&lt;p&gt;　　现实问：“你为什么如此憔悴？”&lt;/p&gt;
&lt;p&gt;　　理想答：“这个世界容不下我。我坚持的东西，其他人都无所谓；他们热衷的东西，我没有办法强迫自己加入。”&lt;/p&gt;
&lt;p&gt;　　现实笑道：“老兄何必这么迂腐呢，别人怎么样，你也怎么样，不就可以了吗？他们脏，你也跟着一起脏，又何妨？像你这样自我孤立，真是自讨苦吃，不值得啊。”&lt;br&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://qiqim.github.io/tags/Article/"/>
    
  </entry>
  
  <entry>
    <title>历史过程</title>
    <link href="https://qiqim.github.io/2018/12/19/%E5%8E%86%E5%8F%B2%E8%BF%87%E7%A8%8B/"/>
    <id>https://qiqim.github.io/2018/12/19/历史过程/</id>
    <published>2018-12-19T18:26:41.000Z</published>
    <updated>2020-03-02T12:23:05.841Z</updated>
    
    <content type="html"><![CDATA[<h4 id="转载自阮一峰老师的个人blog-侵权必删！"><a href="#转载自阮一峰老师的个人blog-侵权必删！" class="headerlink" title="转载自阮一峰老师的个人blog,侵权必删！"></a>转载自阮一峰老师的个人blog,侵权必删！</h4><p><a href="http://www.ruanyifeng.com/road/2006/2006-02-18-history-process.html" target="_blank" rel="noopener">原文链接</a></p><p>　　小时候，政治课里经常说，事物发展有一个历史过程。当时只觉得是很普通的一句话，现在明白它的涵义了。</p><p>　　什么叫历史过程？就是无法避免的牺牲。<br><a id="more"></a><br>　　贵州某山区，漫山遍野的小冶炼作坊，青山绿水成了黑山污水。重金属离子渗入土地，癌症流行，儿童极易出现畸形和智力低下。但是无法关闭这些作坊，因为关了就没收入，所以当地人明知有毒也要干。近几年，有色金属价格暴涨，又不知有多少山河要被毁掉。可是没有办法，这叫历史过程。</p><p>　　小煤矿每年死这么多人，为什么降不下来？因为当地财政依赖采矿收入，政府根本下不了决心关；而矿工如果不去挖煤，就要沦落为流浪汉。这叫历史过程。</p><p>　　中华人民共和国建国后的发展，就是依靠强制低收入来实现国家资本积累。我们的父辈下乡、支内、进国有工厂，不就是用他们的一生为国家的原始积累做贡献嘛？他们的人生就这样被牺牲掉了。这叫历史过程。</p><p>　　一位英国历史学家说：“历史涉及的只是一个民族生活的极小部分。人民的大部分生活，过去和未来都不会有文字记载。”</p><p>　　历史过程无法避免，生命就这样无意义地牺牲和痛苦着。唯愿那些为历史做陪葬的人生不要被忘记。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;转载自阮一峰老师的个人blog-侵权必删！&quot;&gt;&lt;a href=&quot;#转载自阮一峰老师的个人blog-侵权必删！&quot; class=&quot;headerlink&quot; title=&quot;转载自阮一峰老师的个人blog,侵权必删！&quot;&gt;&lt;/a&gt;转载自阮一峰老师的个人blog,侵权必删！&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/road/2006/2006-02-18-history-process.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　小时候，政治课里经常说，事物发展有一个历史过程。当时只觉得是很普通的一句话，现在明白它的涵义了。&lt;/p&gt;
&lt;p&gt;　　什么叫历史过程？就是无法避免的牺牲。&lt;br&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://qiqim.github.io/tags/Article/"/>
    
  </entry>
  
  <entry>
    <title>php array</title>
    <link href="https://qiqim.github.io/2018/12/15/php-array/"/>
    <id>https://qiqim.github.io/2018/12/15/php-array/</id>
    <published>2018-12-15T17:32:01.000Z</published>
    <updated>2020-03-02T12:23:05.841Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-php中如何循环二维数组"><a href="#1-php中如何循环二维数组" class="headerlink" title="1.php中如何循环二维数组"></a>1.php中如何循环二维数组</h3><p>在php中，采用foreach循环来对二维索引数组进行遍历,下面的例子演示如何将三个关联数组，通过公有的key,在例子中是gid;组合成一个关联数组。<br><a id="more"></a></p><h4 id="a-初始化数据"><a href="#a-初始化数据" class="headerlink" title="a.初始化数据"></a>a.初始化数据</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">$paylist = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">'money'</span>=&gt; <span class="string">'100'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">1</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">'money'</span>=&gt; <span class="string">'200'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">2</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">4</span>,</span><br><span class="line">        <span class="string">'money'</span>=&gt; <span class="string">'300'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">3</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">6</span>,</span><br><span class="line">        <span class="string">'money'</span>=&gt; <span class="string">'400'</span></span><br><span class="line">    ),  </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$rolelist = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">'name'</span>=&gt; <span class="string">'xx1'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">1</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">2</span>,</span><br><span class="line">        <span class="string">'name'</span>=&gt; <span class="string">'xx2'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">2</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">4</span>,</span><br><span class="line">        <span class="string">'name'</span>=&gt; <span class="string">'xx4'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">3</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">6</span>,</span><br><span class="line">        <span class="string">'name'</span>=&gt; <span class="string">'xx6'</span></span><br><span class="line">    ),  </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$serverlist = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">'servername'</span>=&gt; <span class="string">'s1'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">1</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">2</span>,</span><br><span class="line">        <span class="string">'servername'</span>=&gt; <span class="string">'s2'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">2</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">4</span>,</span><br><span class="line">        <span class="string">'servername'</span>=&gt; <span class="string">'s4'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">3</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">6</span>,</span><br><span class="line">        <span class="string">'servername'</span>=&gt; <span class="string">'s4'</span></span><br><span class="line">    ),  </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$gsidarr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line"><span class="comment">//去重排序</span></span><br><span class="line">$gsidarr = array_unique($gsidarr);</span><br><span class="line">$gsidarr = array_values($gsidarr);</span><br></pre></td></tr></table></figure><h4 id="b-构造数据-将公有key提取出来作为key值索引"><a href="#b-构造数据-将公有key提取出来作为key值索引" class="headerlink" title="b.构造数据(将公有key提取出来作为key值索引)"></a>b.构造数据(将公有key提取出来作为key值索引)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$roleresult = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span>($rolelist <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">    $roleresult[$value[<span class="string">'gid'</span>]] = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;/br&gt;----'</span>.json_encode($roleresult).<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line"><span class="keyword">foreach</span>($roleresult <span class="keyword">as</span> $k=&gt;$v)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $v[<span class="string">'name'</span>].<span class="string">'==&gt;'</span>.$v[<span class="string">'gid'</span>].<span class="string">'--&lt;/br&gt;'</span>;  <span class="comment">//打印一下构造之后的数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造之后的数据roleresult</span></span><br><span class="line"><span class="comment">//&#123;"1":&#123;"gid":1,"name":"xx1"&#125;,"2":&#123;"gid":2,"name":"xx2"&#125;,"4":&#123;"gid":4,"name":"xx4"&#125;,"6":&#123;"gid":6,"name":"xx6"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">$serresult = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span>($serverlist <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">    $serresult[$value[<span class="string">'gid'</span>]] = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;/br&gt;----'</span>.json_encode($serresult).<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line"><span class="keyword">foreach</span>($serresult <span class="keyword">as</span> $k=&gt;$v)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $v[<span class="string">'servername'</span>].<span class="string">'==&gt;'</span>.$v[<span class="string">'gid'</span>].<span class="string">'--&lt;/br&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造之后的数据serverresult</span></span><br><span class="line"><span class="comment">// &#123;"1":&#123;"gid":1,"servername":"s1"&#125;,"2":&#123;"gid":2,"servername":"s2"&#125;,"4":&#123;"gid":4,"servername":"s4"&#125;,"6":&#123;"gid":6,"servername":"s4"&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="c-将构造好的数据组合起来-通过公有key来取roleresult和serverresult的value"><a href="#c-将构造好的数据组合起来-通过公有key来取roleresult和serverresult的value" class="headerlink" title="c.将构造好的数据组合起来(通过公有key来取roleresult和serverresult的value)"></a>c.将构造好的数据组合起来(通过公有key来取roleresult和serverresult的value)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ret = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span>($paylist <span class="keyword">as</span> $v)&#123;</span><br><span class="line">    $data = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'money'</span>=&gt;$v[<span class="string">'money'</span>],</span><br><span class="line">            <span class="string">'gid'</span>=&gt;$v[<span class="string">'gid'</span>],</span><br><span class="line">            <span class="string">'name'</span>=&gt;$roleresult[$v[<span class="string">'gid'</span>]][<span class="string">'name'</span>],</span><br><span class="line">            <span class="string">'servername'</span>=&gt;$serresult[$v[<span class="string">'gid'</span>]][<span class="string">'servername'</span>]</span><br><span class="line">        );</span><br><span class="line">        array_push($ret,$data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组装好之后的数据</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [&#123;"money":"100","gid":1,"name":"xx1","servername":"s1"&#125;,&#123;"money":"200", </span></span><br><span class="line"><span class="comment">    "gid":1,"name":"xx1","servername":"s1"&#125;,&#123;"money":"300","gid":4,</span></span><br><span class="line"><span class="comment">    "name":"xx4","servername":"s4"&#125;,&#123;"money":"400","gid":6,"name":"xx6",</span></span><br><span class="line"><span class="comment">    "servername":"s4"&#125;]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;/br&gt;----'</span>.json_encode($ret).<span class="string">'&lt;/br&gt;'</span>;</span><br></pre></td></tr></table></figure><h3 id="2-最后附一个在线测试代码的网站"><a href="#2-最后附一个在线测试代码的网站" class="headerlink" title="2.最后附一个在线测试代码的网站"></a>2.最后附一个在线测试代码的网站</h3><p><a href="https://www.dooccn.com/php/" target="_blank" rel="noopener">在线测试网站</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-php中如何循环二维数组&quot;&gt;&lt;a href=&quot;#1-php中如何循环二维数组&quot; class=&quot;headerlink&quot; title=&quot;1.php中如何循环二维数组&quot;&gt;&lt;/a&gt;1.php中如何循环二维数组&lt;/h3&gt;&lt;p&gt;在php中，采用foreach循环来对二维索引数组进行遍历,下面的例子演示如何将三个关联数组，通过公有的key,在例子中是gid;组合成一个关联数组。&lt;br&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://qiqim.github.io/tags/php/"/>
    
      <category term="array" scheme="https://qiqim.github.io/tags/array/"/>
    
  </entry>
  
</feed>
