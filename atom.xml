<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yato</title>
  <icon>https://www.gravatar.com/avatar/29384b2bbca537c47df8d6b751993e3b</icon>
  <subtitle>苟有恒,何必三更起五更眠; 最无益,莫过一日曝十日寒</subtitle>
  <link href="/QiqiM.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/QiqiM/"/>
  <updated>2020-08-09T05:24:32.368Z</updated>
  <id>https://github.com/QiqiM/</id>
  
  <author>
    <name>yato</name>
    <email>2602231824@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>再次理解事件循环（Event Loop）</title>
    <link href="https://github.com/QiqiM/2020/07/29/%E6%B7%B1%E5%85%A5js%E7%B3%BB%E5%88%97/%E5%86%8D%E6%AC%A1%E7%90%86%E8%A7%A3%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    <id>https://github.com/QiqiM/2020/07/29/深入js系列/再次理解事件循环/</id>
    <published>2020-07-29T07:58:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h4 id="1-事件循环"><a href="#1-事件循环" class="headerlink" title="1. 事件循环"></a>1. 事件循环</h4><p>JavaScript 是单线程运行，异步操作特别重要。</p><p>只要用到引擎之外的功能，就需要跟外部交互，从而形成异步操作。由于异步操作实在太多，JavaScript 不得不提供很多异步语法。这就好比，有些人老是受打击， 他的抗打击能力必须变得很强，否则他就完蛋了。</p><p>Node 的异步语法比浏览器更复杂，因为它可以跟内核对话，不得不搞了一个专门的库 libuv 做这件事。这个库负责各种回调函数的执行时间，毕竟异步任务最后还是要回到主线程，一个个排队执行。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img2020.cnblogs.com/blog/941070/202008/941070-20200809131830375-877655729.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure></p><p>为了协调异步任务，Node 居然提供了四个定时器，让任务可以在指定的时间运行。</p><ul><li>setTimeout()</li><li>setInterval()</li><li>setImmediate()</li><li>process.nextTick()</li></ul><p>前两个是语言的标准，`后两个是 Node 独有的。它们的写法差不多，作用也差不多，不太容易区别</p><h4 id="2-同步任务和异步任务"><a href="#2-同步任务和异步任务" class="headerlink" title="2.同步任务和异步任务"></a>2.同步任务和异步任务</h4><p>同步任务即正常业务代码，不含回调</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>));</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">3</span>));</span><br><span class="line"><span class="keyword">new</span> promise(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">5</span>));</span><br><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">6</span>))();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结果</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>同步任务总比异步任务任务先执行</p><p>上面代码中只有以下两行代码是同步代码，所有最先执行，输<code>4</code>，<code>6</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new Promise(()=&gt;&#123;</span><br><span class="line">    console.log(4)</span><br><span class="line">&#125;)</span><br><span class="line">Promise.resolve().then(() =&gt; console.log(5));</span><br><span class="line">(() =&gt; console.log(6))();</span><br></pre></td></tr></table></figure></p><p>异步任务可以分成两种：</p><ul><li>追加在本轮循环的异步任务</li><li>追加在次轮循环的异步任务</li></ul><p>循环指的是事件循环（EventLoop），本轮循环一定比次轮循环先执行</p><p>Node 规定，<code>process.nextTick</code>和<code>Promise</code>的回调函数，追加在本轮循环,同步任务执行结束完(优先级<code>process.nextTick&gt;promise.then()</code>)，即同步任务一旦执行完成，就开始执行它们。而<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>的回调函数，追加在次轮循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 下面两行，次轮循环执行</span><br><span class="line">setTimeout(() =&gt; console.log(1));</span><br><span class="line">setImmediate(() =&gt; console.log(2));</span><br><span class="line">// 下面两行，本轮循环执行</span><br><span class="line">process.nextTick(() =&gt; console.log(3));</span><br><span class="line">Promise.resolve().then(() =&gt; console.log(5));</span><br></pre></td></tr></table></figure><h4 id="3-process-nextTick"><a href="#3-process-nextTick" class="headerlink" title="3.process.nextTick()"></a>3.process.nextTick()</h4><p>虽然名字看起来像是次轮循环，实际上是追加在本次循环。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img2020.cnblogs.com/blog/941070/202008/941070-20200809131933956-222691691.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><p>Node执行完所有的同步任务后，就会立马执行<code>process.nextTick</code>的任务队列（nextTickQueue）,所以下面这行代码是第三个输出结果。基本上，如果你希望任务尽可能快的执行，那就使用<code>process.nextTick()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick(() =&gt; console.log(3));</span><br></pre></td></tr></table></figure><h4 id="4-微任务"><a href="#4-微任务" class="headerlink" title="4.微任务"></a>4.微任务</h4><p>根据语言规定，<code>Promise</code>对象的回调函数，会进入异步任务里面的“微任务队列”(microtask)。<br>微任务队列追加在<code>process.nextTick</code>队列后面。也属于本轮循环，所以以下代码总是先输出<code>3</code>在输出<code>5</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">3</span>));</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img2020.cnblogs.com/blog/941070/202008/941070-20200809132007353-1311265885.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><blockquote><p>注意:只有一个队列趣步清空了以后，才会执行下一个队列。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick(() =&gt; console.log(1));</span><br><span class="line">Promise.resolve().then(() =&gt; console.log(2));</span><br><span class="line">process.nextTick(() =&gt; console.log(3));</span><br><span class="line">Promise.resolve().then(() =&gt; console.log(4));</span><br><span class="line">// 1</span><br><span class="line">// 3</span><br><span class="line">// 2</span><br><span class="line">// 4</span><br></pre></td></tr></table></figure><p>上面代码中，全部<code>process.nextTick()</code>的回调函数，都会早于<code>Promise</code>的。</p><p>综上，本轮循环的执行顺序为</p><ul><li>1.同步任务</li><li>2.process.nextTick()</li><li>微任务</li></ul><h4 id="5-事件循环的概念"><a href="#5-事件循环的概念" class="headerlink" title="5.事件循环的概念"></a>5.事件循环的概念</h4><p>Node文档官方定义如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">When Node.js starts, it initializes the event loop, processes the provided input</span><br><span class="line"></span><br><span class="line">script which may make async API calls, schedule timers, or call process.nextTick(),</span><br><span class="line"></span><br><span class="line">then begins processing the event loop.</span><br><span class="line"></span><br><span class="line">当Node.js启动时，它将初始化事件循环，处理提供的输入脚本，该输入脚本可能进行</span><br><span class="line"></span><br><span class="line">异步API调用，调度计时器或调用process.nextTick（），然后开始处理事件循环。</span><br></pre></td></tr></table></figure><p>这段话很重重要，首先，有的人认为，除了主线程，还存在一个单独的事件循环线程。不是这样的，只有一个主线程，事件循环是在主线程上完成的。其次，Node开始执行脚本时，会先进行事件循环的初始化，但是此时事件循环还没有开始，会先完成以下工作</p><ul><li>同步任务</li><li>发出异步请求</li><li>规定定时器生效的时间</li><li>执行process.nextTick()等等</li></ul><p>最后，上面这些事情都干完了，事件循环就开始了。</p><h4 id="6-事件循环的六个阶段"><a href="#6-事件循环的六个阶段" class="headerlink" title="6.事件循环的六个阶段"></a>6.事件循环的六个阶段</h4><p>事件循环会无限次执行，一轮又一轮，只有异步任务的回调函数队列清空了，才会停止执行。<br>每一轮的事件循环都分成六个阶段，这些阶段会依次执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. timers</span><br><span class="line">2. I/O callbacks</span><br><span class="line">3. idle, prepare</span><br><span class="line">4. poll</span><br><span class="line">5. check</span><br><span class="line">6. close callbacks</span><br></pre></td></tr></table></figure><p>每一个阶段都有一个先进先出的回调函数队列，只有一个阶段的回调函数队列清空了，该执行的回调函数都执行了，事件循环才会进入下一个阶段。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img2020.cnblogs.com/blog/941070/202008/941070-20200809132040517-2027211188.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img2020.cnblogs.com/blog/941070/202008/941070-20200809132057643-114238386.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><p>下面简单介绍一下每个阶段的含义，详细介绍可以看<a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/" target="_blank" rel="noopener">官方文档</a>，也可以参考 <a href="https://jsblog.insiderattack.net/handling-io-nodejs-event-loop-part-4-418062f917d1" target="_blank" rel="noopener">libuv 的源码解读</a>。</p><h5 id="1-Timer"><a href="#1-Timer" class="headerlink" title="1. Timer"></a>1. Timer</h5><p>这个是定时器阶段，处理<code>setTimeOut()</code>和<code>setInterval()</code>的回调函数。进入这个阶段后，主线程会检查一下当前时间，是否满足定时器的条件。如果满足就执行回调函数，否则就离开这个阶段，进行下一阶段</p><h5 id="2-I-O-callbacks"><a href="#2-I-O-callbacks" class="headerlink" title="2. I/O callbacks"></a>2. I/O callbacks</h5><p>除了以下操作的的回调函数，其他回调函数都在这个阶段执行。</p><ul><li><code>setTimeOut()</code>和<code>setInterval()</code>的回调函数</li><li><code>setImmediate()</code>的回调函数</li><li>用于关闭请求的回调函数，比如<code>socket.on(&#39;close&#39;,...)</code></li></ul><h5 id="3-idle-prepare"><a href="#3-idle-prepare" class="headerlink" title="3. idle, prepare"></a>3. idle, prepare</h5><p>该阶段只供 libuv 内部调用，这里可以忽略。</p><h5 id="4-Poll"><a href="#4-Poll" class="headerlink" title="4. Poll"></a>4. Poll</h5><p>1）执行下限时间已经达到的timers的回调，</p><p>2）然后处理 poll 队列里的事件。<br>当event loop进入 poll 阶段，并且 没有设定的 timers（there are no timers scheduled），会发生下面两件事之一：</p><ul><li>如果 poll 队列不空，event loop会遍历队列并同步执行回调，直到队列清空或执行的回调数到达系统上限；</li><li>如果 poll 队列为空，则发生以下两件事之一：<ul><li>如果代码已经被setImmediate()设定了回调, event loop将结束 poll 阶段进入 check 阶段来执行 check 队列（里面的回调 callback）。<br>如果代码没有被setImmediate()设定回调，event loop将阻塞在该阶段等待回调被加入 poll 队列，并立即执行。</li><li>但是，当event loop进入 poll 阶段，并且 有设定的timers，一旦 poll 队列为空（poll 阶段空闲状态）：<br>event loop将检查timers,如果有1个或多个timers的下限时间已经到达，event loop将绕回 timers 阶段，并执行 timer 队列。</li></ul></li></ul><p><a href="https://juejin.im/post/5dd24ecce51d453fb903ff37" target="_blank" rel="noopener">快乐叮当</a></p><h5 id="5-check"><a href="#5-check" class="headerlink" title="5. check"></a>5. check</h5><p>该阶段执行setImmediate()的回调函数。</p><h5 id="6-close-callbacks"><a href="#6-close-callbacks" class="headerlink" title="6. close callbacks"></a>6. close callbacks</h5><p>该阶段执行关闭请求的回调函数，比如socket.on(‘close’, …)。</p><h4 id="7-事件循环的例子"><a href="#7-事件循环的例子" class="headerlink" title="7.事件循环的例子"></a>7.事件循环的例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeoutScheduled = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步任务一：100ms 后执行的定时器</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> delay = <span class="built_in">Date</span>.now() - timeoutScheduled;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;delay&#125;</span>ms`</span>);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步任务二：文件读取后，有一个 200ms 的回调函数</span></span><br><span class="line">fs.readFile(<span class="string">'map.js'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> startCallback = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`read time: <span class="subst">$&#123;startCallback -timeoutScheduled&#125;</span>ms`</span>)</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">Date</span>.now() - startCallback &lt; <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">// 什么也不做</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// read time: 2ms</span></span><br><span class="line"><span class="comment">// 202ms</span></span><br></pre></td></tr></table></figure><p>上面代码有两个异步任务，一个是 100ms 后执行的定时器，一个是文件读取，它的回调函数需要 200ms。请问运行结果是什么？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img2020.cnblogs.com/blog/941070/202008/941070-20200809132115611-794815830.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><p>脚本进入第一轮事件循环以后，没有到期的定时器，也没有已经可以执行的 I/O 回调函数，所以会进入 Poll 阶段，等待内核返回文件读取的结果。由于读取小文件一般不会超过 100ms，所以在定时器到期之前，Poll 阶段就会得到结果，因此就会继续往下执行。</p><p>第二轮事件循环，依然没有到期的定时器，但是已经有了可以执行的 I/O 回调函数，所以会进入 I/O callbacks 阶段，执行fs.readFile的回调函数。这个回调函数需要 200ms，也就是说，在它执行到一半的时候，100ms 的定时器就会到期。但是，必须等到这个回调函数执行完，才会离开这个阶段。</p><p>第三轮事件循环，已经有了到期的定时器，所以会在 timers 阶段执行定时器。最后输出结果大概是200多毫秒。</p><h4 id="8-setTimeout-和-setImmediate"><a href="#8-setTimeout-和-setImmediate" class="headerlink" title="8. setTimeout 和 setImmediate"></a>8. setTimeout 和 setImmediate</h4><p>由于<code>setTimeout</code>在 <code>timers</code> 阶段执行，而<code>setImmediate</code>在 <code>check</code> 阶段执行。所以，<code>setTimeout</code>会早于<code>setImmediate</code>完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; console.log(1));</span><br><span class="line">setImmediate(() =&gt; console.log(2));</span><br></pre></td></tr></table></figure><p>上面代码应该先输出 <code>1</code>，再输出<code>2</code>，但是实际执行的时候，结果却是<code>不确定</code>，有时还会先输出<code>2</code>，再输出<code>1</code>。</p><p>这是因为<code>setTimeou</code>t的第二个参数<code>默认为0</code>。但是实际上，Node 做不到0毫秒，<code>最少</code>也需要<code>1毫秒</code>，根据官方文档，第二个参数的取值范围在<code>1毫秒</code>到<code>2147483647毫秒</code>(2^31 -1)之间。也就是说，<code>setTimeout(f, 0)</code>等同于<code>setTimeout(f, 1)</code>。</p><p>实际执行的时候，进入事件循环以后，有可能到了1毫秒，也可能还没到1毫秒，取决于系统当时的状况。如果<code>没到1毫秒</code>，那么<code>timers 阶段就会跳过</code>，进入 <code>check 阶段</code>，<code>先执行setImmediate的回调函数</code>。</p><p>但是，下面的代码一定是先输出2，再输出1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.readFile(&apos;test.js&apos;, () =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; console.log(1));</span><br><span class="line">  setImmediate(() =&gt; console.log(2));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码会先进入<code>I/O callbacks 阶段</code>，然后是<code>check</code> 阶段，最后才是<code>timers</code> 阶段。因此，setImmediate才会早于setTimeout执行。</p><h4 id="9-部分面试题"><a href="#9-部分面试题" class="headerlink" title="9.部分面试题"></a>9.部分面试题</h4><ol><li>process.nextTick + setImmediate</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    setImmediate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 1 2 4</span></span><br></pre></td></tr></table></figure><p>2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">3</span>))</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">4</span>))</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 4 3 2</span></span><br></pre></td></tr></table></figure><p>这个是因为netxtTick任务见缝插针，每个阶段完成都会查询。promise.then只会每轮查询。</p><p>3<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>)</span><br><span class="line">    <span class="keyword">await</span> async2()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout0'</span>) </span><br><span class="line">&#125;,<span class="number">0</span>)  </span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout3'</span>) </span><br><span class="line">&#125;,<span class="number">3</span>)  </span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'setImmediate'</span>));</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'nextTick'</span>));</span><br><span class="line">async1();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">    resolve();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise3'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* script start</span></span><br><span class="line"><span class="comment">async1 start</span></span><br><span class="line"><span class="comment">async2</span></span><br><span class="line"><span class="comment">promise1</span></span><br><span class="line"><span class="comment">promise2</span></span><br><span class="line"><span class="comment">script end</span></span><br><span class="line"><span class="comment">nextTick</span></span><br><span class="line"><span class="comment">async1 end</span></span><br><span class="line"><span class="comment">promise3</span></span><br><span class="line"><span class="comment">setTimeout0</span></span><br><span class="line"><span class="comment">setTimeout3</span></span><br><span class="line"><span class="comment">setImmediate </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>4<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout0'</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'resolved'</span>) &#125;).</span><br><span class="line">        then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res));</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">'timeout resolved'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res));</span><br><span class="line">    process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'nextTick1'</span>);</span><br><span class="line">        process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'nextTick2'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'nextTick3'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'sync'</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'timeout2'</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*timeout0</span></span><br><span class="line"><span class="comment">sync</span></span><br><span class="line"><span class="comment">nextTick1</span></span><br><span class="line"><span class="comment">nextTick3</span></span><br><span class="line"><span class="comment">nextTick2</span></span><br><span class="line"><span class="comment">resolved</span></span><br><span class="line"><span class="comment">timeout resolved</span></span><br><span class="line"><span class="comment">timeout2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>5.process.nextTick()导致程序饿死<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNextTickRecurs</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (self.id === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        self.id = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (self.id === count) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`process.nextTick call <span class="subst">$&#123;++self.id&#125;</span>`</span>);</span><br><span class="line">        addNextTickRecurs.call(self, count);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addNextTickRecurs(<span class="literal">Infinity</span>);</span><br><span class="line">setTimeout(<span class="built_in">console</span>.log.bind(<span class="built_in">console</span>, <span class="string">'omg! setTimeout was called'</span>), <span class="number">10</span>);</span><br><span class="line">setImmediate(<span class="built_in">console</span>.log.bind(<span class="built_in">console</span>, <span class="string">'omg! setImmediate also was called'</span>));</span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'omg! file read complete callback was called!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'started'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">process.nextTick call 1</span></span><br><span class="line"><span class="comment">process.nextTick call 2</span></span><br><span class="line"><span class="comment">process.nextTick call 3</span></span><br><span class="line"><span class="comment">process.nextTick call 4</span></span><br><span class="line"><span class="comment">process.nextTick call 5</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><ol start="6"><li>process.nextTick()的nextTickQueue在每个阶段执行完都会检查执行一次,并且在nextTick里增加的nextTick会直接添加到nextTickQueue队列里</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'this is set immediate 1'</span>));</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'this is set immediate 2'</span>));</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'this is set immediate 3'</span>));</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'this is set timeout 1'</span>), <span class="number">0</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is set timeout 2'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'this is process.nextTick added inside setTimeout'</span>));</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'this is set timeout 3'</span>), <span class="number">0</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'this is set timeout 4'</span>), <span class="number">0</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'this is set timeout 5'</span>), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'this is process.nextTick 1'</span>));</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    process.nextTick(<span class="built_in">console</span>.log.bind(<span class="built_in">console</span>, <span class="string">'this is the inner next tick inside next tick'</span>));</span><br><span class="line">&#125;);</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'this is process.nextTick 2'</span>));</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'this is process.nextTick 3'</span>));</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'this is process.nextTick 4'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">this is process.nextTick 1</span></span><br><span class="line"><span class="comment">this is process.nextTick 2</span></span><br><span class="line"><span class="comment">this is process.nextTick 3</span></span><br><span class="line"><span class="comment">this is process.nextTick 4</span></span><br><span class="line"><span class="comment">this is the inner next tick inside next tick</span></span><br><span class="line"><span class="comment">this is set timeout 1</span></span><br><span class="line"><span class="comment">this is set timeout 2</span></span><br><span class="line"><span class="comment">this is process.nextTick added inside setTimeout</span></span><br><span class="line"><span class="comment">this is set timeout 3</span></span><br><span class="line"><span class="comment">this is set timeout 4</span></span><br><span class="line"><span class="comment">this is set timeout 5</span></span><br><span class="line"><span class="comment">this is set immediate 1</span></span><br><span class="line"><span class="comment">this is set immediate 2</span></span><br><span class="line"><span class="comment">this is set immediate 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>7.process.nextTick和Promise的回调函数</p><p><a href="https://blog.insiderattack.net/promises-next-ticks-and-immediates-nodejs-event-loop-part-3-9226cbe7a6aa" target="_blank" rel="noopener">原文解释</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'promise1 resolved'</span>));</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'promise2 resolved'</span>));</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise3 resolved'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'next tick inside promise resolve handler'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'promise4 resolved'</span>));</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'promise5 resolved'</span>));</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'set immediate1'</span>));</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'set immediate2'</span>));</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'next tick1'</span>));</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'next tick2'</span>));</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'next tick3'</span>));</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'set timeout'</span>), <span class="number">0</span>);</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'set immediate3'</span>));</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'set immediate4'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">next tick1</span></span><br><span class="line"><span class="comment">next tick2</span></span><br><span class="line"><span class="comment">next tick3</span></span><br><span class="line"><span class="comment">promise1 resolved</span></span><br><span class="line"><span class="comment">promise2 resolved</span></span><br><span class="line"><span class="comment">promise3 resolved</span></span><br><span class="line"><span class="comment">promise4 resolved</span></span><br><span class="line"><span class="comment">promise5 resolved</span></span><br><span class="line"><span class="comment">next tick inside promise resolve handler</span></span><br><span class="line"><span class="comment">set timeout</span></span><br><span class="line"><span class="comment">set immediate1</span></span><br><span class="line"><span class="comment">set immediate2</span></span><br><span class="line"><span class="comment">set immediate3</span></span><br><span class="line"><span class="comment">set immediate4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;h4 id=&quot;1-事件循环&quot;&gt;&lt;a href=&quot;#1-事件循环&quot; class=&quot;headerlink&quot; title=&quot;1. 事件循环&quot;&gt;&lt;/a&gt;1. 事件循环&lt;/h4&gt;&lt;p&gt;JavaScript 是单线程运行，异步操作特别重要。&lt;/p&gt;
&lt;p&gt;只要用到
      
    
    </summary>
    
      <category term="JS" scheme="https://github.com/QiqiM/categories/JS/"/>
    
    
      <category term="JS" scheme="https://github.com/QiqiM/tags/JS/"/>
    
      <category term="深入js系列" scheme="https://github.com/QiqiM/tags/%E6%B7%B1%E5%85%A5js%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="https://github.com/QiqiM/2020/07/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/07/12/设计模式/外观模式/</id>
    <published>2020-07-12T04:00:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="外观模式的定义"><a href="#外观模式的定义" class="headerlink" title="外观模式的定义"></a>外观模式的定义</h4><blockquote><p>要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。外观模式提供一个高层次的接口，使得子系统更易于使用。（简而言之就是提供一个统一的接口，用来 访问子系统的一群接口，从而让子系统更加容易使用）</p></blockquote><h4 id="使用场合"><a href="#使用场合" class="headerlink" title="使用场合"></a>使用场合</h4><ul><li>为一个复杂的模块或子系统提供一个外界访问的接口</li><li>子系统相对独立，外界对子系统的访问只要黑箱操作即可</li><li>维护一个大型遗留系统的时候，如果这个系统已经非常难以维护和扩展，此时可以考虑为新系统开发一个<code>Facade</code>类，来提供遗留系统的比较清晰简单的接口，让新系统与 <code>Facede 类</code>交互，提高复用性</li><li>当系统需要分层设计时，可以考虑使用<code>Facade</code> 模式</li></ul><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><blockquote><p>优点： 使复杂子系统的接口变的简单可用，减少了客户端对子系统的以来，达到解耦的效果；让子系统内部的模块更易维护和扩展；遵循迪米特法则，对内封装具体细节，对外只暴露必要的接口</p></blockquote><blockquote><p>缺点：不符合开闭原则，如果要修改某一个子系统的功能，通常外观类也要一起修改</p></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">subSystemA</span> </span>&#123;</span><br><span class="line">    doSonmeThing() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"sub system A operation"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">subSystemB</span> </span>&#123;</span><br><span class="line">    doSonmeThing() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"sub system B operation"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.subSystemA = <span class="keyword">new</span> subSystemA();</span><br><span class="line">        <span class="keyword">this</span>.subSystemB = <span class="keyword">new</span> subSystemB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    doSonmeThing() &#123;</span><br><span class="line">        <span class="keyword">this</span>.subSystemA.doSonmeThing();</span><br><span class="line">        <span class="keyword">this</span>.subSystemB.doSonmeThing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> facade = <span class="keyword">new</span> Facade();</span><br><span class="line">    facade.doSonmeThing();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br><span class="line"><span class="comment">// sub system A operation</span></span><br><span class="line"><span class="comment">// sub system B operation</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;外观模式的定义&quot;&gt;&lt;a href=&quot;#外观模式的定义&quot; class=&quot;headerlink&quot; title=&quot;外观模式的定义&quot;&gt;&lt;/a&gt;外观模式的定义&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。外观模式提供
      
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="结构型模式" scheme="https://github.com/QiqiM/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>组合模式</title>
    <link href="https://github.com/QiqiM/2020/07/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/07/12/设计模式/组合模式/</id>
    <published>2020-07-12T04:00:01.000Z</published>
    <updated>2020-08-09T05:24:32.372Z</updated>
    
    <content type="html"><![CDATA[<h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><h4 id="组合模式的定义"><a href="#组合模式的定义" class="headerlink" title="组合模式的定义"></a>组合模式的定义</h4><blockquote><p>也叫合成模式或部分-整体模式，主要用来描述部分和整体的关系，将对象组合成树形结构以表示”部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</p></blockquote><h4 id="使用场合"><a href="#使用场合" class="headerlink" title="使用场合"></a>使用场合</h4><blockquote><p>维护和展示部分-整体关系的场景，如树形菜单、文件和文件夹管理</p></blockquote><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><blockquote><p>优点： 调用简单，只需要面对一致的对象而不用考虑整体部分或者叶子节点的问题；扩展性强，一方面，当更改组合对象的时候，只需要调整内部的层次关系，用户不用做出任何改动，另一方面，容易增加节点，只要找到他的父节点即可</p></blockquote><blockquote><p>缺点： 要求较高的抽象性，如果节点和叶子节点有很多差异的话（比如很多方法和属性不一样），不适合使用组合模式。</p></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(component) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    remove(component) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    getChildren() &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构件容器</span></span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.componentList = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    doOperation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`这是容器<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>，处理一些逻辑业务！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(component) &#123;</span><br><span class="line">        <span class="keyword">this</span>.componentList.push(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove(component) &#123;</span><br><span class="line">        <span class="keyword">const</span> componentIndex = <span class="keyword">this</span>.componentList.findIndex(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value == component;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.componentList.splice(componentIndex, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getChildren() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.componentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    doOperation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`这是叶子节点<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>，处理一些逻辑业务！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> root = <span class="keyword">new</span> Composite(<span class="string">"root"</span>);</span><br><span class="line">    <span class="keyword">const</span> node1 = <span class="keyword">new</span> Leaf(<span class="string">"1"</span>);</span><br><span class="line">    <span class="keyword">const</span> node2 = <span class="keyword">new</span> Composite(<span class="string">"2"</span>);</span><br><span class="line">    <span class="keyword">const</span> node3 = <span class="keyword">new</span> Leaf(<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">    root.add(node1);</span><br><span class="line">    root.add(node2);</span><br><span class="line">    root.add(node3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> node2_1 = <span class="keyword">new</span> Leaf(<span class="string">"2_1"</span>);</span><br><span class="line">    node2.add(node2_1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> children1 = root.getChildren();</span><br><span class="line">    <span class="built_in">console</span>.log(children1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"============================="</span>);</span><br><span class="line"></span><br><span class="line">    root.remove(node2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> children2 = root.getChildren();</span><br><span class="line">    <span class="built_in">console</span>.log(children2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ Leaf &#123; name: '1' &#125;,</span></span><br><span class="line"><span class="comment">//   Composite &#123; name: '2', componentList: [ [Leaf] ] &#125;,</span></span><br><span class="line"><span class="comment">//   Leaf &#123; name: '3' &#125; ]</span></span><br><span class="line"><span class="comment">// =============================</span></span><br><span class="line"><span class="comment">// [ Leaf &#123; name: '1' &#125;, Leaf &#123; name: '3' &#125; ]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;#组合模式&quot; class=&quot;headerlink&quot; title=&quot;组合模式&quot;&gt;&lt;/a&gt;组合模式&lt;/h4&gt;&lt;h4 id=&quot;组合模式的定义&quot;&gt;&lt;a href=&quot;#组合模式的定义&quot; class=&quot;headerlink&quot; title=&quot;组合模
      
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="结构型模式" scheme="https://github.com/QiqiM/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="https://github.com/QiqiM/2020/07/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/07/11/设计模式/适配器模式/</id>
    <published>2020-07-11T10:18:01.000Z</published>
    <updated>2020-08-09T05:24:32.372Z</updated>
    
    <content type="html"><![CDATA[<h4 id="适配器模式的定义"><a href="#适配器模式的定义" class="headerlink" title="适配器模式的定义"></a>适配器模式的定义</h4><blockquote><p>将一个类的接口变换为客户端所期待的另一种接口，从而使原本因为接口不匹配而无法在一起工作的两个类能够在一起工作</p></blockquote><h4 id="使用场合"><a href="#使用场合" class="headerlink" title="使用场合"></a>使用场合</h4><ul><li>整合第三方SDK</li><li>封装旧接口</li><li>类适配器和对象适配器：接口不符合规范，通过适配后变成符合规范的接口进行使用</li><li>接口适配器：适用于一个接口不想使用其所有的方法的情况</li></ul><a id="more"></a><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><blockquote><p>优点： 让两个没关系类可以一起运行；提高类的复用性（源角色在原有系统里还可以使用）</p></blockquote><blockquote><p>缺点： 额外对象的创建，非直接调用，存在一定的开销； 不支持多重继承的语言一次只能适配一个适配者类，而且目标抽象类只能为接口，有一定的局限性；被适配者类的方法在Adapter中都会暴露出来</p></blockquote><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><ul><li>Target: 目标角色，定义把其他类转换为何种接口</li><li>Adaptee: 被适配者，就是源角色</li><li>Adapter: 适配器，负责将Adaptee的接口转换为Target的接口</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标对象,接口或者抽象类 , 定义客户端调用的统一接口，</span></span><br><span class="line"><span class="comment">// 适配器中需要实现抽象方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span>.target === User) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象类不能实例化!'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request() &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被适配者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    specificRequest() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Adaptee request !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承并实现接口的 request方法  （implements Target）</span></span><br><span class="line"><span class="comment">// TS 才有implements，暂时直接在适配器中实现目标类的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request() &#123;</span><br><span class="line">        <span class="keyword">super</span>.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> target = <span class="keyword">new</span> Adapter();</span><br><span class="line">target.request();   <span class="comment">// Adaptee request !</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;适配器模式的定义&quot;&gt;&lt;a href=&quot;#适配器模式的定义&quot; class=&quot;headerlink&quot; title=&quot;适配器模式的定义&quot;&gt;&lt;/a&gt;适配器模式的定义&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;将一个类的接口变换为客户端所期待的另一种接口，从而使原本因为接口不匹配而无法在一起工作的两个类能够在一起工作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用场合&quot;&gt;&lt;a href=&quot;#使用场合&quot; class=&quot;headerlink&quot; title=&quot;使用场合&quot;&gt;&lt;/a&gt;使用场合&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;整合第三方SDK&lt;/li&gt;
&lt;li&gt;封装旧接口&lt;/li&gt;
&lt;li&gt;类适配器和对象适配器：接口不符合规范，通过适配后变成符合规范的接口进行使用&lt;/li&gt;
&lt;li&gt;接口适配器：适用于一个接口不想使用其所有的方法的情况&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="结构型模式" scheme="https://github.com/QiqiM/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="https://github.com/QiqiM/2020/07/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/07/11/设计模式/桥接模式/</id>
    <published>2020-07-11T09:00:01.000Z</published>
    <updated>2020-08-09T05:24:32.372Z</updated>
    
    <content type="html"><![CDATA[<h4 id="桥接模式的定义"><a href="#桥接模式的定义" class="headerlink" title="桥接模式的定义"></a>桥接模式的定义</h4><blockquote><p>桥接模式（Bridge）将抽象部分与它的实现部分分离，使他们都可以独立变化。</p></blockquote><h4 id="使用场合"><a href="#使用场合" class="headerlink" title="使用场合"></a>使用场合</h4><blockquote><p>不希望使用继承或者因为多继承导致类爆炸的系统；</p></blockquote><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><blockquote><p>优点： 实现了抽象与实现部分的分离，提高了系统的灵活性；替代了多层继承方案，减少了子类的个数</p></blockquote><blockquote><p>缺点： 增加了系统的复杂度；要求正确识别出系统中两个独立变化的维度，适用范围有一定的局限性</p></blockquote><a id="more"></a><h4 id="桥接模式主要有4个角色组成："><a href="#桥接模式主要有4个角色组成：" class="headerlink" title="桥接模式主要有4个角色组成："></a>桥接模式主要有4个角色组成：</h4><ul><li>抽象类</li><li>扩充抽象类</li><li>实现类接口</li><li><p>具体实现类</p><blockquote><p>根据javascript语言的特点，我们将其简化成2个角色：</p></blockquote></li><li><p>扩充抽象类</p></li><li>具体实现类</li></ul><h4 id="最简单的桥接模式"><a href="#最简单的桥接模式" class="headerlink" title="最简单的桥接模式"></a>最简单的桥接模式</h4><p>其实我们最经常用的jQuery的each函数就是一个典型的桥接模式，我们模拟其实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span> (<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> val = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (fn.call(val, i, val, arr)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">each(arr, <span class="function"><span class="keyword">function</span> (<span class="params">i, v</span>) </span>&#123;</span><br><span class="line">    arr[i] = v * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在这个例子中，我们通过函数循环了arr数组。在这个例子中，抽象部分是<code>each()</code>函数，也就是上面的扩充抽象类，实现部分就是<code>function(i,v){}</code>,即具体实现类。抽象部分和实现部分可以独立的进行变化。这个例子虽然简单，但是一个典型的桥接模式的应用。</p><h4 id="插件开发中的桥接模式"><a href="#插件开发中的桥接模式" class="headerlink" title="插件开发中的桥接模式"></a>插件开发中的桥接模式</h4><p>桥接模式的一个使用场景是组件开发，我们平时开发组件为了适应不同场合，组件相应的会有许多不同维度的变化。桥接模式就可以应用于此，将抽象与实现分离，是组件的扩展性更高。假设我们要开发一个弹窗插件，弹窗有不同的类型:普通消息提醒，错误提醒，每一种提醒的展示方式还都不一样。这是一个典型的多维度变化的场景。首先我们定义两个类:普通消息弹窗和错误消息弹窗</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(animation) &#123;</span><br><span class="line">        <span class="keyword">this</span>.animation = animation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="keyword">this</span>.animation.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageDialog</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(animation) &#123;</span><br><span class="line">        <span class="keyword">super</span>(animation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorDialog</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(animation) &#123;</span><br><span class="line">        <span class="keyword">super</span>(animation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个类就是前面提到的抽象部分，也就是扩充抽象类，他们都包含一个成员animation。两种弹窗通过show方法进行展示，但是显示的动画效果不同。我们定义两种效果类如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineAnimation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"it is liner"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EaseAnimation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"it is ease"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这两个类就是具体实现类，它们实现具体的显示效果。使用方式如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="keyword">new</span> MessageDialog(<span class="keyword">new</span> LineAnimation());</span><br><span class="line">message.show();</span><br><span class="line"><span class="keyword">let</span> errorMsg = <span class="keyword">new</span> ErrorDialog(<span class="keyword">new</span> EaseAnimation());</span><br><span class="line">errorMsg.show();</span><br></pre></td></tr></table></figure></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>学习桥接模式关键是要理解抽象部分与实现部分的分离，使得二者可以独立的变化，而不必拘泥于形式。JS插件灵活的变化，适应场景的多变就非常适合这种模式来实现。使用桥接模式最重要的是找出系统中的不同的变化维度。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;桥接模式的定义&quot;&gt;&lt;a href=&quot;#桥接模式的定义&quot; class=&quot;headerlink&quot; title=&quot;桥接模式的定义&quot;&gt;&lt;/a&gt;桥接模式的定义&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;桥接模式（Bridge）将抽象部分与它的实现部分分离，使他们都可以独立变化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用场合&quot;&gt;&lt;a href=&quot;#使用场合&quot; class=&quot;headerlink&quot; title=&quot;使用场合&quot;&gt;&lt;/a&gt;使用场合&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;不希望使用继承或者因为多继承导致类爆炸的系统；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;优缺点&quot;&gt;&lt;a href=&quot;#优缺点&quot; class=&quot;headerlink&quot; title=&quot;优缺点&quot;&gt;&lt;/a&gt;优缺点&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;优点： 实现了抽象与实现部分的分离，提高了系统的灵活性；替代了多层继承方案，减少了子类的个数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;缺点： 增加了系统的复杂度；要求正确识别出系统中两个独立变化的维度，适用范围有一定的局限性&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="结构型模式" scheme="https://github.com/QiqiM/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>职责链模式</title>
    <link href="https://github.com/QiqiM/2020/07/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/07/08/设计模式/职责链模式/</id>
    <published>2020-07-08T08:18:11.000Z</published>
    <updated>2020-08-09T05:24:32.372Z</updated>
    
    <content type="html"><![CDATA[<h4 id="职责链模式的定义"><a href="#职责链模式的定义" class="headerlink" title="职责链模式的定义"></a>职责链模式的定义</h4><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><h4 id="简单职责链模式"><a href="#简单职责链模式" class="headerlink" title="简单职责链模式"></a>简单职责链模式</h4><p>故事背景：用户可以支付定金购买手机，并且可以获得优惠券。没有支付定金的就是普通用户，进入普通购买模式，没有优惠券，且库存不足的情况下不一定能够买到手机。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param orderType 订单类型</span></span><br><span class="line"><span class="comment"> * @param pay   用户是否已经支付过定金 true or false</span></span><br><span class="line"><span class="comment"> * @param stock 表示手机的库存量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> order = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pay === <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'500定金预购,得到100元优惠券'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'普通购买,没有优惠券'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'手机库存不足'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (orderType === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pay === <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'200定金预购,得到50元优惠券'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'普通购买,没有优惠券'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'手机库存不足'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (orderType === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'普通购买,没有优惠券'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'手机库存不足'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="职责链重构上面的代码"><a href="#职责链重构上面的代码" class="headerlink" title="职责链重构上面的代码"></a>职责链重构上面的代码</h4><blockquote><p>主要通过拆分功能语句，来使用职责链重构:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//500元订单</span></span><br><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'500定金预购,得到100元优惠券'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        order200(orderType, pay, stock);  <span class="comment">//将请求传递给200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//200元订单</span></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'200定金预购,得到50元优惠券'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        order(orderType, pay, stock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通购买订单</span></span><br><span class="line"><span class="keyword">var</span> order = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stock&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'普通购买,没有优惠券'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'手机库存不足'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试调用</span></span><br><span class="line">order500(<span class="number">1</span>,<span class="literal">true</span>,<span class="number">500</span>);</span><br><span class="line">order500(<span class="number">3</span>,<span class="literal">false</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>总结：上面的代码违反了开放-封闭的原则，请求在链条中传递的顺序非常僵硬，传递请求的代码被耦合在了业务函数中：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'500定金预购,得到100元优惠券'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        order200(orderType, pay, stock);  <span class="comment">//将请求传递给200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="灵活的拆分职责链节点"><a href="#灵活的拆分职责链节点" class="headerlink" title="灵活的拆分职责链节点"></a>灵活的拆分职责链节点</h5><p>为什么要拆分职责链的节点，因为某天需要添加新的职责，就需要修改业务代码（要修改的话，就需要先去了解他，熟悉它，花费大量的时间）。这显然不是每一个人所需要的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//500元订单</span></span><br><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'500定金预购,得到100元优惠券'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//200元订单</span></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'200定金预购,得到50元优惠券'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通购买订单</span></span><br><span class="line"><span class="keyword">var</span> order = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stock&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'普通购买,没有优惠券'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'手机库存不足'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Chain=<span class="function"><span class="keyword">function</span> (<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.fn=fn;</span><br><span class="line">    <span class="keyword">this</span>.successor=<span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Chain.prototype.setNextSuccessor=<span class="function"><span class="keyword">function</span> (<span class="params">successor</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.successor=successor;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Chain.prototype.passRequest=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret= <span class="keyword">this</span>.fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret===<span class="string">'nextSuccessor'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.successor &amp;&amp; <span class="keyword">this</span>.successor.passRequest.apply(<span class="keyword">this</span>.successor,<span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chainOrder500=<span class="keyword">new</span> Chain(order500);</span><br><span class="line"><span class="keyword">var</span> chainOrder200=<span class="keyword">new</span> Chain(order200);</span><br><span class="line"><span class="keyword">var</span> chainOrderNormal=<span class="keyword">new</span> Chain(order);</span><br><span class="line"></span><br><span class="line">chainOrder500.setNextSuccessor(chainOrder200);</span><br><span class="line">chainOrder200.setNextSuccessor(chainOrderNormal);</span><br><span class="line"></span><br><span class="line">chainOrder500.passRequest(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>);  <span class="comment">// 500定金预购,得到100元优惠券</span></span><br><span class="line">chainOrder500.passRequest(<span class="number">2</span>, <span class="literal">true</span>, <span class="number">500</span>);  <span class="comment">// 200定金预购,得到50元优惠券</span></span><br><span class="line">chainOrder500.passRequest(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">0</span>);   <span class="comment">// 手机库存不足</span></span><br></pre></td></tr></table></figure><p>加入某天网站添加了300元定金购买的职责，我只需要添加特定的节点就可以了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//300元订单</span></span><br><span class="line"><span class="keyword">var</span> order300=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chainOrder300=<span class="keyword">new</span> Chain(order300());</span><br><span class="line">chainOrder500.setNextSuccessor(chainOrder300);</span><br><span class="line">chainOrder300.setNextSuccessor(chainOrder200);</span><br></pre></td></tr></table></figure></p><p>这样的话只需要编写简单的功能函数，改变职责链中的相关节点的顺序即可。</p><h5 id="异步职责链"><a href="#异步职责链" class="headerlink" title="异步职责链"></a>异步职责链</h5><p>上面的职责链代码中，每个节点函数同步返回一个特定的值nextSuccessor，来表示是否把请求传递给下一个节点。而现实开发中会遇到一些异步的问题，比如在一个节点中发起一个ajax异步请求，异步请求的结果才能决定是否继续在职责链中passRequest。</p><p>可以给Chain类添加一个原型方法Chain.prototype.next，表示手动传递请求给职责链中的下一个节点：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Chain.prototype.next=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.successor &amp;&amp; <span class="keyword">this</span>.successor.passRequest.apply(<span class="keyword">this</span>.successor,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//异步职责链的例子</span></span><br><span class="line"><span class="keyword">var</span> fn1=<span class="keyword">new</span> Chain(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn2=<span class="keyword">new</span> Chain(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> self=<span class="keyword">this</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        self.next();</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn3=<span class="keyword">new</span> Chain(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fn1.setNextSuccessor(fn2).setNextSuccessor(fn3);</span><br><span class="line">fn1.passRequest();</span><br></pre></td></tr></table></figure></p><h4 id="职责链模式的优缺点："><a href="#职责链模式的优缺点：" class="headerlink" title="职责链模式的优缺点："></a>职责链模式的优缺点：</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li>职责链最大的优点就是解耦了请求发送者和N个接收者之间的复杂关系。</li><li>职责链可以手动指定起始节点，请求并不是非得从链中的第一个节点开始传递。</li></ul><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>不能保证某个请求一定会被链中的节点处理，这种情况可以在链尾增加一个保底的接受者节点来处理这种即将离开链尾的请求。</li><li>使程序中多了很多节点对象，可能再一次请求的过程中，大部分的节点并没有起到实质性的作用。他们的作用仅仅是让请求传递下去，从性能当面考虑，要避免过长的职责链到来的性能损耗。<h4 id="使用AOP（面向切面编程）来快速的创建职责链"><a href="#使用AOP（面向切面编程）来快速的创建职责链" class="headerlink" title="使用AOP（面向切面编程）来快速的创建职责链"></a>使用AOP（面向切面编程）来快速的创建职责链</h4>AOP的具体概念可以参考装饰者模式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret === <span class="string">'nextSuccessor'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderAop = order500.after(order200).after(order);</span><br><span class="line"></span><br><span class="line">orderAop(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>);   <span class="comment">// 500定金预购,得到100元优惠券</span></span><br><span class="line">orderAop(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">500</span>);  <span class="comment">// 普通购买,没有优惠券</span></span><br></pre></td></tr></table></figure></li></ul><p>AOP实现职责链简单又巧妙，但这种把函数叠在一起的方式，同时也叠加了函数的作用域，如果链条太长的话，也会对性能造成太大的影响。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>职责链模式最大的优点：请求发送者只需要知道链中的第一个节点，从而弱化了发送者和一组接收者之前的强联系。</p><p>在JavaScript开发中，职责链模式是最容易被忽视的模式之一。但是只要运用得当，职责链模式可以很好的帮助我们管理代码，降低发起请求的对象和处理请求的对象之间的耦合性。且职责链中节点的数量和数序是可以自由变化的。可以在运行时决定链中包含哪些节点。</p><p>无论是作用域链，原型链，还是DOM节点中的事件冒泡，我们都能从中找到职责链模式的影子。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;职责链模式的定义&quot;&gt;&lt;a href=&quot;#职责链模式的定义&quot; class=&quot;headerlink&quot; title=&quot;职责链模式的定义&quot;&gt;&lt;/a&gt;职责链模式的定义&lt;/h4&gt;&lt;p&gt;使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链
      
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="行为型模式" scheme="https://github.com/QiqiM/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>装饰者模式</title>
    <link href="https://github.com/QiqiM/2020/07/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/07/08/设计模式/装饰者模式/</id>
    <published>2020-07-08T07:00:01.000Z</published>
    <updated>2020-08-09T05:24:32.372Z</updated>
    
    <content type="html"><![CDATA[<h4 id="装饰者模式的定义"><a href="#装饰者模式的定义" class="headerlink" title="装饰者模式的定义"></a>装饰者模式的定义</h4><blockquote><p>装饰者模式是指动态的将功能附加到对象上。在对象功能扩展上更为方便，是继承一种替代方案</p></blockquote><blockquote><p>优点：装饰类和被装饰类都只关心自身的核心业务，实现了解耦；方便动态的扩展功能，且提供了比继承更多的灵活性</p></blockquote><blockquote><p>缺点：多层装饰比较复杂；常常会引入许多小对象，看起来比较相似，实际上功能大相径庭。使得应用程序架构边得复杂</p></blockquote><h4 id="传统语言的装饰者模式"><a href="#传统语言的装饰者模式" class="headerlink" title="传统语言的装饰者模式"></a>传统语言的装饰者模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟传统语言的装饰者</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//原始的飞机类</span></span><br><span class="line"><span class="keyword">var</span> Plan = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Plan.prototype.fire = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'发射普通子弹'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰类</span></span><br><span class="line"><span class="keyword">var</span> MissileDecorator = <span class="function"><span class="keyword">function</span> (<span class="params">plan</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.plan = plan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MissileDecorator.prototype.fire = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.plan.fire();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'发射导弹!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plan = <span class="keyword">new</span> Plan();</span><br><span class="line">plan = <span class="keyword">new</span> MissileDecorator(plan);</span><br><span class="line">plan.fire();</span><br><span class="line"><span class="comment">// 发射普通子弹</span></span><br><span class="line"><span class="comment">// 发射导弹!</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript中的装饰者模式"><a href="#JavaScript中的装饰者模式" class="headerlink" title="JavaScript中的装饰者模式"></a>JavaScript中的装饰者模式</h4><blockquote><p>装饰者模式将一个对象嵌入到另一个对象之中，实际上相当于这个对象被另一个对像包装起来，形成一条包装链。请求随着这条包装链依次传递到所有的对象，每个对象都有处理这条请求的机会。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Plan1 = &#123;</span><br><span class="line">    fire: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'发射普通的子弹'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> missileDecorator= <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'发射导弹!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fire = Plan1.fire;</span><br><span class="line"></span><br><span class="line">Plan1.fire=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    fire();</span><br><span class="line">    missileDecorator();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Plan1.fire();</span><br></pre></td></tr></table></figure><h4 id="函数功能扩展"><a href="#函数功能扩展" class="headerlink" title="函数功能扩展"></a>函数功能扩展</h4><blockquote><p>在JavaScript中，很容易给对象扩展属性与方法但是却不容易给函数扩展额外功能，除非改函数源码但是改写函数违反了开放-封闭原则</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改为</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);<span class="comment">//增</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个常用的方法就是缓存函数引用，改写函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改为</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> _foo = foo;</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    _foo();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是这样写还是存在问题要维护额外的中间变量<code>（_foo）</code>，如果装饰链过长，中间变量就会越来越多可能会<code>存在this被劫持问题</code>,关于this劫持问题，看下面的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getId = <span class="built_in">document</span>.getElementById;</span><br><span class="line"><span class="built_in">document</span>.getElementById = <span class="function"><span class="keyword">function</span>(<span class="params">ID</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> getId(ID);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span><br></pre></td></tr></table></figure></p><p>因为使用 <code>document.getElementById</code> 的时候内部有<code>this</code>引用，而这个<code>this</code>期望指向的是<code>document</code>但是 <code>getId</code> 在获取了 <code>document.getElementById</code>引用后<code>this</code>就指向了<code>window</code>，导致抛出错误。<br>为了让this正确指向document我们可以做出修改:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getId = <span class="built_in">document</span>.getElementById;</span><br><span class="line"><span class="built_in">document</span>.getElementById = <span class="function"><span class="keyword">function</span>(<span class="params">ID</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> getId.call(<span class="built_in">document</span>, ID);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="AOP装饰函数"><a href="#AOP装饰函数" class="headerlink" title="AOP装饰函数"></a>AOP装饰函数</h4><blockquote><p>AOP（Aspect Oriented Programming） 面向切面编程；把一些和核心业务逻辑无关的功能抽离出来，再通过动态织入的方式掺入业务逻辑模块。</p></blockquote><p>与业务逻辑无关的功能通常包括日志统计、安全控制、异常处理等等好处也很明显，保证了核心业务模块的纯净与高内聚性而且其他的功能模块也可以很好的复用。<br>首先，我们要实现两个函数一个用来前置装饰，一个用来后置装饰:</p><ul><li><p>直接在Function上做修改，会污染原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">beforeFunc</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//保存旧函数的引用</span></span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;                     </span><br><span class="line">    <span class="comment">//返回包含旧函数和新函数的“代理”函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">        <span class="comment">//执行新函数,且保证this不被劫持,新函数接受的参数                   </span></span><br><span class="line">        beforeFunc.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); </span><br><span class="line">        <span class="comment">// 也会被原封不动的传入旧函数,新函数在旧函数之前执行</span></span><br><span class="line">        <span class="keyword">return</span> self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">afterFunc</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        afterFunc.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcPro</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'test'</span>) &#125;</span><br><span class="line">funcPro = funcPro.before(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"before"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">funcPro();</span><br><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="comment">// test</span></span><br></pre></td></tr></table></figure></li><li><p>不污染原型的做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> before=<span class="function"><span class="keyword">function</span> (<span class="params">fn, before</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        before.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'1'</span>)&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'2'</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=before(func1,func2);</span><br><span class="line"></span><br><span class="line">a(); </span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="es7装饰器实现"><a href="#es7装饰器实现" class="headerlink" title="es7装饰器实现"></a>es7装饰器实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autopilotDecorator</span>(<span class="params">target, key, descriptor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> method = descriptor.value;</span><br><span class="line">    </span><br><span class="line">    descriptor.value = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        method.apply(target);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'启动自动驾驶模式'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    @autopilotDecorator</span><br><span class="line">    drive() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'乞丐版'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> Car();</span><br><span class="line">car.drive();    </span><br><span class="line"><span class="comment">//乞丐版</span></span><br><span class="line"><span class="comment">//启动自动驾驶模式</span></span><br></pre></td></tr></table></figure><p><code>decorator</code>的实现依赖于ES5的<code>Object.defineProperty</code>方法。<code>defineProperty</code>所做的事情是为一个对象增加新的属性，或者更改某个已存在的属性。调用方式是<code>Object.defineProperty(obj, prop, descriptor)</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;; <span class="comment">// 创建一个新对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在对象中添加一个属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"name"</span>, &#123;</span><br><span class="line">  value : <span class="string">"Dickens"</span>,</span><br><span class="line">  writable : <span class="literal">true</span>,</span><br><span class="line">  enumerable : <span class="literal">true</span>,</span><br><span class="line">  configurable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在对象中添加一个方法</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"sayHello"</span>, &#123;</span><br><span class="line">  value : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello, my name is: '</span>, <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line">  writable : <span class="literal">true</span>,</span><br><span class="line">  enumerable : <span class="literal">true</span>,</span><br><span class="line">  configurable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">o.sayHello()    <span class="comment">//Hello, my name is:  Dickens</span></span><br></pre></td></tr></table></figure><h4 id="装饰者模式和代理模式的区别："><a href="#装饰者模式和代理模式的区别：" class="headerlink" title="装饰者模式和代理模式的区别："></a>装饰者模式和代理模式的区别：</h4><blockquote><p>代理模式的目的是，当直接访问本体不方便或者不符合需要时，为这个本体提供一个代替者。本体定义了关键功能，而代理提供了或者拒绝对他的访问，或者是在访问本体之前做一些额外的事情。<br>装饰者模式的作用就是为对象动态的加入某些行为。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;装饰者模式的定义&quot;&gt;&lt;a href=&quot;#装饰者模式的定义&quot; class=&quot;headerlink&quot; title=&quot;装饰者模式的定义&quot;&gt;&lt;/a&gt;装饰者模式的定义&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;装饰者模式是指动态的将功能附加到对象上。在对象功能扩展上更为方便，
      
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="结构型模式" scheme="https://github.com/QiqiM/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>命令模式</title>
    <link href="https://github.com/QiqiM/2020/07/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/07/08/设计模式/命令模式/</id>
    <published>2020-07-08T03:18:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-命令模式的定义"><a href="#1-命令模式的定义" class="headerlink" title="1.命令模式的定义"></a>1.命令模式的定义</h5><blockquote><p>命令模式的目标是将方法的调用，请求或者操作封装到一个单独的对象中，给我们酌情执行同时参数化和传递方法调用的能力</p></blockquote><h5 id="2-使用场合"><a href="#2-使用场合" class="headerlink" title="2.使用场合"></a>2.使用场合</h5><blockquote><p>有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。</p></blockquote><a id="more"></a><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul><li>es6实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">carManager</span></span>&#123;</span><br><span class="line"><span class="comment">// request information</span></span><br><span class="line">requestInfo(model, id) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"The information for "</span> + model + <span class="string">" with ID "</span> + id + <span class="string">" is foobar"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// purchase the car</span></span><br><span class="line">buyVehicle(model, id) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"You have successfully purchased Item "</span> + id + <span class="string">", a "</span> + model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arrange a viewing</span></span><br><span class="line">arrangeViewing(model, id) &#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"You have successfully booked a viewing of "</span> + model + <span class="string">" ( "</span> + id + <span class="string">" ) "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">execute(name)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>[name] &amp;&amp; <span class="keyword">this</span>[name].apply(<span class="keyword">this</span>, [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> carManager();</span><br><span class="line"><span class="comment">// 调用命令</span></span><br><span class="line">car.execute(<span class="string">"arrangeViewing"</span>, <span class="string">"Ferrari"</span>, <span class="string">"14523"</span>);  </span><br><span class="line">car.execute(<span class="string">"requestInfo"</span>, <span class="string">"Ford Mondeo"</span>, <span class="string">"54323"</span>); </span><br><span class="line">car.execute(<span class="string">"requestInfo"</span>, <span class="string">"Ford Escort"</span>, <span class="string">"34232"</span>);</span><br><span class="line">car.execute(<span class="string">"buyVehicle"</span>, <span class="string">"Ford Escort"</span>, <span class="string">"34232"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// You have successfully booked a viewing of Ferrari ( 14523 )</span></span><br><span class="line"><span class="comment">// The information for Ford Mondeo with ID 54323 is foobar</span></span><br><span class="line"><span class="comment">// The information for Ford Escort with ID 34232 is foobar</span></span><br><span class="line"><span class="comment">// You have successfully purchased Item 34232, a Ford Escort</span></span><br></pre></td></tr></table></figure><ul><li>回调函数版</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> invokeCallback = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!!cb &amp;&amp; <span class="keyword">typeof</span> cb === <span class="string">'function'</span>) &#123;</span><br><span class="line">        cb.apply(<span class="literal">null</span>, <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//logger.error('invokeCallback invalid cb!!! stack:%j', (new Error()).stack);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">carManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">// request information</span></span><br><span class="line">    requestInfo(model, id, cb) &#123;</span><br><span class="line">        invokeCallback(cb, <span class="literal">null</span>, &#123; <span class="attr">code</span>: <span class="number">1</span>, <span class="attr">info</span>: &#123; model, id &#125; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// purchase the car</span></span><br><span class="line">    buyVehicle(model, id, cb) &#123;</span><br><span class="line">        invokeCallback(cb, <span class="literal">null</span>, &#123; <span class="attr">code</span>: <span class="number">1</span>, <span class="attr">info</span>: &#123; model, id &#125; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// arrange a viewing</span></span><br><span class="line">    arrangeViewing(model, id, cb) &#123;</span><br><span class="line">        invokeCallback(cb, <span class="literal">null</span>, &#123; <span class="attr">code</span>: <span class="number">1</span>, <span class="attr">info</span>: &#123; model, id &#125; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    execute(name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[name] &amp;&amp; <span class="keyword">this</span>[name].apply(<span class="keyword">this</span>, [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数版</span></span><br><span class="line"><span class="keyword">let</span> cbfun = <span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (res.code !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.info)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> carManager();</span><br><span class="line"><span class="comment">// 调用命令</span></span><br><span class="line">car.execute(<span class="string">"arrangeViewing"</span>, <span class="string">"Ferrari"</span>, <span class="string">"14523"</span>, cbfun);</span><br><span class="line">car.execute(<span class="string">"requestInfo"</span>, <span class="string">"Ford Mondeo"</span>, <span class="string">"54323"</span>, cbfun);</span><br><span class="line">car.execute(<span class="string">"requestInfo"</span>, <span class="string">"Ford Escort"</span>, <span class="string">"34232"</span>, cbfun);</span><br><span class="line">car.execute(<span class="string">"buyVehicle"</span>, <span class="string">"Ford Escort"</span>, <span class="string">"34232"</span>, cbfun);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-命令模式的定义&quot;&gt;&lt;a href=&quot;#1-命令模式的定义&quot; class=&quot;headerlink&quot; title=&quot;1.命令模式的定义&quot;&gt;&lt;/a&gt;1.命令模式的定义&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;命令模式的目标是将方法的调用，请求或者操作封装到一个单独的对象中，给我们酌情执行同时参数化和传递方法调用的能力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;2-使用场合&quot;&gt;&lt;a href=&quot;#2-使用场合&quot; class=&quot;headerlink&quot; title=&quot;2.使用场合&quot;&gt;&lt;/a&gt;2.使用场合&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="行为型模式" scheme="https://github.com/QiqiM/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="https://github.com/QiqiM/2020/07/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/07/08/设计模式/观察者模式/</id>
    <published>2020-07-08T03:18:01.000Z</published>
    <updated>2020-08-09T05:24:32.372Z</updated>
    
    <content type="html"><![CDATA[<p>#### </p><h5 id="1-观察者模式的定义"><a href="#1-观察者模式的定义" class="headerlink" title="1.观察者模式的定义"></a>1.观察者模式的定义</h5><blockquote><p>在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖他的对象都会收到通知，并自动更新</p></blockquote><h5 id="2-使用场合"><a href="#2-使用场合" class="headerlink" title="2.使用场合"></a>2.使用场合</h5><blockquote><p>当一个对象改变的时候，需要同时改变其他对象，并且它不知道具体有多少对象需要改变的时候，就需要考虑使用观察者模式</p></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul><li>发布订阅</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通用代码 (极简主义写法)</span></span><br><span class="line"><span class="keyword">let</span> observer = &#123;</span><br><span class="line">    <span class="comment">//订阅</span></span><br><span class="line">    addSubscriber: <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subscribers[<span class="keyword">this</span>.subscribers.length] = callback;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//退订</span></span><br><span class="line">    removeSubscriber: <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.subscribers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.subscribers[i] === callback) &#123;</span><br><span class="line">                <span class="keyword">delete</span> (<span class="keyword">this</span>.subscribers[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发布</span></span><br><span class="line">    publish: <span class="function"><span class="keyword">function</span> (<span class="params">what</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.subscribers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.subscribers[i] === <span class="string">'function'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.subscribers[i](what);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将对象o具有观察者功能</span></span><br><span class="line">    make: <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">            o[i] = <span class="keyword">this</span>[i];</span><br><span class="line">            o.subscribers = [];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> blogger = &#123;</span><br><span class="line">    recommend: <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> msg = <span class="string">'dudu 推荐了的帖子:'</span> + id;</span><br><span class="line">        <span class="keyword">this</span>.publish(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    vote: <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> msg = <span class="string">'有人投票了!ID='</span> + id;</span><br><span class="line">        <span class="keyword">this</span>.publish(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">observer.make(blogger);</span><br><span class="line">observer.make(user);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom = &#123;</span><br><span class="line">    read: <span class="function"><span class="keyword">function</span> (<span class="params">what</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Tom看到了如下信息：'</span> + what)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mm = &#123;</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span> (<span class="params">what</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'mm看到了如下信息：'</span> + what)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line">blogger.addSubscriber(tom.read);</span><br><span class="line">blogger.addSubscriber(mm.show);</span><br><span class="line">blogger.recommend(<span class="number">123</span>); <span class="comment">//调用发布</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//退订</span></span><br><span class="line">blogger.removeSubscriber(mm.show);</span><br><span class="line">blogger.recommend(<span class="number">456</span>); <span class="comment">//调用发布</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//另外一个对象的订阅</span></span><br><span class="line">user.addSubscriber(mm.show);</span><br><span class="line">user.vote(<span class="number">789</span>); <span class="comment">//调用发布</span></span><br></pre></td></tr></table></figure><ul><li>观察者模式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主题 保存状态，状态变化之后触发所有观察者对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.observers = []</span><br><span class="line">  &#125;</span><br><span class="line">  getState() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state</span><br><span class="line">  &#125;</span><br><span class="line">  setState(state) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = state</span><br><span class="line">    <span class="keyword">this</span>.notifyAllObservers()</span><br><span class="line">  &#125;</span><br><span class="line">  notifyAllObservers() &#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.forEach(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">      observer.update()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  attach(observer) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.push(observer)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  remove(observer)&#123;</span><br><span class="line">    <span class="keyword">const</span> observerIndex = <span class="keyword">this</span>.observers.findIndex(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value == observer;</span><br><span class="line">    &#125;)</span><br><span class="line">    observerIndex &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.observers.splice(observerIndex, <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, subject) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.subject = subject</span><br><span class="line">    <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  update() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> update, state: <span class="subst">$&#123;<span class="keyword">this</span>.subject.getState()&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  remove()&#123;</span><br><span class="line">    <span class="keyword">this</span>.subject.remove(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Subject()</span><br><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> Observer(<span class="string">'o1'</span>, s)</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="keyword">new</span> Observer(<span class="string">'o2'</span>, s)</span><br><span class="line"></span><br><span class="line">s.setState(<span class="number">12</span>)</span><br><span class="line"><span class="comment">// o1 update, state: 12</span></span><br><span class="line"><span class="comment">// o2 update, state: 12</span></span><br><span class="line"></span><br><span class="line">o2.remove()</span><br><span class="line">s.setState(<span class="number">11</span>) </span><br><span class="line"><span class="comment">// o1 update, state: 11</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#### &lt;/p&gt;
&lt;h5 id=&quot;1-观察者模式的定义&quot;&gt;&lt;a href=&quot;#1-观察者模式的定义&quot; class=&quot;headerlink&quot; title=&quot;1.观察者模式的定义&quot;&gt;&lt;/a&gt;1.观察者模式的定义&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;在对象之间定义一对多的依
      
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="行为型模式" scheme="https://github.com/QiqiM/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="https://github.com/QiqiM/2020/07/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/07/07/设计模式/策略模式/</id>
    <published>2020-07-07T05:28:01.000Z</published>
    <updated>2020-08-09T05:24:32.372Z</updated>
    
    <content type="html"><![CDATA[<p>#### </p><h5 id="1-策略模式的定义"><a href="#1-策略模式的定义" class="headerlink" title="1.策略模式的定义"></a>1.策略模式的定义</h5><blockquote><p>将不变的的部分和变化的部分分隔开时每个设计模式的主题，定义一系列的算法，将他们一个个封装起来，并使他们可以互相替换</p></blockquote><h5 id="2-策略模式的目的"><a href="#2-策略模式的目的" class="headerlink" title="2.策略模式的目的"></a>2.策略模式的目的</h5><blockquote><p>将算法的使用与算法的实现分离开来</p></blockquote><h5 id="3-传统策略模式和js策略模式的实现"><a href="#3-传统策略模式和js策略模式的实现" class="headerlink" title="3.传统策略模式和js策略模式的实现"></a>3.传统策略模式和js策略模式的实现</h5><blockquote><p>使用策略模式重构代码，可以消除程序中大片的条件分支语句。在实际开发中，我们通常会把算法的含义扩散开来，使策略模式也可以用来封装一系列的“业务规则”。只要这些业务规则指向的目标一致，并且可以被替换使用，我们就可以使用策略模式来封装他们</p></blockquote><h5 id="4-策略模式的优缺点"><a href="#4-策略模式的优缺点" class="headerlink" title="4.策略模式的优缺点"></a>4.策略模式的优缺点</h5><ul><li>优点：<ul><li>策略模式利用组合，委托和多态等技术思想，可以有效的避免多重条件选择语句</li><li>策略模式提供了对开放-封闭原则的完美支持，将算法封装在独立的strategy中，使得他们呢易于切换，易于理解，易于扩展。</li><li>策略模式中的算法也可以复用在系统的其他地方，从而避免许多重复的复制粘贴工作</li><li>在策略模式中利用组合和委托让<code>context</code>拥有执行算法的能力，这也是继承的一种更轻便的替代方案。</li></ul></li><li>缺点：<ul><li>策略模式会在程序中添加许多的策略类和策略对象</li><li>要用策略模式，就必须要了解各个strategy和它们之间的不同点，这样才能选择一个合适的策略</li></ul></li></ul><h5 id="5-函数多态性的描述"><a href="#5-函数多态性的描述" class="headerlink" title="5.函数多态性的描述"></a>5.函数多态性的描述</h5><blockquote><p> 在函数作为一等对象的语言中，策略模式是隐形的，strategy就是值为函数的变量。</p></blockquote><blockquote><p>实际上在js这种将函数作为一等对象的语言里，策略模式已经融入到语言本身当中，我们经常使用高阶函数来封装不同的行为，并且把它传递到另一个函数中。当我们对这些函数发出调用的消息时，不同的函数会返回不同的执行结果。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统语言的策略模式 ,使用策略模式来计算奖金  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> performanceS = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">performanceS.prototype.calc = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> performanceA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">performanceA.prototype.calc = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> performanceB = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">performanceB.prototype.calc = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义奖金类</span></span><br><span class="line"><span class="keyword">let</span> Bonus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.salary = <span class="literal">null</span>;         <span class="comment">// 原始工资</span></span><br><span class="line">    <span class="keyword">this</span>.strategy = <span class="literal">null</span>;       <span class="comment">// 计算奖金的策略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Bonus.prototype.setSalary = <span class="function"><span class="keyword">function</span>(<span class="params">sal</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.salary = sal;           <span class="comment">// 设置员工的原始工资</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Bonus.prototype.setStrategy = <span class="function"><span class="keyword">function</span>(<span class="params">strategy</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.strategy = strategy     <span class="comment">// 设置对应的策略对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取奖金数额</span></span><br><span class="line">Bonus.prototype.getBonus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.strategy.calc(<span class="keyword">this</span>.salary)   <span class="comment">// 把计算奖金的操作委托给对应的策略对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bonus = <span class="keyword">new</span> Bonus();</span><br><span class="line">bonus.setSalary(<span class="number">10000</span>);</span><br><span class="line">bonus.setStrategy(<span class="keyword">new</span> performanceS);       <span class="comment">// 设置策略对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bonus.getBonus());              <span class="comment">// 40000</span></span><br><span class="line"></span><br><span class="line">bonus.setStrategy(<span class="keyword">new</span> performanceA);          </span><br><span class="line"><span class="built_in">console</span>.log(bonus.getBonus());                <span class="comment">// 30000</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js中的策略模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装的策略方法</span></span><br><span class="line"><span class="keyword">let</span> strategies = &#123;</span><br><span class="line">    <span class="string">"S"</span>: <span class="function">(<span class="params">sal</span>)=&gt;</span> &#123;<span class="keyword">return</span> sal * <span class="number">4</span>&#125;,</span><br><span class="line">    <span class="string">"A"</span>: <span class="function">(<span class="params">sal</span>)=&gt;</span> &#123;<span class="keyword">return</span> sal * <span class="number">3</span>&#125;,</span><br><span class="line">    <span class="string">"B"</span>: <span class="function">(<span class="params">sal</span>)=&gt;</span> &#123;<span class="keyword">return</span> sal * <span class="number">2</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体计算方法</span></span><br><span class="line"><span class="keyword">let</span> calcBonus = <span class="function"><span class="keyword">function</span>(<span class="params">level,salary</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strategies[level](salary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(calcBonus(<span class="string">'S'</span>,<span class="number">1000</span>))    <span class="comment">// 4000</span></span><br><span class="line"><span class="built_in">console</span>.log(calcBonus(<span class="string">'A'</span>,<span class="number">4000</span>))    <span class="comment">// 12000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#### &lt;/p&gt;
&lt;h5 id=&quot;1-策略模式的定义&quot;&gt;&lt;a href=&quot;#1-策略模式的定义&quot; class=&quot;headerlink&quot; title=&quot;1.策略模式的定义&quot;&gt;&lt;/a&gt;1.策略模式的定义&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;将不变的的部分和变化的部分分隔开
      
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="行为型模式" scheme="https://github.com/QiqiM/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://github.com/QiqiM/2020/07/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/07/06/设计模式/代理模式/</id>
    <published>2020-07-06T13:30:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-代理模式的定义"><a href="#1-代理模式的定义" class="headerlink" title="1.代理模式的定义"></a>1.代理模式的定义</h5><blockquote><p>为其他对象提供一种代理，用来控制这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用</p></blockquote><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li>图片懒加载</li><li>防止用户频繁请求（一定时间内，多次请求按一次计算）</li><li>数据的缓存（比如业务中不好获取的数据，可以将该数据代理到app上，或者user身上，这样在整个程序中都可以很方便的访问）</li></ul><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><ul><li>优点：代理模式能将代理对象与被调用对象分离，降低了系统的耦合度。代理模式在客户端和目标对象之间起到一个中介对象，这样可以起到保护对象的作用。代理对象也可以对目标对象调用之前进行其他操作。</li><li>缺点：增加了系统的复杂度</li></ul><h4 id="JavaScript开发中最常用的是虚拟代理和缓存代理。"><a href="#JavaScript开发中最常用的是虚拟代理和缓存代理。" class="headerlink" title="JavaScript开发中最常用的是虚拟代理和缓存代理。"></a>JavaScript开发中最常用的是<strong>虚拟代理</strong>和<strong>缓存代理</strong>。</h4><h4 id="虚拟代理"><a href="#虚拟代理" class="headerlink" title="虚拟代理"></a>虚拟代理</h4><p> 根据需要创建开销很大的对象，通过它来存放实例化需要很长时间的真实对象，比如浏览器的渲染的时候先显示问题，而图片可以慢慢显示（就是通过虚拟代理代替了真实的图片，此时虚拟代理保存了真实图片的路径和尺寸。用虚拟代理实现图片预加载代码实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片加载函数</span></span><br><span class="line">  <span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(imgNode)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">              imgNode.src = src</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)()</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 引入代理对象</span></span><br><span class="line"> <span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> img = <span class="keyword">new</span> Image</span><br><span class="line">     img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 图片加载完成，正式加载图片</span></span><br><span class="line">         myImage.setSrc( <span class="keyword">this</span>.src )</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">         setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">             <span class="comment">// 图片未被载入时，加载一张提示图片</span></span><br><span class="line">             myImage.setSrc(<span class="string">'file://c:/loading.png'</span>)</span><br><span class="line">             img.src = src</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)()</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 调用代理对象加载图片</span></span><br><span class="line"> proxyImage.setSrc( <span class="string">'http://images/qq.jpg'</span>)</span><br></pre></td></tr></table></figure><p> proxyImage 间接地访问MyImage。proxyImage 控制了客户对MyImage 的访问，并且在此过程中加入一些额外的操作（真正的图片加载好之前，先把img 节点的src 设置为一张本地的loading 图片）。看完这段代码之后我们会立马思考一个问题，不使用代理模式我们照样可以实现图片的预加载功能，无非就是在MyImage的setSrc方法中加上图片加载完成监听以及加载本地提示图片这两部分代码，为什么要使用代理模式反而把实现变得复杂了？</p><p> 思考两个问题：</p><p> 一、对于MyImage的setSrc函数来说职责过多，既要给img设置src，又要负责预加载图片，违反了面向对象设计原则中的<strong>单一职责原则</strong>；</p><p> 二、如果后期我们考虑撤销图片预加载功能，就要去修改MyImage的setSrc方法，违反了<strong>开闭原则</strong>；</p><p>分析了上面两个问题后，代理模式恰好能规避掉这两个问题，此时就体现出了设计模式的优点。</p><h4 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h4><p> 缓存代理可以为一些开销大的运算结果提供暂时的存储，在下次运算时，如果传递进来的参数跟之前一致，则可以直接返回前面存储的运算结果。使用缓存代理实现运算结果缓存代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++)&#123;</span><br><span class="line">        sum += <span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> proxyAdd = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125; <span class="comment">//缓存运算结果的缓存对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>)<span class="comment">//把参数用逗号组成一个字符串作为“键”</span></span><br><span class="line">        <span class="keyword">if</span>(cache.hasOwnProperty(args))&#123;<span class="comment">//等价 args in cache</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'使用缓存结果'</span>)</span><br><span class="line">            <span class="keyword">return</span> cache[args]<span class="comment">//直接使用缓存对象的“值”</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'计算结果'</span>)</span><br><span class="line">        <span class="keyword">return</span> cache[args] = add.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>)<span class="comment">//使用本体函数计算结果并加入缓存</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(proxyAdd(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"><span class="built_in">console</span>.log(proxyAdd(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"><span class="built_in">console</span>.log(proxyAdd(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">计算结果</span><br><span class="line"><span class="number">15</span></span><br><span class="line">使用缓存结果</span><br><span class="line"><span class="number">15</span></span><br><span class="line">使用缓存结果</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><p> 通过增加缓存代理的方式，add 函数可以继续专注于自身的职责——计算传入参数的和，缓存的功能是由代理对象实现的。</p><h4 id="ES6中的代理Proxy"><a href="#ES6中的代理Proxy" class="headerlink" title="ES6中的代理Proxy"></a>ES6中的代理Proxy</h4><p> ES6原生提供了Proxy构造函数，主要作用是在目标对象之前架设一层<strong>拦截</strong>，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。其主要的思想还是设计模式，下面我们就来学习一下如何使用Proxy。</p><p> Proxy是一个构造函数，它可以接受两个参数：目标对象（target） 与句柄对象（handler） ，返回一个代理对象Proxy，主要用于从外部控制对对象内部的访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;&#125;, handler = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure><ul><li><p><strong>Proxy、target、handler这三者之间有什么关系呢？</strong></p><p>Proxy的行为很简单：将Proxy的所有内部方法转发至target 。即调用Proxy的方法就会调用target上对应的方法。</p></li><li><p><strong>handler是用来干嘛的？</strong></p><p>handler的方法可以覆写任意代理的内部方法。 外界每次通过Proxy访问<code>target</code> 对象的属性时，就会经过 <code>handler</code> 对象，因此，我们可以通过重写handler对象中的一些方法来做一些拦截的操作。</p></li></ul><h5 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let user = &#123;</span><br><span class="line">    username: &apos;zhangsan&apos;,</span><br><span class="line">    password: &apos;123456&apos;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var userProxy = new Proxy(user,&#123;</span><br><span class="line">    get: function(target, property, receiver)&#123;</span><br><span class="line">        console.log(`你访问了user的$&#123;property&#125;属性`)</span><br><span class="line">        return target[prop]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(userProxy.username)</span><br><span class="line">// 你访问了user的username属性 </span><br><span class="line">// zhangsan</span><br></pre></td></tr></table></figure><p> 如上面的代码，我们访问并输出了username属性，但是运行结果确又额外的输出了js我们在<code>handler</code>的get方法中预先输出的一句话，这就是拦截器的作用。</p><h5 id="handler的内建方法"><a href="#handler的内建方法" class="headerlink" title="handler的内建方法"></a>handler的内建方法</h5><p> 相信看了上面代码大家还有一个疑问，get方法是什么？get方法是handler对象的14个内建方法之一，我们可以通过重写这些内建方法来自定义拦截器的内容。handler对象拥有以下14个内建对象（我只举四个常用的，其他的请参考博客<a href="https://blog.csdn.net/qq_28506819/article/details/71077788" target="_blank" rel="noopener">深度揭秘ES6代理Proxy</a>）：</p><ol><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler.get(target, property, receiver)</span><br></pre></td></tr></table></figure><p>方法用于拦截对象的读取属性操作</p><ul><li>target，目标对象</li><li>property，被获取的属性名</li><li>receiver，Proxy或者继承Proxy的对象</li></ul></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler.set(target, property, value, receiver)</span><br></pre></td></tr></table></figure></li></ol><p>   方法用于拦截设置属性值的操作</p><ul><li>target，目标对象</li><li>property，被设置的属性名</li><li>value，被设置的新值</li><li>receiver，最初被调用的对象。通常是proxy本身，但handler的set方法也有可能在原型链上或以其他方式被间接地调用（因此不一定是proxy本身）</li></ul><ol start="3"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler.apply(target, thisArg, argumentsList)</span><br></pre></td></tr></table></figure></li></ol><p>   方法用于拦截函数的调用</p><ul><li>target，目标对象（函数）</li><li>thisArg，被调用时的上下文对象</li><li>argumentsList，被调用时的参数列表</li></ul><ol start="4"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler.construct(target, argumentsList, newTarget)</span><br></pre></td></tr></table></figure><p>用于来接new操作</p><ul><li>target，目标对象</li><li>argumensList，构造器参数列表</li><li>newTarget，最初调用的构造函数</li></ul></li></ol><p><strong>下面我们就来用ES6语法对虚拟代理例子进行重写</strong></p><ul><li>虚拟代理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myImage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(document) &#123;</span><br><span class="line">        <span class="keyword">this</span>.imgNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(imgNode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setSrc() &#123;</span><br><span class="line">        imgNode.src = src</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myImageProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myImage, &#123;</span><br><span class="line">    apply(target, ctx, <span class="built_in">arguments</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> Image</span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 图片加载完成，正式加载图片</span></span><br><span class="line">        target.call(ctx, ...arguments)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 图片未被载入时，加载一张提示图片</span></span><br><span class="line">        target.call(ctx, <span class="string">'file://c:/loading.png'</span>)</span><br><span class="line">        img.src = <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">let</span> myImg = <span class="keyword">new</span> myImageProxy(<span class="built_in">document</span>)</span><br><span class="line">myImg.setSrc(<span class="string">'http://images/qq.jpg'</span>)</span><br></pre></td></tr></table></figure><ul><li>缓存代理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(arguments) &#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++)&#123;</span><br><span class="line">            sum += <span class="built_in">arguments</span>[i]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> AddProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(Add, &#123;</span><br><span class="line">    construct(target, <span class="built_in">arguments</span>, newTarget) &#123; <span class="comment">// newTarget最初的构造函数</span></span><br><span class="line">        <span class="keyword">let</span> cache = target.cache <span class="comment">// 从Add类中取出静态属性cache(缓存运算结果的缓存对象)</span></span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>);<span class="comment">//把参数用逗号组成一个字符串作为“键”</span></span><br><span class="line">        <span class="keyword">if</span>(cache.hasOwnProperty(args))&#123;<span class="comment">//等价 args in cache</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'使用缓存结果'</span>);</span><br><span class="line">            <span class="keyword">return</span> cache[args];<span class="comment">//直接使用缓存对象的“值”</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'计算结果'</span>);</span><br><span class="line">        <span class="keyword">return</span> cache[args] = newTarget(<span class="built_in">arguments</span>);<span class="comment">//使用本体函数计算结果并加入缓存</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1-代理模式的定义&quot;&gt;&lt;a href=&quot;#1-代理模式的定义&quot; class=&quot;headerlink&quot; title=&quot;1.代理模式的定义&quot;&gt;&lt;/a&gt;1.代理模式的定义&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;为其他对象提供一种代理，用来控制这个对象的访问。在某些情况
      
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="结构型模式" scheme="https://github.com/QiqiM/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="https://github.com/QiqiM/2020/07/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/07/06/设计模式/建造者模式/</id>
    <published>2020-07-06T11:11:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<p>#### </p><h5 id="1-建造者模式的定义"><a href="#1-建造者模式的定义" class="headerlink" title="1.建造者模式的定义"></a>1.建造者模式的定义</h5><blockquote><p>建造者模式（bulider pattern）比较简单，将一个复杂的对象分解成多个简单的对象来进行构建，将复杂的构建层与表示层分离，使得相同的构建过程可以创建不同的表示的模式。</p></blockquote><blockquote><p>优点：封装性很好，对象的构建与表示分离；建造者模式很容易扩展，如果有新的需求，通过实现一个新的建造者类就可可以完成</p></blockquote><blockquote><p>缺点：使用范围受限，产品内部变化复杂会导致具体建造者过多</p></blockquote><a id="more"></a><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><blockquote><p>建造者模式主要有4个部分：product产品类、Builder建造者类、Director指挥者类、客户。</p></blockquote><blockquote><p>主要的流程是：</p></blockquote><ul><li>客户提出需求。</li><li>指挥者根据用户需求，指挥建造者去完成需求的各个部分。</li><li>建造者完成相应的部分。</li><li>我们来看一下相应的代码：</li><li>产品类为一辆加工的空壳汽车。</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品类：car 目前需要构建一辆车。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span>.number = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span>.wheel = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span>.engine = <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">*    建造者类，里面有专门负责各个部分的工人</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">carBuilder</span> </span>&#123;</span><br><span class="line">  nameBuilder() &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'很厉害的车'</span></span><br><span class="line">  &#125;</span><br><span class="line">  numberBuilder() &#123;</span><br><span class="line">    <span class="keyword">this</span>.number = <span class="string">'88888888'</span></span><br><span class="line">  &#125;</span><br><span class="line">  wheelBuilder() &#123;</span><br><span class="line">    <span class="keyword">this</span>.wheel = <span class="string">'高级橡胶做的轮子'</span></span><br><span class="line">  &#125;</span><br><span class="line">  engineBuilder() &#123;</span><br><span class="line">    <span class="keyword">this</span>.engine = <span class="string">'很厉害的引擎'</span></span><br><span class="line">  &#125;</span><br><span class="line">  getCar() &#123;</span><br><span class="line">    <span class="keyword">var</span> Car = <span class="keyword">new</span> car()</span><br><span class="line">    Car.name = <span class="keyword">this</span>.name;</span><br><span class="line">    Car.number = <span class="keyword">this</span>.number;</span><br><span class="line">    Car.wheel = <span class="keyword">this</span>.wheel;</span><br><span class="line">    Car.engine = <span class="keyword">this</span>.engine;</span><br><span class="line">    <span class="keyword">return</span> Car;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   指挥者类，指挥各个部分的工人工作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">director</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  action(builder) &#123;</span><br><span class="line">    builder.nameBuilder();</span><br><span class="line">    builder.numberBuilder();</span><br><span class="line">    builder.wheelBuilder();</span><br><span class="line">    builder.engineBuilder();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    使用方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> carBuilder();</span><br><span class="line"><span class="keyword">var</span> director = <span class="keyword">new</span> director();</span><br><span class="line">director.action(builder);</span><br><span class="line"><span class="keyword">var</span> Car = builder.getCar();</span><br><span class="line"><span class="built_in">console</span>.log(Car);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#### &lt;/p&gt;
&lt;h5 id=&quot;1-建造者模式的定义&quot;&gt;&lt;a href=&quot;#1-建造者模式的定义&quot; class=&quot;headerlink&quot; title=&quot;1.建造者模式的定义&quot;&gt;&lt;/a&gt;1.建造者模式的定义&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;建造者模式（bulider pattern）比较简单，将一个复杂的对象分解成多个简单的对象来进行构建，将复杂的构建层与表示层分离，使得相同的构建过程可以创建不同的表示的模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;优点：封装性很好，对象的构建与表示分离；建造者模式很容易扩展，如果有新的需求，通过实现一个新的建造者类就可可以完成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;缺点：使用范围受限，产品内部变化复杂会导致具体建造者过多&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="创建型模式" scheme="https://github.com/QiqiM/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://github.com/QiqiM/2020/07/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/07/06/设计模式/单例模式/</id>
    <published>2020-07-06T08:48:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<p>#### </p><h5 id="1-单例模式的定义"><a href="#1-单例模式的定义" class="headerlink" title="1.单例模式的定义"></a>1.单例模式的定义</h5><blockquote><p>单例模式：限制类实例化次数只能一次，一个类只有一个实例，并提供一个访问它的全局访问点。</p></blockquote><h4 id="模式特点"><a href="#模式特点" class="headerlink" title="模式特点"></a>模式特点</h4><ul><li>类只有一个实例</li><li>全局可访问该实例</li><li>自行实例化（主动实例化）</li><li>可推迟初始化，即延迟执行（与静态类/对象的区别）</li></ul><a id="more"></a><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><blockquote><p>“单例模式的特点，意图解决：维护一个全局实例对象。”</p></blockquote><ul><li>引用第三方库（多次引用只会使用一个库引用，如 jQuery）</li><li>弹窗（登录框，信息提升框）</li><li>购物车 (一个用户只有一个购物车)</li><li>全局态管理 store (Vuex / Redux)</li></ul><p>项目中引入第三方库时，重复多次加载库文件时，全局只会实例化一个库对象，如 <code>jQuery</code>，<code>lodash</code>，<code>moment ...</code>, 其实它们的实现理念也是单例模式应用的一种：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入代码库 libs(库别名）</span></span><br><span class="line"><span class="keyword">import</span> libName <span class="keyword">from</span> <span class="string">'lib'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.libs != <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.libs;    <span class="comment">// 直接返回</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.libs = libName   <span class="comment">// 初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>优点：适用于单一对象，只生成一个对象实例，避免频繁创建和销毁实例，减少内存占用。</p></blockquote><blockquote><p>缺点：不适用动态扩展对象，或需创建多个相似对象的场景</p></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul><li><p>使用闭包实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleton = <span class="function"><span class="keyword">function</span>(<span class="params"> fn </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result || ( result = fn .apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> createMask = singleton( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.body.appendChild( <span class="built_in">document</span>.createElement(<span class="string">'div'</span>) );</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li><li><p>TS实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 饿汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 构造器私有化，外部不能new</span></span><br><span class="line">    private <span class="keyword">constructor</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 本类内部创建对象实例化</span></span><br><span class="line">    private <span class="keyword">static</span> instance : Singleton1 = <span class="keyword">new</span> Singleton1();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 提供一个公有的静态方法，返回实例对象</span></span><br><span class="line">    public <span class="keyword">static</span> getInstance() : Singleton1 &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Singleton1.getInstance(), <span class="string">'11111'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    private <span class="keyword">constructor</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> instance: Singleton2 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> getInstance() : Singleton2 &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.instance === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Singleton2.getInstance(), <span class="string">'2222'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#### &lt;/p&gt;
&lt;h5 id=&quot;1-单例模式的定义&quot;&gt;&lt;a href=&quot;#1-单例模式的定义&quot; class=&quot;headerlink&quot; title=&quot;1.单例模式的定义&quot;&gt;&lt;/a&gt;1.单例模式的定义&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;单例模式：限制类实例化次数只能一次，一个类只有一个实例，并提供一个访问它的全局访问点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;模式特点&quot;&gt;&lt;a href=&quot;#模式特点&quot; class=&quot;headerlink&quot; title=&quot;模式特点&quot;&gt;&lt;/a&gt;模式特点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;类只有一个实例&lt;/li&gt;
&lt;li&gt;全局可访问该实例&lt;/li&gt;
&lt;li&gt;自行实例化（主动实例化）&lt;/li&gt;
&lt;li&gt;可推迟初始化，即延迟执行（与静态类/对象的区别）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="创建型模式" scheme="https://github.com/QiqiM/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="https://github.com/QiqiM/2020/07/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/07/06/设计模式/原型模式/</id>
    <published>2020-07-06T08:48:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<p>#### </p><h5 id="1-工厂模式的定义"><a href="#1-工厂模式的定义" class="headerlink" title="1.工厂模式的定义"></a>1.工厂模式的定义</h5><blockquote><p>原型模式（prototype）是指用原型实例指向创建对象的种类，并且通过拷贝这些原型创建新的对象。</p></blockquote><blockquote><p>优点：简化创建新对象的过程并提高效率，可动态获取对象运行时的状态；原始对象变化<br>（增加或减少属性和方法），相应克隆对象会跟随着变化</p></blockquote><blockquote><p>缺点：对已有类修改时，需要修改源对象（违反了开放关闭原则）</p></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myCar = &#123;</span><br><span class="line"></span><br><span class="line">  name: <span class="string">"Ford Escort"</span>,</span><br><span class="line"></span><br><span class="line">  drive: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"Weeee. I'm driving!"</span> );</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  panic: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"Wait. How do you stop this thing?"</span> );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use Object.create to instantiate a new car</span></span><br><span class="line"><span class="keyword">var</span> yourCar = <span class="built_in">Object</span>.create( myCar );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now we can see that one is a prototype of the other</span></span><br><span class="line"><span class="built_in">console</span>.log( yourCar.name );    <span class="comment">// Ford Escort</span></span><br></pre></td></tr></table></figure><blockquote><p>Object.create也允许我们简单的继承先进的概念,比如对象能够直接继承自其它对象,这种不同的继承.我们早先也看到Object.create允许我们使用 供应的第二个参数来初始化对象属性。例如：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vehicle = &#123;</span><br><span class="line">  getModel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"The model of this vehicle is.."</span> + <span class="keyword">this</span>.model );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="built_in">Object</span>.create(vehicle, &#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">"id"</span>: &#123;</span><br><span class="line">    value: MY_GLOBAL.nextId(),</span><br><span class="line">    <span class="comment">// writable:false, configurable:false by default</span></span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">"model"</span>: &#123;</span><br><span class="line">    value: <span class="string">"Ford"</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>es6自带的class extends实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    getName() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">      <span class="keyword">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    sayHello() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Hello， My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> student = <span class="keyword">new</span> Student(<span class="string">"xiaoming"</span>)</span><br><span class="line">  student.sayHello()   <span class="comment">// Hello， My name is xiaoming</span></span><br></pre></td></tr></table></figure></li><li><p>自定义实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vehiclePrototype = &#123;</span><br><span class="line"></span><br><span class="line">  init: <span class="function"><span class="keyword">function</span> (<span class="params"> carModel </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model = carModel;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getModel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"The model of this vehicle is.."</span> + <span class="keyword">this</span>.model);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vehicle</span>(<span class="params"> model </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  F.prototype = vehiclePrototype;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> f = <span class="keyword">new</span> F();</span><br><span class="line"></span><br><span class="line">  f.init( model );</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = vehicle( <span class="string">"Ford Escort"</span> );</span><br><span class="line">car.getModel();  <span class="comment">//The model of this vehicle is..Ford Escort</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#### &lt;/p&gt;
&lt;h5 id=&quot;1-工厂模式的定义&quot;&gt;&lt;a href=&quot;#1-工厂模式的定义&quot; class=&quot;headerlink&quot; title=&quot;1.工厂模式的定义&quot;&gt;&lt;/a&gt;1.工厂模式的定义&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;原型模式（prototype）是
      
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="创建型模式" scheme="https://github.com/QiqiM/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>什么是事件循环（Event Loop）</title>
    <link href="https://github.com/QiqiM/2020/06/05/%E6%B7%B1%E5%85%A5js%E7%B3%BB%E5%88%97/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Node%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    <id>https://github.com/QiqiM/2020/06/05/深入js系列/深入理解Node事件循环/</id>
    <published>2020-06-05T07:58:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是事件循环（Event-loop）？"><a href="#什么是事件循环（Event-loop）？" class="headerlink" title="什么是事件循环（Event loop）？"></a>什么是事件循环（<code>Event loop</code>）？</h2><p>WIKI定义：</p><blockquote><p>In computer science, the <strong>event loop, message dispatcher, message loop, message pump, or run loop</strong> is a programming construct that waits for and dispatches events or messages in a program.</p></blockquote><p>Event loop是一种程序结构，是实现异步的一种机制。Event loop可以简单理解为：</p><ol><li>所有任务都在主线程上执行，形成一个执行栈（execution context stack）。</li><li>主线程之外，还存在一个”任务队列”（task queue）。系统把异步任务放到”任务队列”之中，然后主线程继续执行后续的任务。</li><li>一旦”执行栈”中的所有任务执行完毕，系统就会读取”任务队列”。如果这个时候，异步任务已经结束了等待状态，就会从”任务队列”进入执行栈，恢复执行。</li><li>主线程不断重复上面的第三步。</li></ol><p>对JavaScript而言，Javascript引擎／虚拟机（如V8）之外，JavaScript的运行环境（runtime，如浏览器，node）维护了任务队列，每当JS执行异步操作时，运行环境把异步任务放入任务队列。当执行引擎的线程执行完毕（空闲）时，运行环境就会把任务队列里的（执行完的）任务（的数据和回调函数）交给引擎继续执行，这个过程是一个<strong>不断循环</strong>的过程，称为<strong>事件循环</strong>。</p><p><strong>注意：JavaScript（引擎）是单线程的，Event loop并不属于JavaScript本身，但JavaScript的运行环境是多线程／多进程的，运行环境实现了Event loop。</strong></p><p>另外，视频<a href="http://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html" target="_blank" rel="noopener">What the heck is the event loop anyway</a> 站在前端的角度，用动画的形式描述了上述过程，可以便于理解。</p><h2 id="解释Node-js的Event-loop"><a href="#解释Node-js的Event-loop" class="headerlink" title="解释Node.js的Event loop"></a>解释Node.js的Event loop</h2><p>当Node.js启动时，它会初始化event loop，处理提供的代码（代码里可能会有异步API调用，timer，以及<code>process.nextTick()</code>），然后开始处理event loop。</p><p>下面是node启动的部分相关代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// node.cc</span><br><span class="line">  &#123;</span><br><span class="line">    SealHandleScope seal(isolate);</span><br><span class="line">    bool more;</span><br><span class="line">    do &#123;</span><br><span class="line">      v8_platform.PumpMessageLoop(isolate);</span><br><span class="line">      more = uv_run(env.event_loop(), UV_RUN_ONCE);</span><br><span class="line"></span><br><span class="line">      if (more == false) &#123;</span><br><span class="line">        v8_platform.PumpMessageLoop(isolate);</span><br><span class="line">        EmitBeforeExit(&amp;env);</span><br><span class="line"></span><br><span class="line">        // Emit `beforeExit` if the loop became alive either after emitting</span><br><span class="line">        // event, or after running some callbacks.</span><br><span class="line">        more = uv_loop_alive(env.event_loop());</span><br><span class="line">        if (uv_run(env.event_loop(), UV_RUN_NOWAIT) != 0)</span><br><span class="line">          more = true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; while (more == true);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Event-Loop的执行顺序"><a href="#Event-Loop的执行顺序" class="headerlink" title="Event Loop的执行顺序"></a>Event Loop的执行顺序</h3><p>下面的示意图展示了一个简化的event loop的操作顺序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   ┌───────────────────────┐</span><br><span class="line">┌─&gt;│        timers         │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     I/O callbacks     │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     idle, prepare     │</span><br><span class="line">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class="line">│  │         poll          │&lt;─────┤  connections, │</span><br><span class="line">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class="line">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class="line">│  │        check          │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">└──┤    close callbacks    │</span><br><span class="line">   └───────────────────────┘</span><br></pre></td></tr></table></figure><p>（图来自<a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/" target="_blank" rel="noopener">Node.js API</a>）</p><p><em>图中每个“盒子”都是event loop执行的一个阶段（phase）。</em></p><p>每个阶段都有一个<strong>FIFO</strong>的回调队列（queue）要执行。而每个阶段有自己的特殊之处，简单说，就是当event loop进入某个阶段后，会执行该阶段特定的（任意）操作，然后才会执行这个阶段的队列里的回调。当队列被执行完，或者执行的回调数量达到上限后，event loop会进入下个阶段。</p><h3 id="Phases-Overview-阶段总览"><a href="#Phases-Overview-阶段总览" class="headerlink" title="Phases Overview 阶段总览"></a>Phases Overview 阶段总览</h3><ul><li><strong>timers:</strong> 这个阶段执行<code>setTimeout()</code>和<code>setInterval()</code>设定的回调。</li><li><strong>I/O callbacks:</strong> 执行被推迟到下一个iteration的 I/O 回调。</li><li><strong>idle, prepare:</strong> 仅内部使用。</li><li><strong>poll:</strong> 获取新的I/O事件；node会在适当条件下阻塞在这里。这个阶段执行几乎所有的回调，除了<code>close</code>回调，timer的回调，和<code>setImmediate()</code>的回调。</li><li><strong>check:</strong> 执行<code>setImmediate()</code>设定的回调。</li><li><strong>close callbacks:</strong> 执行比如<code>socket.on(&#39;close&#39;, ...)</code>的回调。</li></ul><h3 id="Phases-in-Detail-阶段详情"><a href="#Phases-in-Detail-阶段详情" class="headerlink" title="Phases in Detail 阶段详情"></a>Phases in Detail 阶段详情</h3><h4 id="timers"><a href="#timers" class="headerlink" title="timers"></a>timers</h4><p>一个timer指定一个下限时间而不是准确时间，在达到这个下限时间后执行回调。在指定时间过后，timers会尽可能早地执行回调，但系统调度或者其它回调的执行可能会延迟它们。</p><p>注意：技术上来说，<strong>poll</strong> 阶段控制 timers 什么时候执行。</p><p>注意：这个下限时间有个范围：<code>[1, 2147483647]</code>，如果设定的时间不在这个范围，将被设置为1。</p><h4 id="I-O-callbacks"><a href="#I-O-callbacks" class="headerlink" title="I/O callbacks"></a>I/O callbacks</h4><p>这个阶段执行一些系统操作的回调。比如TCP错误，如一个TCP socket在想要连接时收到<code>ECONNREFUSED</code>,<br>类unix系统会等待以报告错误，这就会放到 <strong>I/O callbacks</strong> 阶段的队列执行。</p><h4 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h4><p><strong>poll</strong> 阶段有两个主要功能：</p><ol><li>执行下限时间已经达到的timers的回调，然后</li><li>处理 <strong>poll</strong> 队列里的事件。</li></ol><p>当event loop进入 <strong>poll</strong> 阶段，并且 <em>没有设定的timers（there are no timers scheduled）</em>，会发生下面两件事之一：</p><ol><li>如果 <strong>poll</strong> 队列不空，event loop会遍历队列并同步执行回调，直到队列清空或执行的回调数到达系统上限；</li><li>如果 <strong>poll</strong> 队列为空，则发生以下两件事之一：<ol><li>如果代码已经被<code>setImmediate()</code>设定了回调, event loop将结束 <strong>poll</strong> 阶段进入 <strong>check</strong> 阶段来执行 <strong>check</strong> 队列（里的回调）。</li><li>如果代码没有被<code>setImmediate()</code>设定回调，event loop将阻塞在该阶段等待回调被加入 <strong>poll</strong> 队列，并立即执行。</li></ol></li></ol><p>但是，当event loop进入 <strong>poll</strong> 阶段，并且 <em>有设定的timers</em>，一旦 <strong>poll</strong> 队列为空（<strong>poll</strong> 阶段空闲状态）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. event loop将检查timers,如果有1个或多个timers的下限时间已经到达，event loop将绕回 **timers** 阶段，并执行 **timer** 队列。</span><br></pre></td></tr></table></figure><h4 id="check"><a href="#check" class="headerlink" title="check"></a>check</h4><p>这个阶段允许在 <strong>poll</strong> 阶段结束后立即执行回调。如果 <strong>poll</strong> 阶段空闲，并且有被<code>setImmediate()</code>设定的回调，event loop会转到 <strong>check</strong> 阶段而不是继续等待。</p><p><code>setImmediate()</code>实际上是一个特殊的timer，跑在event loop中一个独立的阶段。它使用<code>libuv</code>的API<br>来设定在 <strong>poll</strong> 阶段结束后立即执行回调。</p><p>通常上来讲，随着代码执行，event loop终将进入 <strong>poll</strong> 阶段，在这个阶段等待 incoming connection, request 等等。但是，只要有被<code>setImmediate()</code>设定了回调，一旦 <strong>poll</strong> 阶段空闲，那么程序将结束 <strong>poll</strong> 阶段并进入 <strong>check</strong> 阶段，而不是继续等待 <strong>poll</strong> 事件们 （<strong>poll</strong> events）。</p><h4 id="close-callbacks"><a href="#close-callbacks" class="headerlink" title="close callbacks"></a>close callbacks</h4><p>如果一个 socket 或 handle 被突然关掉（比如 <code>socket.destroy()</code>），close事件将在这个阶段被触发，否则将通过<code>process.nextTick()</code>触发。</p><h3 id="event-loop的一个例子讲述"><a href="#event-loop的一个例子讲述" class="headerlink" title="event loop的一个例子讲述"></a>event loop的一个例子讲述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">function someAsyncOperation (callback) &#123;</span><br><span class="line">  // 假设这个任务要消耗 95ms</span><br><span class="line">  fs.readFile(&apos;/path/to/file&apos;, callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var timeoutScheduled = Date.now();</span><br><span class="line"></span><br><span class="line">setTimeout(function () &#123;</span><br><span class="line"></span><br><span class="line">  var delay = Date.now() - timeoutScheduled;</span><br><span class="line"></span><br><span class="line">  console.log(delay + &quot;ms have passed since I was scheduled&quot;);</span><br><span class="line">&#125;, 100);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// someAsyncOperation要消耗 95 ms 才能完成</span><br><span class="line">someAsyncOperation(function () &#123;</span><br><span class="line"></span><br><span class="line">  var startCallback = Date.now();</span><br><span class="line"></span><br><span class="line">  // 消耗 10ms...</span><br><span class="line">  while (Date.now() - startCallback &lt; 10) &#123;</span><br><span class="line">    ; // do nothing</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当event loop进入 <strong>poll</strong> 阶段，它有个空队列（<code>fs.readFile()</code>尚未结束）。所以它会等待剩下的毫秒，<br>直到最近的timer的下限时间到了。当它等了95ms，<code>fs.readFile()</code>首先结束了，然后它的回调被加到 <strong>poll</strong><br>的队列并执行——这个回调耗时10ms。之后由于没有其它回调在队列里，所以event loop会查看最近达到的timer的<br>下限时间，然后回到 <strong>timers</strong> 阶段，执行timer的回调。</p><p>所以在示例里，回调被设定 和 回调执行间的间隔是105ms。</p><h2 id="setImmediate-vs-setTimeout"><a href="#setImmediate-vs-setTimeout" class="headerlink" title="setImmediate() vs setTimeout()"></a><code>setImmediate()</code> vs <code>setTimeout()</code></h2><p><code>setImmediate()</code> 和 <code>setTimeout()</code>是相似的，区别在于什么时候执行回调：</p><ol><li><code>setImmediate()</code>被设计在 <strong>poll</strong> 阶段结束后立即执行回调；</li><li><code>setTimeout()</code>被设计在指定下限时间到达后执行回调。</li></ol><p>下面看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// timeout_vs_immediate.js</span><br><span class="line">setTimeout(function timeout () &#123;</span><br><span class="line">  console.log(&apos;timeout&apos;);</span><br><span class="line">&#125;,0);</span><br><span class="line"></span><br><span class="line">setImmediate(function immediate () &#123;</span><br><span class="line">  console.log(&apos;immediate&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码的输出结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ node timeout_vs_immediate.js</span><br><span class="line">timeout</span><br><span class="line">immediate</span><br><span class="line"></span><br><span class="line">$ node timeout_vs_immediate.js</span><br><span class="line">immediate</span><br><span class="line">timeout</span><br></pre></td></tr></table></figure><p>是的，你没有看错，输出结果是 <strong>不确定</strong> 的！</p><p>从直觉上来说，<code>setImmediate()</code>的回调应该先执行，但为什么结果随机呢？</p><p>再看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// timeout_vs_immediate.js</span><br><span class="line">var fs = require(&apos;fs&apos;)</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;timeout&apos;)</span><br><span class="line">  &#125;, 0)</span><br><span class="line">  setImmediate(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;immediate&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ node timeout_vs_immediate.js</span><br><span class="line">immediate</span><br><span class="line">timeout</span><br><span class="line"></span><br><span class="line">$ node timeout_vs_immediate.js</span><br><span class="line">immediate</span><br><span class="line">timeout</span><br></pre></td></tr></table></figure><p>很好，<code>setImmediate</code>在这里永远先执行！</p><p>所以，结论是：</p><ol><li>如果两者都在主模块（main module）调用，那么执行先后取决于进程性能，即随机。</li><li>如果两者都不在主模块调用（即在一个 IO circle 中调用），那么<code>setImmediate</code>的回调永远先执行。</li></ol><p>那么又是为什么呢？</p><p>看<code>int uv_run(uv_loop_t* loop, uv_run_mode mode)</code>源码（deps/uv/src/unix/core.c#332）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">int uv_run(uv_loop_t* loop, uv_run_mode mode) &#123;</span><br><span class="line">  int timeout;</span><br><span class="line">  int r;</span><br><span class="line">  int ran_pending;</span><br><span class="line"></span><br><span class="line">  r = uv__loop_alive(loop);</span><br><span class="line">  if (!r)</span><br><span class="line">    uv__update_time(loop);</span><br><span class="line"></span><br><span class="line">  while (r != 0 &amp;&amp; loop-&gt;stop_flag == 0) &#123;</span><br><span class="line">    uv__update_time(loop);</span><br><span class="line">    //// 1. timer 阶段</span><br><span class="line">    uv__run_timers(loop);</span><br><span class="line">    //// 2. I/O callbacks 阶段</span><br><span class="line">    ran_pending = uv__run_pending(loop);</span><br><span class="line">    //// 3. idle/prepare 阶段</span><br><span class="line">    uv__run_idle(loop);</span><br><span class="line">    uv__run_prepare(loop);</span><br><span class="line"></span><br><span class="line">    // 重新更新timeout，使得 uv__io_poll 有机会跳出</span><br><span class="line">    timeout = 0;</span><br><span class="line">    if ((mode == UV_RUN_ONCE &amp;&amp; !ran_pending) || mode == UV_RUN_DEFAULT)</span><br><span class="line">      timeout = uv_backend_timeout(loop);</span><br><span class="line"></span><br><span class="line">    //// 4. poll 阶段</span><br><span class="line">    uv__io_poll(loop, timeout);</span><br><span class="line">    //// 5. check 阶段</span><br><span class="line">    uv__run_check(loop);</span><br><span class="line">    //// 6. close 阶段</span><br><span class="line">    uv__run_closing_handles(loop);</span><br><span class="line"></span><br><span class="line">    if (mode == UV_RUN_ONCE) &#123;</span><br><span class="line">      uv__update_time(loop);</span><br><span class="line">      // 7. UV_RUN_ONCE 模式下会再次检查timer</span><br><span class="line">      uv__run_timers(loop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = uv__loop_alive(loop);</span><br><span class="line">    if (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (loop-&gt;stop_flag != 0)</span><br><span class="line">    loop-&gt;stop_flag = 0;</span><br><span class="line"></span><br><span class="line">  return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码看起来很清晰，一一对应了我们的几个阶段。</p><ul><li><ol><li>首先进入timer阶段，如果我们的机器性能一般，那么进入timer阶段时，1毫秒可能已经过去了（<code>setTimeout(fn, 0)</code> 等价于<code>setTimeout(fn, 1)</code>），那么<code>setTimeout</code>的回调会首先执行。</li></ol></li><li><ol start="2"><li>如果没到一毫秒，那么我们可以知道，在check阶段，<code>setImmediate</code>的回调会先执行。</li></ol></li><li><ol start="3"><li>为什么<code>fs.readFile</code>回调里设置的，<code>setImmediate</code>始终先执行？因为<code>fs.readFile</code>的回调执行是在 <strong>poll</strong> 阶段，所以，接下来的 <strong>check</strong> 阶段会先执行 <code>setImmediate</code> 的回调。</li></ol></li><li><ol start="4"><li>我们可以注意到，<code>UV_RUN_ONCE</code>模式下，event loop会在开始和结束都去执行timer。</li></ol></li></ul><h2 id="理解-process-nextTick"><a href="#理解-process-nextTick" class="headerlink" title="理解 process.nextTick()"></a>理解 <code>process.nextTick()</code></h2><p>直到现在，我们才开始解释<code>process.nextTick()</code>。因为从技术上来说，它并不是event loop的一部分。相反的，<code>process.nextTick()</code>会把回调塞入<code>nextTickQueue</code>，<code>nextTickQueue</code>将在当前操作完成后处理，不管目前处于event loop的哪个阶段。</p><p>看看我们最初给的示意图，<code>process.nextTick()</code>不管在任何时候调用，都会在所处的这个阶段最后，在event loop进入下个阶段前，处理完所有<code>nextTickQueue</code>里的回调。</p><h3 id="process-nextTick-vs-setImmediate"><a href="#process-nextTick-vs-setImmediate" class="headerlink" title="process.nextTick() vs setImmediate()"></a><code>process.nextTick()</code> vs <code>setImmediate()</code></h3><p>两者看起来也类似，区别如下：</p><ul><li><ol><li><code>process.nextTick()</code>立即在本阶段执行回调；</li></ol></li><li><ol start="2"><li><code>setImmediate()</code>只能在 <strong>check</strong> 阶段执行回调。</li></ol></li></ul><h4 id="文章转载于here"><a href="#文章转载于here" class="headerlink" title="文章转载于here"></a>文章转载于<a href="https://github.com/creeperyang/blog/issues/26">here</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是事件循环（Event-loop）？&quot;&gt;&lt;a href=&quot;#什么是事件循环（Event-loop）？&quot; class=&quot;headerlink&quot; title=&quot;什么是事件循环（Event loop）？&quot;&gt;&lt;/a&gt;什么是事件循环（&lt;code&gt;Event loop&lt;/
      
    
    </summary>
    
      <category term="JS" scheme="https://github.com/QiqiM/categories/JS/"/>
    
    
      <category term="JS" scheme="https://github.com/QiqiM/tags/JS/"/>
    
      <category term="深入js系列" scheme="https://github.com/QiqiM/tags/%E6%B7%B1%E5%85%A5js%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>简单工厂模式</title>
    <link href="https://github.com/QiqiM/2020/06/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/06/02/设计模式/简单工厂模式/</id>
    <published>2020-06-02T08:18:03.000Z</published>
    <updated>2020-08-09T05:24:32.372Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>也可以叫静态工厂模式，用一个工厂对象创建同一类对象类的实例。现实生活中，用户在平台还是分等级的，角色不同，权限也不同。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>.role = options.role;</span><br><span class="line">        <span class="keyword">this</span>.permissions = options.permissions;</span><br><span class="line">    &#125;</span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="keyword">const</span> str = <span class="string">`you are <span class="subst">$&#123;<span class="keyword">this</span>.role&#125;</span>, permissions：<span class="subst">$&#123;<span class="keyword">this</span>.permissions.join(<span class="string">', '</span>)&#125;</span>`</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(role) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>[role] !== <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'param just can is admin or developer'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[role]();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    admin() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Role(&#123;</span><br><span class="line">            role: <span class="string">'admin'</span>,</span><br><span class="line">            permissions: [<span class="string">'write'</span>, <span class="string">'read'</span>, <span class="string">'add'</span>, <span class="string">'create'</span>]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    developer() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Role(&#123;</span><br><span class="line">            role: <span class="string">'admin'</span>,</span><br><span class="line">            permissions: [<span class="string">'develop'</span>, <span class="string">'push'</span>, <span class="string">'ask'</span>]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">const</span> xm = <span class="keyword">new</span> SampleFactory(<span class="string">'admin'</span>);</span><br><span class="line">xm.show();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xh = <span class="keyword">new</span> SampleFactory(<span class="string">'developer'</span>);</span><br><span class="line">xh.show();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xl = <span class="keyword">new</span> SampleFactory(<span class="string">'guest'</span>);</span><br><span class="line">xl.show();</span><br></pre></td></tr></table></figure><p>上例中，<code>sampleFactory</code> 就是一个简单工厂，2个实例对应不同的权限，调用工厂函数时，只需传递 <code>admin</code> 或 <code>developer</code> 就可获取对应的实例对象。</p><p>1.简单工厂函数适用场景</p><ul><li>正确传参，就可以获取所需要的对象，无需知道内部实现细节；</li><li>内部逻辑（工厂函数）通过传入参数判断实例化还是使用哪些类；</li><li>创建对象数量少（稳定），对象的创建逻辑不复杂；</li></ul><p>2.简单工厂函数不适用场景</p><ul><li>当需要添加新的类时，就需要修改工厂方法，这违背了开放封闭原则（OCP, 对扩展开放、对源码修改封闭）。正所谓成也萧何败也萧何。函数 <code>create</code> 内包含了所有创建对象（构造函数）的判断逻辑代码，如果要增加新的构造函数还需要修改函数 <code>create</code>（判断逻辑代码），当可选参数 <code>role</code> 变得更多时，那函数 <code>create</code> 的判断逻辑代码就变得臃肿起来，难以维护。</li><li>不适用创建多类对象；</li></ul><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>将实际创建对象工作推迟到子类当中，核心类就成了抽象类。这样添加新的类时就无需修改工厂方法，只需要将子类注册进工厂方法的原型对象中即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 基础人模板</span></span><br><span class="line">    name = <span class="string">"基础人模板"</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = props.name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 程序员</span></span><br><span class="line">    programmingLanguage = <span class="string">"JavaScript"</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props);</span><br><span class="line">      <span class="keyword">this</span>.programmingLanguage = props.programmingLanguage;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 司机</span></span><br><span class="line">    driverLicense = <span class="string">"无证老司机"</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props);</span><br><span class="line">      <span class="keyword">this</span>.driverLicense = props.driverLicense;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Chef</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 厨师</span></span><br><span class="line">    cookCard = <span class="string">"无证"</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props);</span><br><span class="line">      <span class="keyword">this</span>.cookCard = props.cookCard;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">PeopleFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> createProgrammer(props) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Programmer(props);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> createDriver(props) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Driver(props);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> createChef(props) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Chef(props);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> unlicensedDriver = PeopleFactory.createDriver(&#123;</span><br><span class="line">    name: <span class="string">"老司机"</span>,</span><br><span class="line">    driverLicense: <span class="string">"A1"</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(unlicensedDriver);  <span class="comment">// Driver &#123; name: '老司机', driverLicense: 'A1' &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;p&gt;也可以叫静态工厂模式，用一个工厂对象创建同一类对象类的实例。现实生活中，用户在平台还是分等级的，角色不同，权限也不同。&lt;/p&gt;
&lt;h4 id
      
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="创建型模式" scheme="https://github.com/QiqiM/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="https://github.com/QiqiM/2020/06/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/QiqiM/2020/06/02/设计模式/抽象工厂模式/</id>
    <published>2020-06-02T07:48:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>抽象工厂模式(Abstract Factory)就是通过类的抽象使得业务适用于一个产品类簇的创建，而不负责某一类产品的实例。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> produce(params) &#123;</span><br><span class="line">        <span class="keyword">this</span>.factory;</span><br><span class="line">        <span class="keyword">switch</span> (params.factory) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"NikeFactory"</span>:</span><br><span class="line">                <span class="keyword">this</span>.factory = NikeFactory;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"AdidasFactory"</span>:</span><br><span class="line">                <span class="keyword">this</span>.factory = AdidasFactory;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">this</span>.factory = NikeFactory;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回之前，可以做一些逻辑处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.factory.produce(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//nike工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NikeFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> produce(params) &#123;</span><br><span class="line">        <span class="keyword">this</span>.equipment;</span><br><span class="line">        <span class="keyword">switch</span> (params.factory) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"NikeTShirts"</span>:</span><br><span class="line">                <span class="keyword">this</span>.equipment = NikeTShirts;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"NikeWinterJacket"</span>:</span><br><span class="line">                <span class="keyword">this</span>.equipment = NikeWinterJacket;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">this</span>.equipment = NikeTShirts;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回之前，可以做nike工厂的逻辑处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">this</span>.equipment(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//adidas工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdidasFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> produce(params) &#123;</span><br><span class="line">        <span class="keyword">this</span>.equipment;</span><br><span class="line">        <span class="keyword">switch</span> (params.factory) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"AdidasShoes"</span>:</span><br><span class="line">                <span class="keyword">this</span>.equipment = AdidasShoes;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"AdidasCap"</span>:</span><br><span class="line">                <span class="keyword">this</span>.equipment = AdidasCap;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">this</span>.equipment = AdidasCap;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回之前，可以做adidas工厂的逻辑处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">this</span>.equipment(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//着装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clothing</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(params) &#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = params.factory;</span><br><span class="line">        <span class="keyword">this</span>.type = params.type;</span><br><span class="line">        <span class="keyword">this</span>.size = params.size;</span><br><span class="line">        <span class="keyword">this</span>.price = params.price;</span><br><span class="line">    &#125;</span><br><span class="line">    publish() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'publish: '</span> + <span class="keyword">this</span>.factory + <span class="string">','</span> + <span class="keyword">this</span>.type + <span class="string">',size '</span> + <span class="keyword">this</span>.size + <span class="string">',price '</span> + <span class="keyword">this</span>.price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//nike T 恤</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NikeTShirts</span> <span class="keyword">extends</span> <span class="title">Clothing</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//nike 冲锋衣</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NikeWinterJacket</span> <span class="keyword">extends</span> <span class="title">Clothing</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//adidas 鞋</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdidasShoes</span> <span class="keyword">extends</span> <span class="title">Clothing</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//adidas 帽子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdidasCap</span> <span class="keyword">extends</span> <span class="title">Clothing</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">let</span> nikeWinterJacket = AbstractFactory.produce(&#123;</span><br><span class="line">    factory: <span class="string">'NikeFactory'</span>,</span><br><span class="line">    type: <span class="string">'NikeWinterJacket'</span>,</span><br><span class="line">    size: <span class="string">'L'</span>,</span><br><span class="line">    color: <span class="string">'blue'</span>,</span><br><span class="line">    price: <span class="number">800</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(nikeWinterJacket <span class="keyword">instanceof</span> NikeWinterJacket); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">nikeWinterJacket.publish(); <span class="comment">//publish: NikeFactory,NikeWinterJacket,size L,price 800</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><code>抽象类</code>创建出的结果不是一个真实的对象实例，而是一个<code>类簇</code>，它指定了类的结构，这也就区别于<code>简单工厂模式</code>创建<code>单一对象</code>，<code>抽象工厂模式</code>创建<code>多类对象</code>。</p><p>通过抽象工厂，就可以创建某个类簇的产品，并且也可以通过<code>instanceof</code>来检查产品的类别，也具备该类簇所必备的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;p&gt;抽象工厂模式(Abstract Factory)就是通过类的抽象使得业务适用于一个产品类簇的创建，而不负责某一类产品的实例。&lt;/p&gt;
&lt;h4
      
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/QiqiM/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/QiqiM/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="js" scheme="https://github.com/QiqiM/tags/js/"/>
    
      <category term="创建型模式" scheme="https://github.com/QiqiM/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>win10安装Node版本管理器nvm</title>
    <link href="https://github.com/QiqiM/2020/05/20/win10%E5%AE%89%E8%A3%85Node%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%99%A8nvm/"/>
    <id>https://github.com/QiqiM/2020/05/20/win10安装Node版本管理器nvm/</id>
    <published>2020-05-20T04:10:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用nvm的原因"><a href="#使用nvm的原因" class="headerlink" title="使用nvm的原因"></a>使用nvm的原因</h4><p>开发公司项目和个人项目时，由于公司项目比较旧，Node版本比较低，但是自己做的项目安装的包，需要比较新的Node包，10以上的版本，所以就需要在同一台机器上安装多个版本的Node。经过搜索，决定使用<code>nvm</code>来做Node版本的管理。</p><h4 id="安装前需要先将之前安装的Node版本完全删除"><a href="#安装前需要先将之前安装的Node版本完全删除" class="headerlink" title="安装前需要先将之前安装的Node版本完全删除"></a>安装前需要先将之前安装的Node版本完全删除</h4><ul><li>Windows设置 –&gt; 应用–&gt; 找到Node–&gt;点击卸载</li><li>重启电脑（或者从任务管理器中杀死所有Node相关的进程）</li><li><p>寻找以下文件夹并删除他们。根据您安装的版本，这些文件可能存在也可能不存在：</p><ul><li>C:\Program Files (x86)\Nodejs</li><li>C:\Program Files\Nodejs</li><li>C:\Users{User}\AppData\Roaming\npm（或%appdata%\npm）</li><li>C:\Users{User}\AppData\Roaming\npm-cache（或%appdata%\npm-cache）</li></ul></li><li><p>检查%PATH%环境变量，确保没有引用Nodejs和npm的存在</p></li><li>重启（重启大法解决90%问题）</li></ul><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p><a href="https://github.com/coreybutler/nvm-windows/releases">nvm-window</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200520113014-image.png" alt="20200520113014imagepng" title="">                </div>                <div class="image-caption">20200520113014imagepng</div>            </figure><p>nvm安装位置，看自己决定，但是安装路径不能有空格，比如<code>Program Files</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200520113215-image.png" alt="20200520113215imagepng" title="">                </div>                <div class="image-caption">20200520113215imagepng</div>            </figure><p>安装的多版本Node放在哪里，也看个人喜好，可以修改</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200520113257-image.png" alt="20200520113257imagepng" title="">                </div>                <div class="image-caption">20200520113257imagepng</div>            </figure><h4 id="环境变量，安装好之后，环境变量会自动设置好"><a href="#环境变量，安装好之后，环境变量会自动设置好" class="headerlink" title="环境变量，安装好之后，环境变量会自动设置好"></a>环境变量，安装好之后，环境变量会自动设置好</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200520113431-image.png" alt="20200520113431imagepng" title="">                </div>                <div class="image-caption">20200520113431imagepng</div>            </figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在你的<code>nvm安装路径</code>下打开<code>cmd</code>或者<code>git bash</code>,在其他路径下打开，会报错<code>nvm： commond not found</code>（重启！重启！重启！）</p><blockquote><p>nvm -v    // 查看nvm版本，判断是否安装成功</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200520113838-image.png" alt="20200520113838imagepng" title="">                </div>                <div class="image-caption">20200520113838imagepng</div>            </figure><blockquote><p>nvm ls available        // 获取可获取的Node版本</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200520114039-image.png" alt="20200520114039imagepng" title="">                </div>                <div class="image-caption">20200520114039imagepng</div>            </figure><blockquote><p>nvm install 12.14.1      // 安装指定版本的Node</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200520114149-image.png" alt="20200520114149imagepng" title="">                </div>                <div class="image-caption">20200520114149imagepng</div>            </figure><blockquote><p>nvm use 12.14.1  // 使用指定版本Node</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200520114316-image.png" alt="20200520114316imagepng" title="">                </div>                <div class="image-caption">20200520114316imagepng</div>            </figure><blockquote><p>nvm list       // 列出本地已安装的Node版本</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200520114406-image.png" alt="20200520114406imagepng" title="">                </div>                <div class="image-caption">20200520114406imagepng</div>            </figure><blockquote><p>nvm uninstall 10.15.3      // 卸载指定版本Node</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200520130130-image.png" alt="uninstall" title="">                </div>                <div class="image-caption">uninstall</div>            </figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>nvm -v</td><td>查看nvm版本，判断是否安装成功</td></tr><tr><td>nvm ls available</td><td>获取可获取的Node版本</td></tr><tr><td>nvm install 12.14.1</td><td>安装指定版本的Node</td></tr><tr><td>nvm use 12.14.1</td><td>使用指定版本Node</td></tr><tr><td>nvm uninstall 10.15.3</td><td>卸载指定版本Node</td></tr></tbody></table><h4 id="使用nvm引发的问题"><a href="#使用nvm引发的问题" class="headerlink" title="使用nvm引发的问题"></a>使用nvm引发的问题</h4><ul><li>全局安装的包找不到了，我之前有修改过我的全局包安装位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;F:\nodejs\node global&quot;</span><br><span class="line">npm config set cache &quot;F:\nodejs\node cache&quot;</span><br></pre></td></tr></table></figure><p>因为卸载之前Node的时候，以前设置的Node环境变量也被清掉了，需要重新设置</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200520143623-image.png" alt="system path" title="">                </div>                <div class="image-caption">system path</div>            </figure><p>再增加一个环境变量</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200520143642-image.png" alt="NODE_PATH" title="">                </div>                <div class="image-caption">NODE_PATH</div>            </figure><p>设置完之后，重开gitbash</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200520143842-image.png" alt="git_bash" title="">                </div>                <div class="image-caption">git_bash</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用nvm的原因&quot;&gt;&lt;a href=&quot;#使用nvm的原因&quot; class=&quot;headerlink&quot; title=&quot;使用nvm的原因&quot;&gt;&lt;/a&gt;使用nvm的原因&lt;/h4&gt;&lt;p&gt;开发公司项目和个人项目时，由于公司项目比较旧，Node版本比较低，但是自己做的项目安装的包，
      
    
    </summary>
    
      <category term="Node" scheme="https://github.com/QiqiM/categories/Node/"/>
    
    
      <category term="Node" scheme="https://github.com/QiqiM/tags/Node/"/>
    
      <category term="nvm" scheme="https://github.com/QiqiM/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>蚂蚁金服单笔转账</title>
    <link href="https://github.com/QiqiM/2020/05/19/%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E5%8D%95%E7%AC%94%E8%BD%AC%E8%B4%A6/"/>
    <id>https://github.com/QiqiM/2020/05/19/蚂蚁金服单笔转账/</id>
    <published>2020-05-19T04:00:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="单笔转账签约"><a href="#单笔转账签约" class="headerlink" title="单笔转账签约"></a>单笔转账签约</h4><p>首先单笔转账这个功能需要和<code>支付宝签约</code>才可以使用，而且是注册商户<code>90天</code>以上的商家才可以申请签约，另外这个接口是资金累类接口，需要公钥证书加密，如果你查到的文档或者仓库使用的RSA加密的，可以不用看了，纯属浪费时间。如何申请公钥证书，可以参考<a href="https://opendocs.alipay.com/open/291/105972/" target="_blank" rel="noopener">支付宝的公钥证书加签文档</a></p><h4 id="以下内容参照我-github的alipay仓库-查看"><a href="#以下内容参照我-github的alipay仓库-查看" class="headerlink" title="以下内容参照我 github的alipay仓库 查看"></a>以下内容参照我 <a href="https://github.com/QiqiM/alipay">github的alipay仓库</a> 查看</h4><h4 id="先使用java工具生成支付宝根证书alipay-root-cert-sn和应用证书app-cert-sn-资金类接口这两个参数必传"><a href="#先使用java工具生成支付宝根证书alipay-root-cert-sn和应用证书app-cert-sn-资金类接口这两个参数必传" class="headerlink" title="先使用java工具生成支付宝根证书alipay_root_cert_sn和应用证书app_cert_sn,资金类接口这两个参数必传"></a>先使用java工具生成支付宝根证书alipay_root_cert_sn和应用证书app_cert_sn,资金类接口这两个参数必传</h4><h4 id="安装node-sdk"><a href="#安装node-sdk" class="headerlink" title="安装node sdk"></a>安装node sdk</h4><blockquote><p>npm i alipay-sdk –save</p></blockquote><h4 id="参照示例Node-Alipay-index调用单笔转账接口"><a href="#参照示例Node-Alipay-index调用单笔转账接口" class="headerlink" title="参照示例Node/Alipay/index调用单笔转账接口"></a>参照示例Node/Alipay/index调用单笔转账接口</h4><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><ol><li><code>app_auth_token</code>不是必传参数，可以不获取</li></ol></li><li><ol start="2"><li>签名加密的密钥不是<code>RSA密钥</code>，而是在<code>CSR文件夹</code>下，你使用支付宝工具生成的<code>域名私钥</code></li></ol></li><li><ol start="3"><li>使用<code>version3.0.8</code>版本的包，需要加签一个参数 <code>sdkVersion: &#39;alipay-sdk-nodejs-3.0.8&#39;</code></li></ol></li><li><ol start="4"><li>我的所有密钥数据都<code>TEST</code>，需要自行去支付宝申请证书验证</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;单笔转账签约&quot;&gt;&lt;a href=&quot;#单笔转账签约&quot; class=&quot;headerlink&quot; title=&quot;单笔转账签约&quot;&gt;&lt;/a&gt;单笔转账签约&lt;/h4&gt;&lt;p&gt;首先单笔转账这个功能需要和&lt;code&gt;支付宝签约&lt;/code&gt;才可以使用，而且是注册商户&lt;code&gt;90天&lt;
      
    
    </summary>
    
      <category term="支付" scheme="https://github.com/QiqiM/categories/%E6%94%AF%E4%BB%98/"/>
    
    
      <category term="蚂蚁金服" scheme="https://github.com/QiqiM/tags/%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D/"/>
    
      <category term="支付对接" scheme="https://github.com/QiqiM/tags/%E6%94%AF%E4%BB%98%E5%AF%B9%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>CSRF攻击是什么？如何防范？</title>
    <link href="https://github.com/QiqiM/2020/05/13/CSRF%E6%94%BB%E5%87%BB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%A6%82%E4%BD%95%E9%98%B2%E8%8C%83%EF%BC%9F/"/>
    <id>https://github.com/QiqiM/2020/05/13/CSRF攻击是什么？如何防范？/</id>
    <published>2020-05-13T04:00:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、CSRF攻击是什么？如何防范？"><a href="#1、CSRF攻击是什么？如何防范？" class="headerlink" title="1、CSRF攻击是什么？如何防范？"></a>1、CSRF攻击是什么？如何防范？</h4><blockquote><p>CSRF(Cross-site request forgery), 中文名称：跨站请求伪造。攻击者盗用了你的身份，以你的名义发送恶意请求。</p></blockquote><p>CSRF能做的事情包括：以你的名义发送邮件，发消息，盗取你的账号，在受害者不知情的情况下，以受害者名义伪造请求发送给受攻击站点，从而在受害者并未授权的情况下执行受害者权限下的各种操作。</p><a id="more"></a><h4 id="2、CSRF攻击的原理"><a href="#2、CSRF攻击的原理" class="headerlink" title="2、CSRF攻击的原理"></a>2、CSRF攻击的原理</h4><ul><li>正常网站A,存在CSRF漏洞;恶意网站B含有攻击性代码，用来对网站A进行攻击。</li><li>正常网站A，有两个用户user01(受害者)和user02(攻击者)。</li><li>user02(攻击者)清楚的了解网站A,并创建了具有攻击性的网站B(钓鱼网站)。</li><li>user01(受害者)登录了网站A后，在自身的session未失效的情况下，访问了恶意网站B.</li></ul><h4 id="3、-CSRF攻击的过程"><a href="#3、-CSRF攻击的过程" class="headerlink" title="3、 CSRF攻击的过程"></a>3、 CSRF攻击的过程</h4><ul><li>1.用户user01通过浏览器访问正常网站A,输入用户名和密码请求登录验证</li><li>2.登录验证通过后，网站A保存user01的session,并将对应的cookie返回给user01的浏览器。这样user01就可以在网站A执行自身权限下的各种请求(操作)，比如取钱，发表文章，发表评论等</li><li>3.user01在未退出网站A的时候，在同一浏览器，点击访问了恶意网站B(钓鱼网站)，此时user02拿到user01的认证信息或者登录状态</li><li>4.网站B是user02创建的，user02清楚的知道网站A的工作模式，网站B通过攻击性代码访问网站A（携带的是user01的cookie)，执行某些并非user01授意的操作。</li><li>5.网站A并不知道这个恶意请求是从网站B发出的，因此，就会根据user01在网站A中具备的相关权限，执行权限下的各种操作。这样，就在user01不知情的情况下，user02假冒了user01,执行了具备user01用户身份才可以执行的操作</li></ul><h4 id="4、CSRF攻击实例"><a href="#4、CSRF攻击实例" class="headerlink" title="4、CSRF攻击实例"></a>4、CSRF攻击实例</h4><p>假设，现在有一个受害者Bob，在网站<code>http://bank.expample/</code>有一大笔存款。<br>Bob通过银行的网站发送请求<code>http://bank.example/withdraw?account=Bob&amp;amount=100000&amp;to=Bob2</code>,Bob将100000的存款转账到Bob2的账户下，通常情况下，该请求发送到银行网站后，服务器会先验证该请求是否来自一个合法的session,该session的用户Bob已经成功登录<br>黑客Hack自己在该银行也有自己的账户，他知道银行转账操作的URL。Hack可以自己发送一个请求给银行：<code>http://bank.example/withdraw?account=Bob&amp;amount=100000&amp;to=Hack</code>,但是这个请求来自Hack，并非Bob,他不能通过安全验证，因此该请求不会起作用。这时，Hack香到使用CSRF的攻击方式，他先自己做一个网站B,在网站B中放入如下代码：<code>src=&quot;http://bank.example/withdraw?account=Bob&amp;amount=100000&amp;to=Hack&quot;</code>，并通过广告等方式诱使Bob访问他的网站。当Bob访问网站B的时候，上述URL就会从Bob的浏览器发向银行，并且这个请求会附带Bob浏览器的cookie一起发现银行服务器。当然，大多数情况下，该请求会失败（session有有效时间），因为银行网站需要要求Bob的认证信息。<br>但是如果Bob当时恰巧刚访问银行网站后不久，他的浏览器与银行网站的session尚未过期（比如Bob在一个窗口还未退出银行网站），而浏览器中的cookie就含有Bob的认证信息，银行网站的对应session数据还在。<br>这时悲剧就发生了，这个URL会得到银行服务器的响应，钱将从Bob的账号转移到Hack的账号，而Bob并不知情。等事后Bob发现账户钱变少了，去银行查询流水，却发现是他自己转移账户的钱，没有任何被攻击的痕迹（我搞我自己？人类迷惑行为）<br>在这个示例中，银行网站错误的认为，这个转账时Bob本人执行的</p><h4 id="5、CSRF攻击的对象"><a href="#5、CSRF攻击的对象" class="headerlink" title="5、CSRF攻击的对象"></a>5、CSRF攻击的对象</h4><p>从以上的例子可知，CSRF攻击是黑客借助受害者的cookie伪造请求，骗取服务器的信任。黑客所能做的就是给服务器发送伪造请求，改变请求时的参数。所以我们要保护的对象是那些可以直接产生数据改变的服务，而对于读取数据的服务。则不需要进行CSRF的保护。比如银行系统中转账的请求会直接改变账户的金额，会遭到CSRF攻击，需要保护，而查询余额是对金额的读取操作，不会改变数据，无需保护</p><h4 id="6、CSRF漏洞检测"><a href="#6、CSRF漏洞检测" class="headerlink" title="6、CSRF漏洞检测"></a>6、CSRF漏洞检测</h4><p>检测CSRF漏洞是一项比较繁琐的工作，最简单的一个方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。<br>随着对CSRF漏洞研究的不断深入，出现了一些针对CSRF漏洞进行检测的工具，如<code>CSRFTester</code>,<code>CSRE Request Builder</code>等。</p><p>CSRFTester工具的测试原理大概是这样的，使用代理抓取我们在浏览器中访问过的所有的连接以及所有的表单等信息，通过在CSRFTester中修改相应的表单等信息，重新提交，相当于一次伪造客户端请求，如果修测试的请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击</p><h4 id="7、防范CSRF攻击的几种策略"><a href="#7、防范CSRF攻击的几种策略" class="headerlink" title="7、防范CSRF攻击的几种策略"></a>7、防范CSRF攻击的几种策略</h4><p>防范原理：防范CSRF攻击，其实本质上就是<strong>要求网站能够识别出哪些请求是非正常用户主动发起的</strong>。这就要求我们<strong>在请求中嵌入一些额外的授权数据，让网站服务器能够区分出这些未授权的请求</strong>。比如在请求参数中加一个字段，这个字段的值从登录用户的Cookie或者页面中获取（这个值需要是随机的，无规律可循）。攻击者伪造请求的时候无法获取页面中与登录用户有关的一个随机值或者cookie中的内容的。因此就可以避免这种攻击</p><p>目前防御CSRF攻击主要有以下几种策略</p><ul><li><ol><li>验证HTTP Referer字段</li></ol></li><li><ol start="2"><li>使用验证码（关键页面加上验证码验证，这种方法对用户不友好，不推荐）</li></ol></li><li><ol start="3"><li>在请求地址中加入token并验证</li></ol></li><li><ol start="4"><li>在HTTP头中自定义属性并验证</li></ol></li></ul><h5 id="验证HTTP-Referer字段"><a href="#验证HTTP-Referer字段" class="headerlink" title="验证HTTP Referer字段"></a>验证HTTP Referer字段</h5><p>HTTP头中的Referer字段记录该请求的来源地址。比如访问<code>http://bank.example/withdraw?account=Bob&amp;amount=100000&amp;to=Hack</code>，用户必须先登录<code>http://bank.example</code>,然后通过该网站页面的转账按钮来触发转账事件。这时，该转账请求的Referer值就会是转账按钮所在页面的URL,通常以bank.example域名开头的地址。</p><p>而如果黑客要对银行网站实施CSRF攻击，他只能在自己的网站构造请求，当用户通过黑客的网站发送请求到银行网站时，该请求的Referer是指向黑客自己的网站。</p><p>因此要防御CSRF攻击，银行只需要对转账请求验证其Referer值，如果以bank.example开头的域名，则说明该请求是来自银行网站自己的请求，是合法的，如果Referer是其他网站的话，则有可能是黑客的CSRF攻击，拒绝该请求。</p><blockquote><p>优点： 简单易行，只需要在最后给所有敏感的请求统一增加一个拦截器来检查Referer的值就可以。特别对于当前现有的系统，不需要改变当前系统已有代码，没有风险，简单便捷</p></blockquote><blockquote><p>缺点： 这种方法并非万无一失 。首先，Referer的值是由浏览器提供的，但是每个浏览器对不Referer的具体实现会有差别，并不能保证浏览器自身没有安全漏洞。验证Referer的值，把安全性都依赖于浏览器来保障，不安全。而已已有一些方法可以篡改Referer值。另外，用户会因为隐私问题，设置浏览器不允许发送Referer值,这样服务端的Referer验证就没有了意义</p></blockquote><h5 id="在请求地址中添加token并验证"><a href="#在请求地址中添加token并验证" class="headerlink" title="在请求地址中添加token并验证"></a>在请求地址中添加token并验证</h5><p>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都存在于 <code>cookie</code> 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户的 <code>cookie</code>来通过安全验证。</p><p>要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 中。</p><p>可以在 <code>HTTP</code> 请求中以参数的形式加入一个随机产生的 <code>token</code>，并在服务器端建立一个拦截器来验证这个<code>token</code>，如果请求中没有 <code>token</code>或者 <code>token</code> 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求<br>这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 <code>session</code> 之中，然后在每次请求时把 <code>token</code> 从 <code>session</code> 中拿出，与请求中的<code>token</code> 进行比对。</p><p>对于 <code>GET</code> 请求，<code>token</code> 将附在请求地址之后，这样 URL 就变成 <code>http://url?csrftoken=tokenvalue</code> 。</p><p>而对于 <code>POST</code> 请求，要在 <code>form</code> 表单加上：</p><p><code>&lt;input type=”hidden” name=”csrftoken” value=”tokenvalue”/&gt;</code><br>该方法也有一个缺点是难以保证 token 本身的安全。</p><p>因为即使是 POST 请求的 token，黑客的网站也同样可以通过 Referer 的值来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。</p><p>如果想保证 token 本身的安全，可以考虑使用动态 token，也就是每次请求都使用不同的动态 token。</p><h5 id="在-HTTP-头中自定义属性并验证"><a href="#在-HTTP-头中自定义属性并验证" class="headerlink" title="在 HTTP 头中自定义属性并验证"></a>在 HTTP 头中自定义属性并验证</h5><p>这种方法也是使用 <code>token</code> 进行验证，和上一种方法不同的是，这里并不是把 <code>token</code> 以参数的形式置于 <code>HTTP 请求</code>之中，而是把它放到<code>HTTP 头中自定义的属性里</code>。</p><p>通过 <code>XMLHttpRequest</code> 对象，可以一次性给所有该类请求加上 <code>csrftoken</code> 这个 <code>HTTP 头属</code>性，并把 <code>token</code> 值放入其中。</p><p>通过 <code>XMLHttpRequest</code> 请求的地址不会被记录到浏览器的地址栏，也<code>不用担心 token 会透过 Referer 泄露到其他网站中去</code>。</p><p>然而，这种方法的<code>局限性非常大</code>。<code>XMLHttpRequest</code> 请求通常用于 Ajax 对页面局部的异步刷新。</p><p>并非所有的请求都适合用 Ajax 来发起，而且通过该类请求得到的页面不能被浏览器所记录，影响前进、后退、刷新、收藏等操作，给用户带来了不便。</p><p>另外，对于没有进行 CSRF 防护的旧系统来说，如果采用这种方法来进行防护，需要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，工作量无疑是巨大的</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1、CSRF攻击是什么？如何防范？&quot;&gt;&lt;a href=&quot;#1、CSRF攻击是什么？如何防范？&quot; class=&quot;headerlink&quot; title=&quot;1、CSRF攻击是什么？如何防范？&quot;&gt;&lt;/a&gt;1、CSRF攻击是什么？如何防范？&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;CSRF(Cross-site request forgery), 中文名称：跨站请求伪造。攻击者盗用了你的身份，以你的名义发送恶意请求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CSRF能做的事情包括：以你的名义发送邮件，发消息，盗取你的账号，在受害者不知情的情况下，以受害者名义伪造请求发送给受攻击站点，从而在受害者并未授权的情况下执行受害者权限下的各种操作。&lt;/p&gt;
    
    </summary>
    
      <category term="web安全" scheme="https://github.com/QiqiM/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="web安全" scheme="https://github.com/QiqiM/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="名词理解" scheme="https://github.com/QiqiM/tags/%E5%90%8D%E8%AF%8D%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>深入理解js原型链</title>
    <link href="https://github.com/QiqiM/2020/04/26/%E6%B7%B1%E5%85%A5js%E7%B3%BB%E5%88%97/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3js%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://github.com/QiqiM/2020/04/26/深入js系列/深入理解js原型链/</id>
    <published>2020-04-26T13:58:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><blockquote><p>每个函数对象（构造函数constructor）都有一个原型对象属性（prototype），实例对象没有，指向<code>prototype {}</code>对象，原型对象都包含一个指向构造函数的指针。实例对象包含一个指向原型对象的内部指针<code>[[prototype]]</code>，在浏览器和Node中实现为<code>__proto__</code>。一图胜千言，直接上图</p></blockquote><a id="more"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200214105542-image.png" alt="原型链1" title="">                </div>                <div class="image-caption">原型链1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200428104203-image.png" alt="原型链2" title="">                </div>                <div class="image-caption">原型链2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200309115309-image.png" alt="原型链3--经典宝藏" title="">                </div>                <div class="image-caption">原型链3--经典宝藏</div>            </figure><h4 id="在浏览器中看最后一张图的输出"><a href="#在浏览器中看最后一张图的输出" class="headerlink" title="在浏览器中看最后一张图的输出"></a>在浏览器中看最后一张图的输出</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(mycat)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">-Cp1: ""</span></span><br><span class="line"><span class="comment">constructor:f()</span></span><br><span class="line"><span class="comment">__proto__: native code</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">mycat.__proto__</span><br><span class="line"><span class="comment">// &#123;Cp1: "", constructor: f(),__proto__: Object&#125;</span></span><br><span class="line"></span><br><span class="line">Cat.prototype</span><br><span class="line"><span class="comment">// &#123;Cp1: "", constructor: f(),__proto__: Object&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mycat.__proto__ === Cat.prototype)  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">Cat.prototype.constructor</span><br><span class="line"><span class="comment">// f () &#123;&#125; ==&gt; 指向函数对象本身（构造函数）</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200428112245-image.png" alt="__proto__和prototype关系" title="">                </div>                <div class="image-caption">__proto__和prototype关系</div>            </figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mycat.__proto__                  <span class="comment">// 函数对象</span></span><br><span class="line"></span><br><span class="line">mycat.__proto__.__proto__        <span class="comment">// Objec 函数对象</span></span><br><span class="line"></span><br><span class="line">mycat.__proto__.__proto__.__proto__   <span class="comment">// null</span></span><br></pre></td></tr></table></figure><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200428113148-image.png" alt="__proto__和prototype关系" title="">                </div>                <div class="image-caption">__proto__和prototype关系</div>            </figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.__proto__                 <span class="comment">// Function.prototype </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.__proto__.__proto__       <span class="comment">// 等价与 Function.prototype.__proto__ </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.__proto === <span class="built_in">Function</span>.prototype </span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.__proto__  === <span class="built_in">Object</span>.prototype</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200428114152-image.png" alt="Object原型查看" title="">                </div>                <div class="image-caption">Object原型查看</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200428114655-image.png" alt="Object原型查看" title="">                </div>                <div class="image-caption">Object原型查看</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;每个函数对象（构造函数constructor）都有一个原型对象属性（prototype），实例对象没有，指向&lt;code&gt;prototype {}&lt;/code&gt;对象，原型对象都包含一个指向构造函数的指针。实例对象包含一个指向原型对象的内部指针&lt;code&gt;[[prototype]]&lt;/code&gt;，在浏览器和Node中实现为&lt;code&gt;__proto__&lt;/code&gt;。一图胜千言，直接上图&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JS" scheme="https://github.com/QiqiM/categories/JS/"/>
    
    
      <category term="JS" scheme="https://github.com/QiqiM/tags/JS/"/>
    
      <category term="深入js系列" scheme="https://github.com/QiqiM/tags/%E6%B7%B1%E5%85%A5js%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>模拟实现js的call和apply</title>
    <link href="https://github.com/QiqiM/2020/04/07/%E6%B7%B1%E5%85%A5js%E7%B3%BB%E5%88%97/%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0js%E7%9A%84call%E5%92%8Capply/"/>
    <id>https://github.com/QiqiM/2020/04/07/深入js系列/模拟实现js的call和apply/</id>
    <published>2020-04-07T02:46:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="call方法"><a href="#call方法" class="headerlink" title="call方法"></a>call方法</h4><blockquote><p>call() 方法在使用一个指定的this和若干个指定的参数值的前提下调用某个函数或方法。</p></blockquote><a id="more"></a><h4 id="call的使用"><a href="#call的使用" class="headerlink" title="call的使用"></a>call的使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">*   call语法  </span></span><br><span class="line"><span class="comment">*   function.call(thisArg, arg1, arg2, ...)</span></span><br><span class="line"><span class="comment">*   thisArg 可选参数，在function函数运行时的this值。注意 this可能不是该方法看到的实际值：如果这个函数处于非严格模式，则指定</span></span><br><span class="line"><span class="comment">*   为null或者undefined时会自动替换为指向全局对象，原始值会被包装</span></span><br><span class="line"><span class="comment">*   (数字，字符串，布尔值)的this会执行该原始值的自动包装对象</span></span><br><span class="line"><span class="comment">*   </span></span><br><span class="line"><span class="comment">*   arg1,arg2... 指定的参数列表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> reply = [<span class="keyword">this</span>.animal, <span class="string">'typically sleep between'</span>, <span class="keyword">this</span>.sleepDuration].join(<span class="string">' '</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    animal: <span class="string">'cats'</span>,</span><br><span class="line">    sleepDuration: <span class="string">'12 and 16 huors'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet.call(obj);          <span class="comment">// cat typically sleep between 12 and 16 hours</span></span><br></pre></td></tr></table></figure><h4 id="call方法的实现"><a href="#call方法的实现" class="headerlink" title="call方法的实现"></a>call方法的实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.callFn = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 只有function类型才可以调用call方法</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'must be function'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有context时，指定为context，没有指向全局对象，浏览器里为</span></span><br><span class="line">    <span class="comment">// windows，node下需要修改为global</span></span><br><span class="line">    context = context ? <span class="built_in">Object</span>(context) : <span class="built_in">window</span></span><br><span class="line">    <span class="comment">// context = context ? Object(context) : global</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时的this为调用callFn方法的函数的this </span></span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出函数执行需要的参数</span></span><br><span class="line">    <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> r = context.fn(args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> context.fn</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        value: <span class="keyword">this</span>.value,</span><br><span class="line">        name: name,</span><br><span class="line">        age: age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar.callFn(<span class="literal">null</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar.callFn(obj, <span class="string">'kevin'</span>, <span class="number">18</span>));</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// Object &#123;</span></span><br><span class="line"><span class="comment">//    value: 1,</span></span><br><span class="line"><span class="comment">//    name: 'kevin',</span></span><br><span class="line"><span class="comment">//    age: 18</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h4 id="apply方法"><a href="#apply方法" class="headerlink" title="apply方法"></a>apply方法</h4><blockquote><p>call()方法的作用和 apply() 方法类似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* func.apply(thisArg, [argsArray])</span></span><br><span class="line"><span class="comment">参数</span></span><br><span class="line"><span class="comment">thisArg</span></span><br><span class="line"><span class="comment">必选的。在 func 函数运行时使用的 this 值。请注意，this可能不是该方法看到的实际值：</span></span><br><span class="line"><span class="comment">如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对</span></span><br><span class="line"><span class="comment">象，原始值会被包装。</span></span><br><span class="line"><span class="comment">argsArray</span></span><br><span class="line"><span class="comment">可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 func 函数。如果</span></span><br><span class="line"><span class="comment">该参数的值为 null 或  undefined，则表示不需要传入任何参数。从ECMAScript 5 开始可</span></span><br><span class="line"><span class="comment">以使用类数组对象。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.val = <span class="string">'window'</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"> val: <span class="string">'obj'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVal</span>(<span class="params">p1, p2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p1, p2)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.val)</span><br><span class="line">&#125;</span><br><span class="line">getVal(<span class="string">'param1'</span>, <span class="string">'param2'</span>)       <span class="comment">// param1,param2,window</span></span><br><span class="line">getVal.apply(obj, [<span class="string">'param1'</span>, <span class="string">'param2'</span>])   <span class="comment">// param1,param2,obj</span></span><br></pre></td></tr></table></figure><h4 id="apply实现"><a href="#apply实现" class="headerlink" title="apply实现"></a>apply实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.applyFn = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Error'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">    <span class="comment">// context = context || global    // node环境下</span></span><br><span class="line">    context.fn = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">      result = context.fn(...arguments[<span class="number">1</span>])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = context.fn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> context.fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// test node环境测试</span></span><br><span class="line">global.val = <span class="string">'window'</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"> val: <span class="string">'obj'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVal</span>(<span class="params">p1, p2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p1, p2)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.val)</span><br><span class="line">&#125;</span><br><span class="line">getVal(<span class="string">'param1'</span>, <span class="string">'param2'</span>) </span><br><span class="line">getVal.apply(obj, [<span class="string">'param1'</span>, <span class="string">'param2'</span>])</span><br></pre></td></tr></table></figure><p><a href="https://juejin.im/post/5c4592faf265da617265c60b#heading-2" target="_blank" rel="noopener">参考文章: https://juejin.im/post/5c4592faf265da617265c60b#heading-2</a><br><a href="https://segmentfault.com/a/1190000017206223" target="_blank" rel="noopener">参考文章: https://segmentfault.com/a/1190000017206223</a><br><a href="https://github.com/mqyqingfeng/Blog/issues/11">参考文章: https://github.com/mqyqingfeng/Blog/issues/11</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;call方法&quot;&gt;&lt;a href=&quot;#call方法&quot; class=&quot;headerlink&quot; title=&quot;call方法&quot;&gt;&lt;/a&gt;call方法&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;call() 方法在使用一个指定的this和若干个指定的参数值的前提下调用某个函数或方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JS" scheme="https://github.com/QiqiM/categories/JS/"/>
    
    
      <category term="JS" scheme="https://github.com/QiqiM/tags/JS/"/>
    
      <category term="深入js系列" scheme="https://github.com/QiqiM/tags/%E6%B7%B1%E5%85%A5js%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>模拟实现js的new</title>
    <link href="https://github.com/QiqiM/2020/03/15/%E6%B7%B1%E5%85%A5js%E7%B3%BB%E5%88%97/%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0js%E7%9A%84new/"/>
    <id>https://github.com/QiqiM/2020/03/15/深入js系列/模拟实现js的new/</id>
    <published>2020-03-15T09:01:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="new是什么"><a href="#new是什么" class="headerlink" title="new是什么"></a>new是什么</h4><blockquote><p>一句话介绍<strong>new</strong> ：<strong>new</strong>运算符创建一个用户自定义的对象类型的实例，或者具有构造函数的内置对象类型之一。看下下面的代码来了解new操作符都做了什么事情</p></blockquote><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Class (constructor)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.habit = <span class="string">'watch tv'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个函数都有prototype对象属性</span></span><br><span class="line"><span class="comment">// 在类的原型上挂载属性和方法，挂载载原型上，每个实例都可以调用，并且不会每个实例都挂载相同的属性和方法</span></span><br><span class="line">Person.prototype.strLength = <span class="number">60</span></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'I am '</span>+ <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">"yato"</span>, <span class="number">50</span>)</span><br><span class="line">person.sayName();</span><br><span class="line"><span class="built_in">console</span>.log(person)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200315154922-image.png" alt="20200315154922imagepng" title="">                </div>                <div class="image-caption">20200315154922imagepng</div>            </figure><h4 id="进一步理解new"><a href="#进一步理解new" class="headerlink" title="进一步理解new"></a>进一步理解new</h4><blockquote><p>从上面这个例子中，我们可以看到，实例person可以</p><ul><li>访问到Person构造函数里的属性</li><li>访问到Person.prototype中的属性</li></ul></blockquote><h4 id="接下来模拟实现一个类似new的newFake，使用方式如下"><a href="#接下来模拟实现一个类似new的newFake，使用方式如下" class="headerlink" title="接下来模拟实现一个类似new的newFake，使用方式如下"></a>接下来模拟实现一个类似new的<code>newFake</code>，使用方式如下</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">arguments</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用new</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="built_in">arguments</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用newFake</span></span><br><span class="line"><span class="keyword">let</span> person = newFake(Person,<span class="built_in">arguments</span>)</span><br></pre></td></tr></table></figure><h4 id="初步实现"><a href="#初步实现" class="headerlink" title="初步实现"></a>初步实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newFake</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> Constructor = [].shift.call(<span class="built_in">arguments</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> Constructor !== <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'newOperator function the first param must be a function'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 将新建对象的[[prototype]]属性指向到构造函数的prototype属性</span></span><br><span class="line">    obj.__proto__ = Constructor.prototype</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改this指向到obj</span></span><br><span class="line">    Constructor.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.habit = <span class="string">'watch tv'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个函数都有prototype对象属性</span></span><br><span class="line"><span class="comment">// 在类的原型上挂载属性和方法，挂载载原型上，每个实例都可以调用，并且不会每个实例都挂载相同的属性和方法</span></span><br><span class="line">Person.prototype.strLength = <span class="number">60</span></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'I am '</span>+ <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">const</span> person = newFake(Person,<span class="string">"yato"</span>, <span class="number">50</span>)</span><br><span class="line">person.sayName();</span><br><span class="line"><span class="built_in">console</span>.log(person)</span><br></pre></td></tr></table></figure><h4 id="返回值处理"><a href="#返回值处理" class="headerlink" title="返回值处理"></a>返回值处理</h4><blockquote><p>如果构造函数有返回值的情况</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.strLength = <span class="number">60</span></span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"> name: name,</span><br><span class="line">        habit: <span class="string">'game'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="string">'yato'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// yato</span></span><br><span class="line"><span class="built_in">console</span>.log(person.habit) <span class="comment">// game</span></span><br><span class="line"><span class="built_in">console</span>.log(person.strength) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>在这个例子中，构造函数返回了一个对象，在实例person中只能访问返回对象中的属性，而且还要注意一点，这里我们是返回一个对象，假设我们只返回一个基本类型值呢，看下面的例子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.strLength = <span class="number">60</span></span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">'good job'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="string">'yato'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(person.habit) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(person.strength) <span class="comment">// 60</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age) <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><blockquote><p>结果和正常new实例，无返回值的时候表现是一样的！可以得出结论：new操作最后一步，需要判断一返回值是否是一个对象，如果是一个对象就返回这个对象，如果不是对象就返回我们new内部的实例对象</p></blockquote><h4 id="第二版的new实现"><a href="#第二版的new实现" class="headerlink" title="第二版的new实现"></a>第二版的new实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newFake</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> Constructor = [].shift.call(<span class="built_in">arguments</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> Constructor !== <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'newOperator function the first param must be a function'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ES6 new.target 是指向构造函数</span></span><br><span class="line">    newFake.target = ctor;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 将新建对象的[[prototype]]属性指向到构造函数的prototype属性</span></span><br><span class="line">    obj.__proto__ = Constructor.prototype</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改this指向到obj</span></span><br><span class="line"><span class="keyword">let</span> ret = Constructor.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断返回值是否为对象 Object(包含Functoin, Array, Date, RegExg, Error)都会直接返回这些值。</span></span><br><span class="line">    <span class="comment">// 这些类型中合并起来只有Object和Function两种类型 typeof null 也是'object'所以要不等于null，排除 // null</span></span><br><span class="line">    <span class="keyword">let</span> isObject = <span class="keyword">typeof</span> ret === <span class="string">'object'</span> &amp;&amp; ret !== <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> isFunction = <span class="keyword">typeof</span> ret === <span class="string">'function'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isObject || isFunction)&#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结一下new做了什么"><a href="#总结一下new做了什么" class="headerlink" title="总结一下new做了什么"></a>总结一下new做了什么</h4><ul><li>创建了一个全新的对象</li><li>这个对象会被执行实例<strong>[[prototype]]属性</strong>到<strong>Class</strong>的<strong><code>prototype</code></strong>对象属性的链接（原型链）</li><li>生成的新对象会成为构造函数的调用的<strong>this</strong>(修改this指向)</li><li>通过new创建的每个<strong>实例对象</strong>最终将被<strong>[[prototype]]</strong>链接到构造函数的<strong>prototype</strong>对象上</li><li>如果函数没有返回对象类型（包含<code>Function</code>,<code>Array</code>,<code>Date</code>,<code>RegExg</code>,<code>Error</code>）,那么new表达式中的函数会自动返回这个新的对象</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;new是什么&quot;&gt;&lt;a href=&quot;#new是什么&quot; class=&quot;headerlink&quot; title=&quot;new是什么&quot;&gt;&lt;/a&gt;new是什么&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;一句话介绍&lt;strong&gt;new&lt;/strong&gt; ：&lt;strong&gt;new&lt;/strong&gt;运算符创建一个用户自定义的对象类型的实例，或者具有构造函数的内置对象类型之一。看下下面的代码来了解new操作符都做了什么事情&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JS" scheme="https://github.com/QiqiM/categories/JS/"/>
    
    
      <category term="JS" scheme="https://github.com/QiqiM/tags/JS/"/>
    
      <category term="深入js系列" scheme="https://github.com/QiqiM/tags/%E6%B7%B1%E5%85%A5js%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>模拟实现js的bind方法</title>
    <link href="https://github.com/QiqiM/2020/02/26/%E6%B7%B1%E5%85%A5js%E7%B3%BB%E5%88%97/%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0js%E7%9A%84bind%E6%96%B9%E6%B3%95/"/>
    <id>https://github.com/QiqiM/2020/02/26/深入js系列/模拟实现js的bind方法/</id>
    <published>2020-02-26T13:58:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype.bind); <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype.bind());  <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.bind.name);  <span class="comment">// bind</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.bind().name);  <span class="comment">// bound</span></span><br></pre></td></tr></table></figure><a id="more"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200229141250-image.png" alt="20200229141250imagepng" title="">                </div>                <div class="image-caption">20200229141250imagepng</div>            </figure><h4 id="bind是什么"><a href="#bind是什么" class="headerlink" title="bind是什么"></a>bind是什么</h4><ul><li><p>a. <code>bind</code> 是<code>Function</code>原型链中<code>Function.prototype</code>的一个函数，每个函数都可以调用它。</p></li><li><p>b. <code>bind</code>本身是一个函数名为<code>bind</code>的函数，返回值也是函数，函数名是<code>bound</code>。(console出来为</p><p><code>bound</code>加上一个空格)。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"yato"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">original</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    <span class="built_in">console</span>.log([a,b])</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = original.bind(obj, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> boundInvoke = bound(<span class="number">2</span>)                    <span class="comment">// 'yato', Array(2)[1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(boundInvoke)                       <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(original.bind.name)                <span class="comment">// bind</span></span><br><span class="line"><span class="built_in">console</span>.log(original.bind.length)              <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(original.bind().length)            <span class="comment">// 2 返回original函数形参个数</span></span><br><span class="line"><span class="built_in">console</span>.log(bound.name)                        <span class="comment">// 'bound original'</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;).bind().name)        <span class="comment">// 'bound '</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;).bind().length)      <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/QiqiM/yato-GitNote/master/20200301155455-image.png" alt="20200301155455imagepng" title="">                </div>                <div class="image-caption">20200301155455imagepng</div>            </figure><h4 id="进一步理解bind"><a href="#进一步理解bind" class="headerlink" title="进一步理解bind"></a>进一步理解bind</h4><ul><li>a. 调用<code>bind</code>的函数中的<code>this</code>指向<code>bind()</code>函数的第一个参数。</li><li><p>b. 函数<code>bind()</code>时传递的参数被bind接受处理，<code>bind()</code>完毕之后，程序调用返回的函数（<strong>bound</strong>）时，传递的参数也接收处理了，也就是在<code>bind()</code>内部合并处理了。</p></li><li><p>c. 并且<code>bind()</code>后的函数的name为<code>bound+空格+调用bind的函数名</code>。如果调用函数为匿名函数，则名字为<code>bound+空格</code></p></li><li><p>d. <code>bind</code>后的返回值函数，执行后返回值时原函数<code>（original）</code>的返回值（上例中的false）</p></li><li><p>e. <code>bind</code>函数的形参（即函数的<code>length</code>）是<code>1</code>。<code>bind</code>后返回的<code>bound函数形参不定</code>，根据绑定的函数原函数（<code>original</code>）形参个数决定。</p></li></ul><h4 id="根据上面的两个例子，模拟实现一个简单版的bindFn"><a href="#根据上面的两个例子，模拟实现一个简单版的bindFn" class="headerlink" title="根据上面的两个例子，模拟实现一个简单版的bindFn"></a>根据上面的两个例子，模拟实现一个简单版的<code>bindFn</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bindFn = <span class="function"><span class="keyword">function</span> <span class="title">bindFake</span>(<span class="params">thisArg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="keyword">this</span> + <span class="string">'must be a function'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储函数本身</span></span><br><span class="line">    <span class="keyword">let</span> self  = <span class="keyword">this</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 去除thisArg的其他参数，转成数组</span></span><br><span class="line">    <span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> bound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// bind 返回的函数，也就是bound，在程序中被调用时传递的参数转成数组</span></span><br><span class="line">        <span class="keyword">let</span> boundArg = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// apply修改this指向，把两个函数的参数合并传给self函数，返回执行结果</span></span><br><span class="line">        <span class="keyword">return</span> self.apply(thisArg, args.concat(boundArg))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'yato'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">original</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    <span class="built_in">console</span>.log([a,b])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = original.bindFn(obj, <span class="number">1</span>)</span><br><span class="line">bound(<span class="number">2</span>);  <span class="comment">// 'yato', [1,2]</span></span><br></pre></td></tr></table></figure><h4 id="但是函数是可以使用new来实例化的。"><a href="#但是函数是可以使用new来实例化的。" class="headerlink" title="但是函数是可以使用new来实例化的。"></a>但是函数是可以使用<code>new</code>来实例化的。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span> : <span class="string">'yato'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">original</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this : '</span>, <span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'typeof this : '</span>, <span class="keyword">typeof</span> <span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.name = b</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'name: '</span>, <span class="keyword">this</span>.name)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this: '</span>, <span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log([a,b])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = original.bind(obj, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> newBoundInvoke = <span class="keyword">new</span> bound(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'newBoundInvoke: '</span>, newBoundInvoke)</span><br></pre></td></tr></table></figure><p><strong>分析例子可以得出结论</strong></p><ul><li><p>a. 从例子中可以看出<code>this</code>指向了<code>new bound()</code>生成的对象</p></li><li><p>b.  new bound() 的返回值是以original原函数构造器生成的新对象。original原函数的this指向的就是这个新对象。</p></li><li><p>c.简要剖析下new做了什么</p><ol><li>创建一个全新的空对象</li><li>对这个对象指向原型链接（<code>instance.__proto__ = Class.prototype</code> ），其实<code>Class.prototype</code>就是<code>constructor</code></li><li>生成的新对象会绑定到函数调用的this</li><li>通过new创建的每个对象最终被<code>[[prototype]]</code>链接这个函数的<code>prototype</code>上（参考2）</li><li>如果函数没有返回对象类型<code>Object</code>(包含<code>Function</code>, <code>Array</code>, <code>Date</code>, <code>RegExg</code>, <code>Error</code>),那么<code>new表达式</code>中的函数调用会自动返回这个新的对象</li></ol></li></ul><h5 id="所以相当于在new调用时，bind的返回值函数bound内部要实现new的操作"><a href="#所以相当于在new调用时，bind的返回值函数bound内部要实现new的操作" class="headerlink" title="所以相当于在new调用时，bind的返回值函数bound内部要实现new的操作"></a>所以相当于在new调用时，bind的返回值函数bound内部要实现new的操作</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二版 实现new调用</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bindFn = <span class="function"><span class="keyword">function</span> <span class="title">bindFake</span>(<span class="params">thisArg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="keyword">this</span> + <span class="string">' must be a function'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储调用bind的函数本身的引用</span></span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去除thisArg参数，其他转成数组</span></span><br><span class="line">    <span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> bound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> boundArgs = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">        <span class="keyword">let</span> finalArgs = args.concat(boundArgs)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// new 调用时，其实this instanceof bound 判断不是很准确。es6</span></span><br><span class="line">        <span class="comment">// new.target就是解决这一问题的</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> bound)&#123;</span><br><span class="line">            <span class="comment">// 这里是实现上文描述的 new 的第 1, 2, 4 步</span></span><br><span class="line">            <span class="comment">// 1.创建一个全新的对象</span></span><br><span class="line">            <span class="comment">// 2.并且执行[[Prototype]]链接</span></span><br><span class="line">            <span class="comment">// 4.通过`new`创建的每个对象将最终被`[[Prototype]]`链接到这个函数的`prototype`对象上。</span></span><br><span class="line">            <span class="comment">// self可能是ES6的箭头函数，没有prototype，所以就没必要再指向做prototype操作。</span></span><br><span class="line">            <span class="keyword">if</span>(self.prototype)&#123;</span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="title">Empty</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">                Empty.prototype = self.prototype</span><br><span class="line">                bound.prototype = <span class="keyword">new</span> Empty()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这里实现的时上文描述的第三步</span></span><br><span class="line">            <span class="comment">// 3.生成的新对象会绑定到函数调用的this</span></span><br><span class="line">            <span class="keyword">let</span> result = self.apply(<span class="keyword">this</span>, finalArgs);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这里是实现上文描述的 new 的第 5 步</span></span><br><span class="line">            <span class="comment">// 5.如果函数没有返回对象类型`Object`(包含`Functoin`, `Array`, `Date`, `RegExg`,               //   `Error`)，</span></span><br><span class="line">            <span class="comment">// 那么`new`表达式中的函数调用会自动返回这个新的对象。</span></span><br><span class="line">            <span class="keyword">let</span> isObject = <span class="keyword">typeof</span> result === <span class="string">'object'</span> &amp;&amp; result !== <span class="literal">null</span></span><br><span class="line">            <span class="keyword">let</span> isFunction = <span class="keyword">typeof</span> result === <span class="string">'function'</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(isObject || isFunction)</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// apply修改this指向，把两个函数的参数合并传给self函数，并执行self函数，返回执行结果</span></span><br><span class="line">            <span class="keyword">return</span> self.apply(thisArg, finalArgs)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span> : <span class="string">'yato'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">original</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this : '</span>, <span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'typeof this : '</span>, <span class="keyword">typeof</span> <span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.name = b</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'name: '</span>, <span class="keyword">this</span>.name)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this: '</span>, <span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log([a,b])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = original.bindFn(obj, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> newBoundInvoke = <span class="keyword">new</span> bound(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'newBoundInvoke: '</span>, newBoundInvoke)</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><ol><li><code>bind</code>是<code>Function</code>原型链中<code>Function.prototype</code>的一个属性，它是一个函数，修改<code>this指向</code>，合并参数传递给原函数，<code>返回值是一个新的函数</code>。</li></ol></li><li><ol start="2"><li><code>bind</code>返回的函数可以通过<code>new</code>调用，这是提供的<code>this参数被忽略</code>，指向了new生成的全新对象。<code>bind()</code>内部模拟实现了<code>new</code>操作符</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;.prototype.bind); &lt;span class=&quot;comment&quot;&gt;// function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;.prototype.bind());  &lt;span class=&quot;comment&quot;&gt;// function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;.prototype.bind.name);  &lt;span class=&quot;comment&quot;&gt;// bind&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;.prototype.bind().name);  &lt;span class=&quot;comment&quot;&gt;// bound&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS" scheme="https://github.com/QiqiM/categories/JS/"/>
    
    
      <category term="JS" scheme="https://github.com/QiqiM/tags/JS/"/>
    
      <category term="深入js系列" scheme="https://github.com/QiqiM/tags/%E6%B7%B1%E5%85%A5js%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>C++实现双向链表</title>
    <link href="https://github.com/QiqiM/2019/06/25/C++%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>https://github.com/QiqiM/2019/06/25/C++实现双向链表/</id>
    <published>2019-06-25T02:43:13.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<p>　　双向链表(双链表)是链表的一种。和单链表一样，双链表也是由节点组成，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。一般我们都构造双向循环链表。<br><a id="more"></a></p><h3 id="C-实现双向链表"><a href="#C-实现双向链表" class="headerlink" title="C++实现双向链表"></a>C++实现双向链表</h3><p>双向链表头文件(LinkList.h)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _LINK_LIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _LINK_LIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">DNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T value;</span><br><span class="line">DNode *prev;</span><br><span class="line">DNode *next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">DNode() &#123;&#125;</span><br><span class="line">DNode(T t, DNode *prev, DNode *next) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;value = t;</span><br><span class="line"><span class="keyword">this</span>-&gt;prev = prev;</span><br><span class="line"><span class="keyword">this</span>-&gt;next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">DoubleLink</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">DoubleLink();</span><br><span class="line">~DoubleLink();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function">T <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">T <span class="title">getLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, T t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertFirst</span><span class="params">(T t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">appendLast</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delFirst</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delLast</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">DNode&lt;T&gt; *pHead;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">DNode&lt;T&gt; *getNode(<span class="keyword">int</span> index);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">DoubleLink</span>&lt;T&gt;:</span>:DoubleLink() : count(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 创建表头。注意：表头没有存储数据</span></span><br><span class="line">pHead = <span class="keyword">new</span> DNode&lt;T&gt;();</span><br><span class="line">pHead-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 析构函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">DoubleLink</span>&lt;T&gt;:</span>:~DoubleLink()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 删除所有结点</span></span><br><span class="line">DNode&lt;T&gt;* pTemp;</span><br><span class="line">DNode&lt;T&gt;* pNode = pHead-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (pNode != pHead) </span><br><span class="line">&#123;</span><br><span class="line">pTemp = pNode;</span><br><span class="line">pNode = pNode-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> pTemp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除表头</span></span><br><span class="line"><span class="keyword">delete</span> pHead;</span><br><span class="line">pHead = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回结点数目</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:isEmpty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回节点数目</span></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:size()</span><br><span class="line">&#123;   </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取index位置的结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">DNode</span>&lt;T&gt;* <span class="title">DoubleLink</span>&lt;T&gt;:</span>:getNode(<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 判断参数有效性</span></span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= count)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" getNode failed! the index is out of round"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  正向查找， 查找优化，减少查找次数</span></span><br><span class="line"><span class="keyword">if</span> (index &lt;= count / <span class="number">2</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">DNode&lt;T&gt;* pIndex = pHead-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (i++ &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">pIndex = pIndex-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pIndex;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 反向查找</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rIndex = count - index - <span class="number">1</span>;</span><br><span class="line">DNode&lt;T&gt;* pRindex = pHead-&gt;prev;</span><br><span class="line"><span class="keyword">while</span> (j++ &lt; rIndex)</span><br><span class="line">&#123;</span><br><span class="line">pRindex = pRindex-&gt;prev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pRindex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第index位置的结点的值</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:get(<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> getNode(index)-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第一个结点的值</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:getLast()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> getNode(count<span class="number">-1</span>)-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取最后一个结点的值</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:getFirst()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> getNode(<span class="number">0</span>)-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结点插入到第index位置之前</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:insert(<span class="keyword">int</span> index, T t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> insertFirst(t);</span><br><span class="line"></span><br><span class="line">DNode&lt;T&gt;* pIndex = getNode(index);</span><br><span class="line">DNode&lt;T&gt;* pNode = <span class="keyword">new</span> DNode&lt;T&gt;(t, pIndex-&gt;prev, pIndex);</span><br><span class="line">pIndex-&gt;prev-&gt;next = pNode;</span><br><span class="line">pIndex-&gt;prev = pNode;</span><br><span class="line">count++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结点插入到第一个结点处</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:insertFirst(T t)</span><br><span class="line">&#123;</span><br><span class="line">DNode&lt;T&gt;* pNode = <span class="keyword">new</span> DNode&lt;T&gt;(t, pHead, pHead-&gt;next);   <span class="comment">// 构造函数时就已经指定结点的前驱和后继结点了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里第一个结点的时候需要判断空指针</span></span><br><span class="line"><span class="keyword">if</span> (pHead-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">pHead-&gt;prev = pNode;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pHead-&gt;next-&gt;prev = pNode;</span><br><span class="line"></span><br><span class="line">pHead-&gt;next = pNode;</span><br><span class="line">count++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结点追加到链表的末尾</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:appendLast(T t)</span><br><span class="line">&#123;</span><br><span class="line">DNode&lt;T&gt;* pNode = <span class="keyword">new</span> DNode&lt;T&gt;(t, pHead-&gt;prev, pHead);</span><br><span class="line">pHead-&gt;prev-&gt;next = pNode;</span><br><span class="line">pHead-&gt;prev = pNode;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除index位置的结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:del(<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line">DNode&lt;T&gt;* pIndex = getNode(index);</span><br><span class="line">pIndex-&gt;next-&gt;prev = pIndex-&gt;prev;</span><br><span class="line">pIndex-&gt;prev-&gt;next = pIndex-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> pIndex;</span><br><span class="line">count--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第一个结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:delFirst()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> del(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除最后一个结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">DoubleLink</span>&lt;T&gt;:</span>:delLast()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> del(count - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !_LINK_LIST_H</span></span></span><br></pre></td></tr></table></figure></p><h4 id="双向链表测试文件-LinkList-cpp"><a href="#双向链表测试文件-LinkList-cpp" class="headerlink" title="双向链表测试文件(LinkList.cpp)"></a>双向链表测试文件(LinkList.cpp)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LinkList.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表操作int数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">intTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> intArr[<span class="number">4</span>] = &#123; <span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n -------------intTest------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建双向链表</span></span><br><span class="line">DoubleLink&lt;<span class="keyword">int</span>&gt;* pDlinkList = <span class="keyword">new</span> DoubleLink&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">pDlinkList-&gt;insert(<span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">pDlinkList-&gt;appendLast(<span class="number">10</span>);</span><br><span class="line">pDlinkList-&gt;insertFirst(<span class="number">30</span>);</span><br><span class="line">pDlinkList-&gt;insert(<span class="number">1</span>, <span class="number">40</span>);</span><br><span class="line">pDlinkList-&gt;delFirst();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表是否为空</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"isEmpty= "</span> &lt;&lt; pDlinkList-&gt;isEmpty() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表的长度</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"size="</span> &lt;&lt; pDlinkList-&gt;size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印双向链表的全部数据</span></span><br><span class="line"><span class="keyword">int</span> length = pDlinkList-&gt;size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"pDlinkList("</span> &lt;&lt; i &lt;&lt; <span class="string">")="</span> &lt;&lt; pDlinkList-&gt;get(i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stringTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> sArr[<span class="number">4</span>] = &#123; <span class="string">"ten"</span>,<span class="string">"tewnty"</span>,<span class="string">"thirty"</span>,<span class="string">"forty"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n------------stringTest-----------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">DoubleLink&lt;<span class="built_in">string</span>&gt;* pDlinkList = <span class="keyword">new</span> DoubleLink&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">pDlinkList-&gt;insert(<span class="number">0</span>, sArr[<span class="number">1</span>]);</span><br><span class="line">pDlinkList-&gt;appendLast(sArr[<span class="number">0</span>]);</span><br><span class="line">pDlinkList-&gt;insertFirst(sArr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表是否为空</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"isEmpty()="</span> &lt;&lt; pDlinkList-&gt;isEmpty() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表的长度</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"size="</span> &lt;&lt; pDlinkList-&gt;size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印双向链表的全部数据</span></span><br><span class="line"><span class="keyword">int</span> length = pDlinkList-&gt;size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"pDlinkList("</span> &lt;&lt; i &lt;&lt; <span class="string">")="</span> &lt;&lt; pDlinkList-&gt;get(i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> stu stuArr[] = </span><br><span class="line">&#123; </span><br><span class="line">&#123;<span class="number">10</span>,<span class="string">"one"</span>&#125;,</span><br><span class="line">&#123;<span class="number">20</span>,<span class="string">"two"</span>&#125;,</span><br><span class="line">&#123;<span class="number">30</span>,<span class="string">"three"</span>&#125;,</span><br><span class="line">&#123;<span class="number">40</span>,<span class="string">"four"</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARR_STU_SIZE ((sizeof(stuArr)) / (sizeof(stuArr[0])))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objectTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n------------stringTest-----------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">DoubleLink&lt;stu&gt;* pDlinkList = <span class="keyword">new</span> DoubleLink&lt;stu&gt;();</span><br><span class="line"></span><br><span class="line">pDlinkList-&gt;insert(<span class="number">0</span>, stuArr[<span class="number">1</span>]);</span><br><span class="line">pDlinkList-&gt;appendLast(stuArr[<span class="number">0</span>]);</span><br><span class="line">pDlinkList-&gt;insertFirst(stuArr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表是否为空</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"isEmpty()="</span> &lt;&lt; pDlinkList-&gt;isEmpty() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表的长度</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"size="</span> &lt;&lt; pDlinkList-&gt;size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印双向链表的全部数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">p</span>;</span></span><br><span class="line"><span class="keyword">int</span> length = pDlinkList-&gt;size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = pDlinkList-&gt;get(i);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"pDlinkList("</span> &lt;&lt; i &lt;&lt; <span class="string">")=["</span> &lt;&lt; p.id &lt;&lt;<span class="string">" ,"</span> &lt;&lt; p.name&lt;&lt;<span class="string">"]"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">intTest();</span><br><span class="line">stringTest();</span><br><span class="line">objectTest();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　此文实现<a href="https://www.cnblogs.com/skywang12345/p/3561803.html" target="_blank" rel="noopener">参考</a>,侵权必删，大佬的有一些错误，经过测试已经修改。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　双向链表(双链表)是链表的一种。和单链表一样，双链表也是由节点组成，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。一般我们都构造双向循环链表。&lt;br&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://github.com/QiqiM/tags/algorithm/"/>
    
      <category term="C++" scheme="https://github.com/QiqiM/tags/C/"/>
    
      <category term="LinkList" scheme="https://github.com/QiqiM/tags/LinkList/"/>
    
  </entry>
  
  <entry>
    <title>常见排序算法1-冒泡排序</title>
    <link href="https://github.com/QiqiM/2019/06/12/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%951--%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>https://github.com/QiqiM/2019/06/12/常见排序算法1--冒泡排序/</id>
    <published>2019-06-12T02:37:10.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><p>　　冒泡排序(Bubble Sort，也叫泡沫排序或气泡排序)，是一种简单的排序算法。它重复的走访过要排序的数列，一次比较两个元素，如果他们的顺序错误，将元素位置对调。走访数列的工作是重复进行的，直到再没有需要交换的数据，该数列排序完成。<br><a id="more"></a><br>　　冒泡排序算法的流程如下：</p><ol><li>比较相邻的元素。如果第一个元素大于第二个元素，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数</li><li>针对所有的元素重复以上的步骤，除了最后一个元素（到最后一个元素，已经排好序了）</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>以数组arr = [5,2,6,9,3]为例说明，加粗的数字表示每次循环要比较的两个数字：</p><p>第一次外循环<br>    ( <strong>5</strong> <strong>2</strong> 6 9 3 ) ==&gt; ( <strong>2</strong> <strong>5</strong> 6 9 3 )  |  5 &gt; 2 交换位置<br>    ( 2 <strong>5</strong> <strong>6</strong> 9 3 ) ==&gt; ( 2 <strong>5</strong> <strong>6</strong> 9 3 )  |  5 &lt; 6 位置不变<br>    ( 2 5 <strong>6</strong> <strong>9</strong> 3 ) ==&gt; ( 2 5 <strong>6</strong> <strong>9</strong> 3 )  |  6 &lt; 9 位置不变<br>    ( 2 5 6 <strong>9</strong> <strong>3</strong> ) ==&gt; ( 2 5 6 <strong>3</strong> <strong>9</strong> )  |  9 &gt; 3 交换位置</p><p>第二次外循环<br>    ( <strong>2</strong> <strong>5</strong> 6 3 9 ) ==&gt; ( <strong>2</strong> <strong>5</strong> 6 3 9 )  |  2 &lt; 3 位置不变<br>    ( 2 <strong>5</strong> <strong>6</strong> 3 9 ) ==&gt; ( 2 <strong>5</strong> <strong>6</strong> 3 9 )  |  5 &lt; 6 位置不变<br>    ( 2 5 <strong>6</strong> <strong>3</strong> 9 ) ==&gt; ( 2 5 <strong>3</strong> <strong>6</strong> 9 )  |  6 &gt; 3 交换位置</p><p>第三次外循环<br>    ( <strong>2</strong> <strong>5</strong> 3 6 9 ) ==&gt; ( <strong>2</strong> <strong>5</strong> 3 6 9 )  |  2 &lt; 5 位置不变<br>    ( 2 <strong>5</strong> <strong>3</strong> 6 9 ) ==&gt; ( 2 <strong>3</strong> <strong>5</strong> 6 9 )  |  5 &gt; 3 交换位置</p><p>第四次外循环（观察一下，其实此时已经排完序了，但是程序并不知道，所以仍要进行后续循环，直到剩余的序列为1）<br>   ( <strong>2</strong> <strong>3</strong> 5 6 9 ) ==&gt; ( <strong>2</strong> <strong>3</strong> 5 6 9 )  |  2 &lt; 5 位置不变</p><h3 id="javaScript实现"><a href="#javaScript实现" class="headerlink" title="javaScript实现"></a>javaScript实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> testArr = [<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort1</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i,j,temp,l = arr.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = l- <span class="number">1</span>; i &gt; <span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubbleSort1(testArr);</span><br><span class="line"><span class="built_in">console</span>.log(testArr);   <span class="comment">// [ 2, 3, 5, 6, 9 ]</span></span><br></pre></td></tr></table></figure><p>观察上面冒泡排序的流程，不需要到最后一步，就排序完成了，后面的循环就浪费了，可以设置个flag来使它的效率更高一些：添加一个标记，如果一趟遍历中发生了变换，则标记为true,否则为false.如果一趟没有发生交换，说明排序已经完成。</p><h3 id="冒泡排序优化"><a href="#冒泡排序优化" class="headerlink" title="冒泡排序优化"></a>冒泡排序优化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort2</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i,j,temp,l = arr.length;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="number">0</span>;   <span class="comment">// 初始化flag为0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = l- <span class="number">1</span>; i &gt; <span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">                flag = <span class="number">1</span>;   <span class="comment">// 若发生交换，则标记为1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag === <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;        <span class="comment">// 若没有发生交换，则说明数列已经有序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubbleSort2(testArr);</span><br><span class="line"><span class="built_in">console</span>.log(testArr);   <span class="comment">// [ 2, 3, 5, 6, 9 ]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;算法原理&quot;&gt;&lt;a href=&quot;#算法原理&quot; class=&quot;headerlink&quot; title=&quot;算法原理&quot;&gt;&lt;/a&gt;算法原理&lt;/h3&gt;&lt;p&gt;　　冒泡排序(Bubble Sort，也叫泡沫排序或气泡排序)，是一种简单的排序算法。它重复的走访过要排序的数列，一次比较两个元素，如果他们的顺序错误，将元素位置对调。走访数列的工作是重复进行的，直到再没有需要交换的数据，该数列排序完成。&lt;br&gt;
    
    </summary>
    
    
      <category term="algorithm, sort" scheme="https://github.com/QiqiM/tags/algorithm-sort/"/>
    
  </entry>
  
  <entry>
    <title>屈原《渔父》</title>
    <link href="https://github.com/QiqiM/2018/12/19/%E5%B1%88%E5%8E%9F%E3%80%8A%E6%B8%94%E7%88%B6%E3%80%8B/"/>
    <id>https://github.com/QiqiM/2018/12/19/屈原《渔父》/</id>
    <published>2018-12-19T10:37:10.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="转载自阮一峰老师的个人blog，侵权必删！"><a href="#转载自阮一峰老师的个人blog，侵权必删！" class="headerlink" title="转载自阮一峰老师的个人blog，侵权必删！"></a>转载自阮一峰老师的个人blog，侵权必删！</h4><p><a href="http://www.ruanyifeng.com/road/2006/2006-01-10-qu-yuan.html" target="_blank" rel="noopener">原文链接</a></p><h2 id="译文（大巧若工）"><a href="#译文（大巧若工）" class="headerlink" title="译文（大巧若工）"></a>译文（大巧若工）</h2><p>　　一个理想主义者痛苦地来到江边。在那里，他遇到了一个现实主义者。</p><p>　　现实问：“你为什么如此憔悴？”</p><p>　　理想答：“这个世界容不下我。我坚持的东西，其他人都无所谓；他们热衷的东西，我没有办法强迫自己加入。”</p><p>　　现实笑道：“老兄何必这么迂腐呢，别人怎么样，你也怎么样，不就可以了吗？他们脏，你也跟着一起脏，又何妨？像你这样自我孤立，真是自讨苦吃，不值得啊。”<br><a id="more"></a></p><p>　　理想说：“那我要问你，刚洗完头的人愿不愿意戴脏帽子，刚洗完澡的人愿不愿意穿脏衣服？干净的身体怎么能够甘心沾上灰尘呢？与其同流合污，不如选择孤独。”</p><p>　　现实指着面前的江水说：“你看这滔滔江水，如果水是清的，我就用它来洗衣服，活得干干净净；如果水是脏的，我就用它洗脚。人应该要学会适应。”</p><p>　　至此，两人就不再说话了。</p><h2 id="《渔父》-—屈原"><a href="#《渔父》-—屈原" class="headerlink" title="《渔父》 —屈原"></a>《渔父》 —屈原</h2><p>　　屈原既放，游于江潭，行吟泽畔；颜色憔悴，形容枯槁。</p><p>　　渔父见而问之曰：“子非三闾大夫与？何故至于斯？”</p><p>　　屈原曰：“举世皆浊我独清，众人皆醉我独醒，是以见放。”</p><p>　　渔父曰：“圣人不凝滞于物，而能与世推移。世人皆浊，何不淈其泥而扬其波？众人皆醉，何不铺其糟而歠其醨？何故深思高举，自令放为？”</p><p>　　屈原曰：“吾闻之：新沐者必弹冠，新浴者必振衣，安能以身之察察，受物之汶汶者乎？宁赴湘流，葬身于江鱼之腹中，安能以皓皓之白，而蒙世俗之尘埃乎？”</p><p>　　渔父莞尔而笑，鼓枻而去。歌曰：“沧浪之水清兮，可以濯吾缨；沧浪之水浊兮，可以濯吾足。”遂去，不复与言。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;转载自阮一峰老师的个人blog，侵权必删！&quot;&gt;&lt;a href=&quot;#转载自阮一峰老师的个人blog，侵权必删！&quot; class=&quot;headerlink&quot; title=&quot;转载自阮一峰老师的个人blog，侵权必删！&quot;&gt;&lt;/a&gt;转载自阮一峰老师的个人blog，侵权必删！&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/road/2006/2006-01-10-qu-yuan.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;译文（大巧若工）&quot;&gt;&lt;a href=&quot;#译文（大巧若工）&quot; class=&quot;headerlink&quot; title=&quot;译文（大巧若工）&quot;&gt;&lt;/a&gt;译文（大巧若工）&lt;/h2&gt;&lt;p&gt;　　一个理想主义者痛苦地来到江边。在那里，他遇到了一个现实主义者。&lt;/p&gt;
&lt;p&gt;　　现实问：“你为什么如此憔悴？”&lt;/p&gt;
&lt;p&gt;　　理想答：“这个世界容不下我。我坚持的东西，其他人都无所谓；他们热衷的东西，我没有办法强迫自己加入。”&lt;/p&gt;
&lt;p&gt;　　现实笑道：“老兄何必这么迂腐呢，别人怎么样，你也怎么样，不就可以了吗？他们脏，你也跟着一起脏，又何妨？像你这样自我孤立，真是自讨苦吃，不值得啊。”&lt;br&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://github.com/QiqiM/tags/Article/"/>
    
  </entry>
  
  <entry>
    <title>历史过程</title>
    <link href="https://github.com/QiqiM/2018/12/19/%E5%8E%86%E5%8F%B2%E8%BF%87%E7%A8%8B/"/>
    <id>https://github.com/QiqiM/2018/12/19/历史过程/</id>
    <published>2018-12-19T10:26:41.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="转载自阮一峰老师的个人blog-侵权必删！"><a href="#转载自阮一峰老师的个人blog-侵权必删！" class="headerlink" title="转载自阮一峰老师的个人blog,侵权必删！"></a>转载自阮一峰老师的个人blog,侵权必删！</h4><p><a href="http://www.ruanyifeng.com/road/2006/2006-02-18-history-process.html" target="_blank" rel="noopener">原文链接</a></p><p>　　小时候，政治课里经常说，事物发展有一个历史过程。当时只觉得是很普通的一句话，现在明白它的涵义了。</p><p>　　什么叫历史过程？就是无法避免的牺牲。<br><a id="more"></a><br>　　贵州某山区，漫山遍野的小冶炼作坊，青山绿水成了黑山污水。重金属离子渗入土地，癌症流行，儿童极易出现畸形和智力低下。但是无法关闭这些作坊，因为关了就没收入，所以当地人明知有毒也要干。近几年，有色金属价格暴涨，又不知有多少山河要被毁掉。可是没有办法，这叫历史过程。</p><p>　　小煤矿每年死这么多人，为什么降不下来？因为当地财政依赖采矿收入，政府根本下不了决心关；而矿工如果不去挖煤，就要沦落为流浪汉。这叫历史过程。</p><p>　　中华人民共和国建国后的发展，就是依靠强制低收入来实现国家资本积累。我们的父辈下乡、支内、进国有工厂，不就是用他们的一生为国家的原始积累做贡献嘛？他们的人生就这样被牺牲掉了。这叫历史过程。</p><p>　　一位英国历史学家说：“历史涉及的只是一个民族生活的极小部分。人民的大部分生活，过去和未来都不会有文字记载。”</p><p>　　历史过程无法避免，生命就这样无意义地牺牲和痛苦着。唯愿那些为历史做陪葬的人生不要被忘记。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;转载自阮一峰老师的个人blog-侵权必删！&quot;&gt;&lt;a href=&quot;#转载自阮一峰老师的个人blog-侵权必删！&quot; class=&quot;headerlink&quot; title=&quot;转载自阮一峰老师的个人blog,侵权必删！&quot;&gt;&lt;/a&gt;转载自阮一峰老师的个人blog,侵权必删！&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/road/2006/2006-02-18-history-process.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　小时候，政治课里经常说，事物发展有一个历史过程。当时只觉得是很普通的一句话，现在明白它的涵义了。&lt;/p&gt;
&lt;p&gt;　　什么叫历史过程？就是无法避免的牺牲。&lt;br&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://github.com/QiqiM/tags/Article/"/>
    
  </entry>
  
  <entry>
    <title>php array</title>
    <link href="https://github.com/QiqiM/2018/12/15/php-array/"/>
    <id>https://github.com/QiqiM/2018/12/15/php-array/</id>
    <published>2018-12-15T09:32:01.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-php中如何循环二维数组"><a href="#1-php中如何循环二维数组" class="headerlink" title="1.php中如何循环二维数组"></a>1.php中如何循环二维数组</h3><p>在php中，采用foreach循环来对二维索引数组进行遍历,下面的例子演示如何将三个关联数组，通过公有的key,在例子中是gid;组合成一个关联数组。<br><a id="more"></a></p><h4 id="a-初始化数据"><a href="#a-初始化数据" class="headerlink" title="a.初始化数据"></a>a.初始化数据</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">$paylist = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">'money'</span>=&gt; <span class="string">'100'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">1</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">'money'</span>=&gt; <span class="string">'200'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">2</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">4</span>,</span><br><span class="line">        <span class="string">'money'</span>=&gt; <span class="string">'300'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">3</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">6</span>,</span><br><span class="line">        <span class="string">'money'</span>=&gt; <span class="string">'400'</span></span><br><span class="line">    ),  </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$rolelist = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">'name'</span>=&gt; <span class="string">'xx1'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">1</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">2</span>,</span><br><span class="line">        <span class="string">'name'</span>=&gt; <span class="string">'xx2'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">2</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">4</span>,</span><br><span class="line">        <span class="string">'name'</span>=&gt; <span class="string">'xx4'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">3</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">6</span>,</span><br><span class="line">        <span class="string">'name'</span>=&gt; <span class="string">'xx6'</span></span><br><span class="line">    ),  </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$serverlist = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">'servername'</span>=&gt; <span class="string">'s1'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">1</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">2</span>,</span><br><span class="line">        <span class="string">'servername'</span>=&gt; <span class="string">'s2'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">2</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">4</span>,</span><br><span class="line">        <span class="string">'servername'</span>=&gt; <span class="string">'s4'</span></span><br><span class="line">    ),  </span><br><span class="line">    <span class="number">3</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'gid'</span>=&gt; <span class="number">6</span>,</span><br><span class="line">        <span class="string">'servername'</span>=&gt; <span class="string">'s4'</span></span><br><span class="line">    ),  </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$gsidarr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line"><span class="comment">//去重排序</span></span><br><span class="line">$gsidarr = array_unique($gsidarr);</span><br><span class="line">$gsidarr = array_values($gsidarr);</span><br></pre></td></tr></table></figure><h4 id="b-构造数据-将公有key提取出来作为key值索引"><a href="#b-构造数据-将公有key提取出来作为key值索引" class="headerlink" title="b.构造数据(将公有key提取出来作为key值索引)"></a>b.构造数据(将公有key提取出来作为key值索引)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$roleresult = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span>($rolelist <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">    $roleresult[$value[<span class="string">'gid'</span>]] = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;/br&gt;----'</span>.json_encode($roleresult).<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line"><span class="keyword">foreach</span>($roleresult <span class="keyword">as</span> $k=&gt;$v)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $v[<span class="string">'name'</span>].<span class="string">'==&gt;'</span>.$v[<span class="string">'gid'</span>].<span class="string">'--&lt;/br&gt;'</span>;  <span class="comment">//打印一下构造之后的数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造之后的数据roleresult</span></span><br><span class="line"><span class="comment">//&#123;"1":&#123;"gid":1,"name":"xx1"&#125;,"2":&#123;"gid":2,"name":"xx2"&#125;,"4":&#123;"gid":4,"name":"xx4"&#125;,"6":&#123;"gid":6,"name":"xx6"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">$serresult = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span>($serverlist <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">    $serresult[$value[<span class="string">'gid'</span>]] = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;/br&gt;----'</span>.json_encode($serresult).<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line"><span class="keyword">foreach</span>($serresult <span class="keyword">as</span> $k=&gt;$v)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $v[<span class="string">'servername'</span>].<span class="string">'==&gt;'</span>.$v[<span class="string">'gid'</span>].<span class="string">'--&lt;/br&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造之后的数据serverresult</span></span><br><span class="line"><span class="comment">// &#123;"1":&#123;"gid":1,"servername":"s1"&#125;,"2":&#123;"gid":2,"servername":"s2"&#125;,"4":&#123;"gid":4,"servername":"s4"&#125;,"6":&#123;"gid":6,"servername":"s4"&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="c-将构造好的数据组合起来-通过公有key来取roleresult和serverresult的value"><a href="#c-将构造好的数据组合起来-通过公有key来取roleresult和serverresult的value" class="headerlink" title="c.将构造好的数据组合起来(通过公有key来取roleresult和serverresult的value)"></a>c.将构造好的数据组合起来(通过公有key来取roleresult和serverresult的value)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ret = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span>($paylist <span class="keyword">as</span> $v)&#123;</span><br><span class="line">    $data = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'money'</span>=&gt;$v[<span class="string">'money'</span>],</span><br><span class="line">            <span class="string">'gid'</span>=&gt;$v[<span class="string">'gid'</span>],</span><br><span class="line">            <span class="string">'name'</span>=&gt;$roleresult[$v[<span class="string">'gid'</span>]][<span class="string">'name'</span>],</span><br><span class="line">            <span class="string">'servername'</span>=&gt;$serresult[$v[<span class="string">'gid'</span>]][<span class="string">'servername'</span>]</span><br><span class="line">        );</span><br><span class="line">        array_push($ret,$data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组装好之后的数据</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [&#123;"money":"100","gid":1,"name":"xx1","servername":"s1"&#125;,&#123;"money":"200", </span></span><br><span class="line"><span class="comment">    "gid":1,"name":"xx1","servername":"s1"&#125;,&#123;"money":"300","gid":4,</span></span><br><span class="line"><span class="comment">    "name":"xx4","servername":"s4"&#125;,&#123;"money":"400","gid":6,"name":"xx6",</span></span><br><span class="line"><span class="comment">    "servername":"s4"&#125;]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;/br&gt;----'</span>.json_encode($ret).<span class="string">'&lt;/br&gt;'</span>;</span><br></pre></td></tr></table></figure><h3 id="2-最后附一个在线测试代码的网站"><a href="#2-最后附一个在线测试代码的网站" class="headerlink" title="2.最后附一个在线测试代码的网站"></a>2.最后附一个在线测试代码的网站</h3><p><a href="https://www.dooccn.com/php/" target="_blank" rel="noopener">在线测试网站</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-php中如何循环二维数组&quot;&gt;&lt;a href=&quot;#1-php中如何循环二维数组&quot; class=&quot;headerlink&quot; title=&quot;1.php中如何循环二维数组&quot;&gt;&lt;/a&gt;1.php中如何循环二维数组&lt;/h3&gt;&lt;p&gt;在php中，采用foreach循环来对二维索引数组进行遍历,下面的例子演示如何将三个关联数组，通过公有的key,在例子中是gid;组合成一个关联数组。&lt;br&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://github.com/QiqiM/tags/php/"/>
    
      <category term="array" scheme="https://github.com/QiqiM/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/QiqiM/2018/11/19/hello-world/"/>
    <id>https://github.com/QiqiM/2018/11/19/hello-world/</id>
    <published>2018-11-19T10:37:10.000Z</published>
    <updated>2020-08-09T05:24:32.368Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Test" scheme="https://github.com/QiqiM/tags/Test/"/>
    
      <category term="hexo" scheme="https://github.com/QiqiM/tags/hexo/"/>
    
  </entry>
  
</feed>
